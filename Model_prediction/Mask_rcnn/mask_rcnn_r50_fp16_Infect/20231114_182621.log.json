{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.5),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.5),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/mask_rcnn_r50_fpn_fp16_1x_coco_20200205-59faf7e4.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/MaskRCNN_R50_fp16_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1963591887, "exp_name": "mask_rcnn_r50_fp16_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3563, "data_time": 2.26471, "loss_rpn_cls": 0.34647, "loss_rpn_bbox": 0.14879, "loss_cls": 0.78509, "acc": 70.81372, "loss_bbox": 0.66044, "loss_mask": 0.99778, "loss": 2.93858, "time": 2.64784}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3806, "data_time": 2.25819, "loss_rpn_cls": 0.03447, "loss_rpn_bbox": 0.09031, "loss_cls": 0.4753, "acc": 80.8584, "loss_bbox": 0.55665, "loss_mask": 0.23131, "loss": 1.38804, "time": 2.64933}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 4015, "data_time": 1.37391, "loss_rpn_cls": 0.01578, "loss_rpn_bbox": 0.07067, "loss_cls": 0.31847, "acc": 88.1123, "loss_bbox": 0.26074, "loss_mask": 0.15489, "loss": 0.82055, "time": 1.76584}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 4015, "data_time": 1.44949, "loss_rpn_cls": 0.01293, "loss_rpn_bbox": 0.06797, "loss_cls": 0.23848, "acc": 91.12109, "loss_bbox": 0.21687, "loss_mask": 0.13768, "loss": 0.67393, "time": 1.84709}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.718, "bbox_mAP_50": 0.882, "bbox_mAP_75": 0.834, "bbox_mAP_s": 0.36, "bbox_mAP_m": 0.723, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.718 0.882 0.834 0.360 0.723 -1.000"}
{"mode": "val", "epoch": 1, "iter": 78, "lr": 0.00443, "memory": 4015, "data_time": 2.38694, "loss_rpn_cls": 0.01215, "loss_rpn_bbox": 0.06547, "loss_cls": 0.20927, "acc": 92.06981, "loss_bbox": 0.2077, "loss_mask": 0.13789, "loss": 0.63248, "time": 2.61801}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00542, "memory": 4015, "data_time": 2.06511, "loss_rpn_cls": 0.00911, "loss_rpn_bbox": 0.06689, "loss_cls": 0.18916, "acc": 93.01562, "loss_bbox": 0.1916, "loss_mask": 0.12567, "loss": 0.58243, "time": 2.44897}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00642, "memory": 4015, "data_time": 2.16959, "loss_rpn_cls": 0.01099, "loss_rpn_bbox": 0.06405, "loss_cls": 0.18603, "acc": 93.07812, "loss_bbox": 0.19779, "loss_mask": 0.12941, "loss": 0.58827, "time": 2.55933}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00742, "memory": 4015, "data_time": 1.53486, "loss_rpn_cls": 0.01072, "loss_rpn_bbox": 0.06412, "loss_cls": 0.17571, "acc": 93.4668, "loss_bbox": 0.19095, "loss_mask": 0.12523, "loss": 0.56673, "time": 1.92803}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00842, "memory": 4015, "data_time": 1.60844, "loss_rpn_cls": 0.01088, "loss_rpn_bbox": 0.06406, "loss_cls": 0.16714, "acc": 93.75781, "loss_bbox": 0.19206, "loss_mask": 0.12914, "loss": 0.56328, "time": 2.00236}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.774, "bbox_mAP_50": 0.916, "bbox_mAP_75": 0.87, "bbox_mAP_s": 0.339, "bbox_mAP_m": 0.779, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.774 0.916 0.870 0.339 0.779 -1.000"}
{"mode": "val", "epoch": 2, "iter": 78, "lr": 0.00886, "memory": 4015, "data_time": 2.42366, "loss_rpn_cls": 0.01134, "loss_rpn_bbox": 0.05989, "loss_cls": 0.16497, "acc": 93.92027, "loss_bbox": 0.18616, "loss_mask": 0.12752, "loss": 0.54988, "time": 2.65921}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00986, "memory": 4015, "data_time": 2.25304, "loss_rpn_cls": 0.00848, "loss_rpn_bbox": 0.05695, "loss_cls": 0.15591, "acc": 94.12305, "loss_bbox": 0.18088, "loss_mask": 0.12175, "loss": 0.52399, "time": 2.65111}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.07343, "loss_rpn_cls": 0.00857, "loss_rpn_bbox": 0.06263, "loss_cls": 0.16251, "acc": 93.85156, "loss_bbox": 0.18509, "loss_mask": 0.11992, "loss": 0.53871, "time": 2.46419}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.48411, "loss_rpn_cls": 0.01094, "loss_rpn_bbox": 0.06361, "loss_cls": 0.14882, "acc": 94.43457, "loss_bbox": 0.18125, "loss_mask": 0.1217, "loss": 0.52632, "time": 1.88217}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.71534, "loss_rpn_cls": 0.00931, "loss_rpn_bbox": 0.06084, "loss_cls": 0.14896, "acc": 94.31348, "loss_bbox": 0.18615, "loss_mask": 0.12264, "loss": 0.52789, "time": 2.11087}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.01, "bbox_mAP": 0.77, "bbox_mAP_50": 0.923, "bbox_mAP_75": 0.885, "bbox_mAP_s": 0.443, "bbox_mAP_m": 0.775, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.770 0.923 0.885 0.443 0.775 -1.000"}
{"mode": "val", "epoch": 3, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.33049, "loss_rpn_cls": 0.01039, "loss_rpn_bbox": 0.06348, "loss_cls": 0.15991, "acc": 93.85705, "loss_bbox": 0.17953, "loss_mask": 0.11864, "loss": 0.53195, "time": 2.5665}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.14233, "loss_rpn_cls": 0.0086, "loss_rpn_bbox": 0.05552, "loss_cls": 0.13861, "acc": 94.75, "loss_bbox": 0.17111, "loss_mask": 0.11817, "loss": 0.49201, "time": 2.53771}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.10398, "loss_rpn_cls": 0.00789, "loss_rpn_bbox": 0.0568, "loss_cls": 0.13133, "acc": 95.09375, "loss_bbox": 0.16251, "loss_mask": 0.11422, "loss": 0.47276, "time": 2.49825}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.3537, "loss_rpn_cls": 0.00728, "loss_rpn_bbox": 0.05305, "loss_cls": 0.13624, "acc": 94.79492, "loss_bbox": 0.16906, "loss_mask": 0.11678, "loss": 0.48242, "time": 1.75167}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.59571, "loss_rpn_cls": 0.00815, "loss_rpn_bbox": 0.0573, "loss_cls": 0.13675, "acc": 94.8623, "loss_bbox": 0.17119, "loss_mask": 0.11676, "loss": 0.49016, "time": 1.98877}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.01, "bbox_mAP": 0.802, "bbox_mAP_50": 0.932, "bbox_mAP_75": 0.898, "bbox_mAP_s": 0.389, "bbox_mAP_m": 0.806, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.802 0.932 0.898 0.389 0.806 -1.000"}
{"mode": "val", "epoch": 4, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.31812, "loss_rpn_cls": 0.01158, "loss_rpn_bbox": 0.0594, "loss_cls": 0.14625, "acc": 94.65082, "loss_bbox": 0.16255, "loss_mask": 0.11692, "loss": 0.4967, "time": 2.55257}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.01978, "loss_rpn_cls": 0.00797, "loss_rpn_bbox": 0.05482, "loss_cls": 0.12845, "acc": 95.08887, "loss_bbox": 0.16312, "loss_mask": 0.11471, "loss": 0.46907, "time": 2.40572}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 1.93085, "loss_rpn_cls": 0.00705, "loss_rpn_bbox": 0.05326, "loss_cls": 0.13262, "acc": 95.02441, "loss_bbox": 0.15911, "loss_mask": 0.11335, "loss": 0.46539, "time": 2.32116}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.51204, "loss_rpn_cls": 0.00767, "loss_rpn_bbox": 0.05192, "loss_cls": 0.1244, "acc": 95.29785, "loss_bbox": 0.16158, "loss_mask": 0.11658, "loss": 0.46215, "time": 1.90888}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.55728, "loss_rpn_cls": 0.00739, "loss_rpn_bbox": 0.04955, "loss_cls": 0.11919, "acc": 95.4707, "loss_bbox": 0.15742, "loss_mask": 0.11409, "loss": 0.44764, "time": 1.95132}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.794, "bbox_mAP_50": 0.931, "bbox_mAP_75": 0.895, "bbox_mAP_s": 0.372, "bbox_mAP_m": 0.798, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.931 0.895 0.372 0.798 -1.000"}
{"mode": "val", "epoch": 5, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.35638, "loss_rpn_cls": 0.01183, "loss_rpn_bbox": 0.04987, "loss_cls": 0.12086, "acc": 95.48465, "loss_bbox": 0.15872, "loss_mask": 0.11389, "loss": 0.45517, "time": 2.5919}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.13965, "loss_rpn_cls": 0.00794, "loss_rpn_bbox": 0.05358, "loss_cls": 0.12108, "acc": 95.38184, "loss_bbox": 0.16194, "loss_mask": 0.11448, "loss": 0.45901, "time": 2.53371}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.06775, "loss_rpn_cls": 0.00718, "loss_rpn_bbox": 0.05105, "loss_cls": 0.12027, "acc": 95.42188, "loss_bbox": 0.16225, "loss_mask": 0.11551, "loss": 0.45627, "time": 2.46098}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.74259, "loss_rpn_cls": 0.00832, "loss_rpn_bbox": 0.0498, "loss_cls": 0.12377, "acc": 95.38965, "loss_bbox": 0.15572, "loss_mask": 0.11157, "loss": 0.44918, "time": 2.13611}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.41593, "loss_rpn_cls": 0.00585, "loss_rpn_bbox": 0.04937, "loss_cls": 0.11246, "acc": 95.70996, "loss_bbox": 0.15121, "loss_mask": 0.11206, "loss": 0.43095, "time": 1.80585}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.813, "bbox_mAP_50": 0.94, "bbox_mAP_75": 0.902, "bbox_mAP_s": 0.578, "bbox_mAP_m": 0.816, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.813 0.940 0.902 0.578 0.816 -1.000"}
{"mode": "val", "epoch": 6, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.35168, "loss_rpn_cls": 0.00923, "loss_rpn_bbox": 0.05304, "loss_cls": 0.13222, "acc": 95.01202, "loss_bbox": 0.16198, "loss_mask": 0.11522, "loss": 0.4717, "time": 2.59217}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.1064, "loss_rpn_cls": 0.0057, "loss_rpn_bbox": 0.04915, "loss_cls": 0.11539, "acc": 95.66895, "loss_bbox": 0.15627, "loss_mask": 0.11401, "loss": 0.44052, "time": 2.49673}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.02867, "loss_rpn_cls": 0.00653, "loss_rpn_bbox": 0.04874, "loss_cls": 0.11619, "acc": 95.57812, "loss_bbox": 0.15647, "loss_mask": 0.11362, "loss": 0.44155, "time": 2.4206}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.83041, "loss_rpn_cls": 0.00744, "loss_rpn_bbox": 0.04879, "loss_cls": 0.11224, "acc": 95.78613, "loss_bbox": 0.15502, "loss_mask": 0.11353, "loss": 0.43702, "time": 2.23248}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.4544, "loss_rpn_cls": 0.00716, "loss_rpn_bbox": 0.05091, "loss_cls": 0.11713, "acc": 95.59473, "loss_bbox": 0.15479, "loss_mask": 0.1128, "loss": 0.44279, "time": 1.85132}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.808, "bbox_mAP_50": 0.94, "bbox_mAP_75": 0.902, "bbox_mAP_s": 0.505, "bbox_mAP_m": 0.812, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.808 0.940 0.902 0.505 0.812 -1.000"}
{"mode": "val", "epoch": 7, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.36374, "loss_rpn_cls": 0.01062, "loss_rpn_bbox": 0.04755, "loss_cls": 0.12312, "acc": 95.33691, "loss_bbox": 0.16041, "loss_mask": 0.11385, "loss": 0.45555, "time": 2.6015}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.2646, "loss_rpn_cls": 0.00642, "loss_rpn_bbox": 0.05064, "loss_cls": 0.10123, "acc": 96.19922, "loss_bbox": 0.15856, "loss_mask": 0.11347, "loss": 0.43031, "time": 2.66732}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.11509, "loss_rpn_cls": 0.00804, "loss_rpn_bbox": 0.05005, "loss_cls": 0.10862, "acc": 95.8877, "loss_bbox": 0.15414, "loss_mask": 0.11229, "loss": 0.43314, "time": 2.50597}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.78356, "loss_rpn_cls": 0.00683, "loss_rpn_bbox": 0.04634, "loss_cls": 0.11038, "acc": 95.78516, "loss_bbox": 0.14681, "loss_mask": 0.10845, "loss": 0.41882, "time": 2.17577}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.32814, "loss_rpn_cls": 0.00612, "loss_rpn_bbox": 0.04756, "loss_cls": 0.10228, "acc": 96.16016, "loss_bbox": 0.14885, "loss_mask": 0.10869, "loss": 0.41349, "time": 1.72231}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.819, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.485, "bbox_mAP_m": 0.823, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.819 0.946 0.914 0.485 0.823 -1.000"}
{"mode": "val", "epoch": 8, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.34362, "loss_rpn_cls": 0.00907, "loss_rpn_bbox": 0.05309, "loss_cls": 0.11365, "acc": 95.78138, "loss_bbox": 0.14999, "loss_mask": 0.1115, "loss": 0.43731, "time": 2.57182}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.21834, "loss_rpn_cls": 0.00674, "loss_rpn_bbox": 0.04639, "loss_cls": 0.1044, "acc": 95.94043, "loss_bbox": 0.14579, "loss_mask": 0.11086, "loss": 0.41419, "time": 2.61066}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 1.99305, "loss_rpn_cls": 0.00576, "loss_rpn_bbox": 0.04793, "loss_cls": 0.10073, "acc": 96.22266, "loss_bbox": 0.15036, "loss_mask": 0.10993, "loss": 0.41471, "time": 2.38349}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.96243, "loss_rpn_cls": 0.00594, "loss_rpn_bbox": 0.0475, "loss_cls": 0.10182, "acc": 96.2627, "loss_bbox": 0.14726, "loss_mask": 0.10949, "loss": 0.41201, "time": 2.35481}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.37323, "loss_rpn_cls": 0.00693, "loss_rpn_bbox": 0.04718, "loss_cls": 0.10615, "acc": 95.95801, "loss_bbox": 0.147, "loss_mask": 0.10997, "loss": 0.41722, "time": 1.76868}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.812, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.912, "bbox_mAP_s": 0.654, "bbox_mAP_m": 0.816, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.812 0.948 0.912 0.654 0.816 -1.000"}
{"mode": "val", "epoch": 9, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.35774, "loss_rpn_cls": 0.00909, "loss_rpn_bbox": 0.0471, "loss_cls": 0.11946, "acc": 95.47025, "loss_bbox": 0.15898, "loss_mask": 0.11506, "loss": 0.44969, "time": 2.58697}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.06057, "loss_rpn_cls": 0.006, "loss_rpn_bbox": 0.04878, "loss_cls": 0.10179, "acc": 96.11621, "loss_bbox": 0.15081, "loss_mask": 0.10946, "loss": 0.41684, "time": 2.45309}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.10831, "loss_rpn_cls": 0.00665, "loss_rpn_bbox": 0.04753, "loss_cls": 0.10192, "acc": 96.18066, "loss_bbox": 0.14718, "loss_mask": 0.10903, "loss": 0.4123, "time": 2.50905}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 2.01382, "loss_rpn_cls": 0.00618, "loss_rpn_bbox": 0.0451, "loss_cls": 0.10383, "acc": 96.03418, "loss_bbox": 0.14608, "loss_mask": 0.10935, "loss": 0.41053, "time": 2.40648}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.41841, "loss_rpn_cls": 0.00532, "loss_rpn_bbox": 0.0467, "loss_cls": 0.09731, "acc": 96.28223, "loss_bbox": 0.14687, "loss_mask": 0.11246, "loss": 0.40867, "time": 1.81188}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.817, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.913, "bbox_mAP_s": 0.53, "bbox_mAP_m": 0.821, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.817 0.946 0.913 0.530 0.821 -1.000"}
{"mode": "val", "epoch": 10, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.3337, "loss_rpn_cls": 0.0098, "loss_rpn_bbox": 0.04754, "loss_cls": 0.11886, "acc": 95.51219, "loss_bbox": 0.15257, "loss_mask": 0.11356, "loss": 0.44233, "time": 2.56536}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.15898, "loss_rpn_cls": 0.00583, "loss_rpn_bbox": 0.04722, "loss_cls": 0.1022, "acc": 96.08691, "loss_bbox": 0.14643, "loss_mask": 0.11032, "loss": 0.412, "time": 2.55541}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.00306, "loss_rpn_cls": 0.00511, "loss_rpn_bbox": 0.0441, "loss_cls": 0.09922, "acc": 96.27344, "loss_bbox": 0.14217, "loss_mask": 0.10761, "loss": 0.39821, "time": 2.39276}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 2.15403, "loss_rpn_cls": 0.00654, "loss_rpn_bbox": 0.0453, "loss_cls": 0.1, "acc": 96.18555, "loss_bbox": 0.14838, "loss_mask": 0.11333, "loss": 0.41356, "time": 2.55041}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.35978, "loss_rpn_cls": 0.00707, "loss_rpn_bbox": 0.0451, "loss_cls": 0.10392, "acc": 96.05078, "loss_bbox": 0.14979, "loss_mask": 0.10842, "loss": 0.4143, "time": 1.75151}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.815, "bbox_mAP_50": 0.942, "bbox_mAP_75": 0.913, "bbox_mAP_s": 0.606, "bbox_mAP_m": 0.818, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.815 0.942 0.913 0.606 0.818 -1.000"}
{"mode": "val", "epoch": 11, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.32785, "loss_rpn_cls": 0.0119, "loss_rpn_bbox": 0.04549, "loss_cls": 0.11605, "acc": 95.64428, "loss_bbox": 0.15097, "loss_mask": 0.11285, "loss": 0.43725, "time": 2.56414}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.07847, "loss_rpn_cls": 0.00461, "loss_rpn_bbox": 0.04296, "loss_cls": 0.09892, "acc": 96.24902, "loss_bbox": 0.14137, "loss_mask": 0.10834, "loss": 0.39619, "time": 2.475}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.11471, "loss_rpn_cls": 0.00548, "loss_rpn_bbox": 0.04555, "loss_cls": 0.09173, "acc": 96.60938, "loss_bbox": 0.14377, "loss_mask": 0.10981, "loss": 0.39634, "time": 2.50892}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 1.98625, "loss_rpn_cls": 0.00487, "loss_rpn_bbox": 0.04375, "loss_cls": 0.09708, "acc": 96.29883, "loss_bbox": 0.13965, "loss_mask": 0.10793, "loss": 0.39328, "time": 2.37879}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.66326, "loss_rpn_cls": 0.00609, "loss_rpn_bbox": 0.04418, "loss_cls": 0.09712, "acc": 96.32812, "loss_bbox": 0.13993, "loss_mask": 0.1081, "loss": 0.39543, "time": 2.06968}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.823, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.514, "bbox_mAP_m": 0.826, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.823 0.946 0.914 0.514 0.826 -1.000"}
{"mode": "val", "epoch": 12, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.34778, "loss_rpn_cls": 0.00826, "loss_rpn_bbox": 0.04724, "loss_cls": 0.11016, "acc": 95.84147, "loss_bbox": 0.1504, "loss_mask": 0.10962, "loss": 0.42568, "time": 2.58435}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.17017, "loss_rpn_cls": 0.00576, "loss_rpn_bbox": 0.04368, "loss_cls": 0.09294, "acc": 96.5293, "loss_bbox": 0.14281, "loss_mask": 0.10861, "loss": 0.39379, "time": 2.57067}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.14156, "loss_rpn_cls": 0.00599, "loss_rpn_bbox": 0.04403, "loss_cls": 0.0967, "acc": 96.30859, "loss_bbox": 0.1423, "loss_mask": 0.10703, "loss": 0.39605, "time": 2.54145}
{"mode": "train", "epoch": 13, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 2.04891, "loss_rpn_cls": 0.00578, "loss_rpn_bbox": 0.04437, "loss_cls": 0.09405, "acc": 96.45605, "loss_bbox": 0.14289, "loss_mask": 0.10906, "loss": 0.39614, "time": 2.43961}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.68825, "loss_rpn_cls": 0.00595, "loss_rpn_bbox": 0.04397, "loss_cls": 0.09423, "acc": 96.44531, "loss_bbox": 0.1382, "loss_mask": 0.10842, "loss": 0.39078, "time": 2.09272}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.823, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.917, "bbox_mAP_s": 0.583, "bbox_mAP_m": 0.827, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.823 0.948 0.917 0.583 0.827 -1.000"}
{"mode": "val", "epoch": 13, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.32203, "loss_rpn_cls": 0.00888, "loss_rpn_bbox": 0.04871, "loss_cls": 0.10798, "acc": 95.90157, "loss_bbox": 0.15061, "loss_mask": 0.11197, "loss": 0.42815, "time": 2.55338}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.15839, "loss_rpn_cls": 0.00655, "loss_rpn_bbox": 0.04508, "loss_cls": 0.09296, "acc": 96.43457, "loss_bbox": 0.14389, "loss_mask": 0.10839, "loss": 0.39687, "time": 2.55488}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.02923, "loss_rpn_cls": 0.00513, "loss_rpn_bbox": 0.04435, "loss_cls": 0.10066, "acc": 96.24902, "loss_bbox": 0.14415, "loss_mask": 0.11045, "loss": 0.40473, "time": 2.42303}
{"mode": "train", "epoch": 14, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 2.12061, "loss_rpn_cls": 0.00628, "loss_rpn_bbox": 0.04486, "loss_cls": 0.0997, "acc": 96.2168, "loss_bbox": 0.14175, "loss_mask": 0.10802, "loss": 0.40061, "time": 2.51146}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.63931, "loss_rpn_cls": 0.00574, "loss_rpn_bbox": 0.04332, "loss_cls": 0.10346, "acc": 96.09961, "loss_bbox": 0.14848, "loss_mask": 0.11066, "loss": 0.41166, "time": 2.03642}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.828, "bbox_mAP_50": 0.949, "bbox_mAP_75": 0.916, "bbox_mAP_s": 0.581, "bbox_mAP_m": 0.832, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.828 0.949 0.916 0.581 0.832 -1.000"}
{"mode": "val", "epoch": 14, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.33308, "loss_rpn_cls": 0.00917, "loss_rpn_bbox": 0.04268, "loss_cls": 0.10305, "acc": 96.07434, "loss_bbox": 0.14512, "loss_mask": 0.11176, "loss": 0.41179, "time": 2.56563}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 4015, "data_time": 2.06895, "loss_rpn_cls": 0.00521, "loss_rpn_bbox": 0.04201, "loss_cls": 0.10014, "acc": 96.24805, "loss_bbox": 0.13946, "loss_mask": 0.10673, "loss": 0.39356, "time": 2.46425}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 4015, "data_time": 2.03524, "loss_rpn_cls": 0.00564, "loss_rpn_bbox": 0.0475, "loss_cls": 0.09409, "acc": 96.47559, "loss_bbox": 0.1468, "loss_mask": 0.11268, "loss": 0.4067, "time": 2.4274}
{"mode": "train", "epoch": 15, "iter": 150, "lr": 0.01, "memory": 4015, "data_time": 2.20218, "loss_rpn_cls": 0.00531, "loss_rpn_bbox": 0.04256, "loss_cls": 0.08598, "acc": 96.76367, "loss_bbox": 0.13938, "loss_mask": 0.10875, "loss": 0.38198, "time": 2.60448}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.01, "memory": 4015, "data_time": 1.65789, "loss_rpn_cls": 0.00581, "loss_rpn_bbox": 0.04218, "loss_cls": 0.09586, "acc": 96.45703, "loss_bbox": 0.13811, "loss_mask": 0.10659, "loss": 0.38854, "time": 2.05307}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.816, "bbox_mAP_50": 0.942, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.557, "bbox_mAP_m": 0.819, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.816 0.942 0.910 0.557 0.819 -1.000"}
{"mode": "val", "epoch": 15, "iter": 78, "lr": 0.01, "memory": 4015, "data_time": 2.277, "loss_rpn_cls": 0.00898, "loss_rpn_bbox": 0.04552, "loss_cls": 0.10956, "acc": 95.91284, "loss_bbox": 0.14584, "loss_mask": 0.11108, "loss": 0.42097, "time": 2.50818}
