{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=1000,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.5),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                ],\n                p=0.5)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.5),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                        ],\n                        p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/mask_rcnn_r101_fpn_2x_coco_bbox_mAP-0.408__segm_mAP-0.366_20200505_071027-14b391c7.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.5)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/MaskRCNN_R101_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2033987177, "exp_name": "mask_rcnn_r101_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 10381, "data_time": 2.41215, "loss_rpn_cls": 0.4407, "loss_rpn_bbox": 0.16051, "loss_cls": 0.71567, "acc": 76.06621, "loss_bbox": 0.63416, "loss_mask": 0.80772, "loss": 2.75876, "time": 2.93572}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 10381, "data_time": 2.3267, "loss_rpn_cls": 0.03167, "loss_rpn_bbox": 0.09576, "loss_cls": 0.43444, "acc": 83.40234, "loss_bbox": 0.45777, "loss_mask": 0.22269, "loss": 1.24233, "time": 2.83873}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 10381, "data_time": 2.49966, "loss_rpn_cls": 0.01556, "loss_rpn_bbox": 0.07, "loss_cls": 0.2686, "acc": 90.30938, "loss_bbox": 0.23518, "loss_mask": 0.15076, "loss": 0.7401, "time": 3.01542}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00355, "bbox_mAP": 0.71, "bbox_mAP_50": 0.882, "bbox_mAP_75": 0.83, "bbox_mAP_s": 0.422, "bbox_mAP_m": 0.715, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.710 0.882 0.830 0.422 0.715 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.00355, "memory": 10381, "data_time": 2.15022, "loss_rpn_cls": 0.01301, "loss_rpn_bbox": 0.07186, "loss_cls": 0.23373, "acc": 91.36533, "loss_bbox": 0.2223, "loss_mask": 0.13899, "loss": 0.67989, "time": 2.56149}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00455, "memory": 10381, "data_time": 2.09249, "loss_rpn_cls": 0.01008, "loss_rpn_bbox": 0.06633, "loss_cls": 0.20628, "acc": 92.43516, "loss_bbox": 0.20472, "loss_mask": 0.1323, "loss": 0.61971, "time": 2.61235}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00554, "memory": 10381, "data_time": 2.5432, "loss_rpn_cls": 0.00989, "loss_rpn_bbox": 0.0654, "loss_cls": 0.18872, "acc": 92.99688, "loss_bbox": 0.20401, "loss_mask": 0.13305, "loss": 0.60107, "time": 3.05122}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00654, "memory": 10381, "data_time": 2.58853, "loss_rpn_cls": 0.00988, "loss_rpn_bbox": 0.06703, "loss_cls": 0.18077, "acc": 93.37344, "loss_bbox": 0.206, "loss_mask": 0.13395, "loss": 0.59762, "time": 3.11323}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.0071, "bbox_mAP": 0.755, "bbox_mAP_50": 0.905, "bbox_mAP_75": 0.861, "bbox_mAP_s": 0.42, "bbox_mAP_m": 0.76, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.755 0.905 0.861 0.420 0.760 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.0071, "memory": 10381, "data_time": 2.32656, "loss_rpn_cls": 0.01142, "loss_rpn_bbox": 0.06234, "loss_cls": 0.17327, "acc": 93.67746, "loss_bbox": 0.18591, "loss_mask": 0.13121, "loss": 0.56415, "time": 2.73947}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0081, "memory": 10381, "data_time": 2.33778, "loss_rpn_cls": 0.01014, "loss_rpn_bbox": 0.06575, "loss_cls": 0.15607, "acc": 94.26484, "loss_bbox": 0.17987, "loss_mask": 0.12541, "loss": 0.53724, "time": 2.8556}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0091, "memory": 10381, "data_time": 2.39319, "loss_rpn_cls": 0.00909, "loss_rpn_bbox": 0.06179, "loss_cls": 0.16725, "acc": 93.75469, "loss_bbox": 0.1886, "loss_mask": 0.12406, "loss": 0.5508, "time": 2.90561}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.62464, "loss_rpn_cls": 0.00823, "loss_rpn_bbox": 0.06063, "loss_cls": 0.15248, "acc": 94.35703, "loss_bbox": 0.18561, "loss_mask": 0.12505, "loss": 0.532, "time": 3.13919}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.01, "bbox_mAP": 0.773, "bbox_mAP_50": 0.917, "bbox_mAP_75": 0.883, "bbox_mAP_s": 0.496, "bbox_mAP_m": 0.777, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.773 0.917 0.883 0.496 0.777 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.36174, "loss_rpn_cls": 0.01051, "loss_rpn_bbox": 0.05982, "loss_cls": 0.16705, "acc": 93.81696, "loss_bbox": 0.17879, "loss_mask": 0.12337, "loss": 0.53954, "time": 2.77437}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.02215, "loss_rpn_cls": 0.00888, "loss_rpn_bbox": 0.0594, "loss_cls": 0.14546, "acc": 94.50703, "loss_bbox": 0.17626, "loss_mask": 0.12249, "loss": 0.51249, "time": 2.5374}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.52533, "loss_rpn_cls": 0.00917, "loss_rpn_bbox": 0.05961, "loss_cls": 0.1472, "acc": 94.50625, "loss_bbox": 0.17496, "loss_mask": 0.11964, "loss": 0.51058, "time": 3.04297}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.57176, "loss_rpn_cls": 0.00855, "loss_rpn_bbox": 0.05744, "loss_cls": 0.14186, "acc": 94.68828, "loss_bbox": 0.17398, "loss_mask": 0.12205, "loss": 0.50388, "time": 3.09422}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.01, "bbox_mAP": 0.775, "bbox_mAP_50": 0.933, "bbox_mAP_75": 0.891, "bbox_mAP_s": 0.572, "bbox_mAP_m": 0.779, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.775 0.933 0.891 0.572 0.779 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.38888, "loss_rpn_cls": 0.01098, "loss_rpn_bbox": 0.07058, "loss_cls": 0.14367, "acc": 94.68378, "loss_bbox": 0.17706, "loss_mask": 0.12095, "loss": 0.52324, "time": 2.79934}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.08039, "loss_rpn_cls": 0.0087, "loss_rpn_bbox": 0.05816, "loss_cls": 0.13378, "acc": 95.05, "loss_bbox": 0.17134, "loss_mask": 0.11683, "loss": 0.48882, "time": 2.60014}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.60567, "loss_rpn_cls": 0.00709, "loss_rpn_bbox": 0.05395, "loss_cls": 0.13239, "acc": 95.00938, "loss_bbox": 0.16475, "loss_mask": 0.1197, "loss": 0.47788, "time": 3.12194}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.54611, "loss_rpn_cls": 0.00873, "loss_rpn_bbox": 0.05784, "loss_cls": 0.13414, "acc": 94.97031, "loss_bbox": 0.16893, "loss_mask": 0.11841, "loss": 0.48806, "time": 3.05994}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.797, "bbox_mAP_50": 0.936, "bbox_mAP_75": 0.898, "bbox_mAP_s": 0.454, "bbox_mAP_m": 0.801, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.936 0.898 0.454 0.801 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.30357, "loss_rpn_cls": 0.00976, "loss_rpn_bbox": 0.0559, "loss_cls": 0.14303, "acc": 94.75322, "loss_bbox": 0.17255, "loss_mask": 0.12129, "loss": 0.50254, "time": 2.72105}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.25372, "loss_rpn_cls": 0.0077, "loss_rpn_bbox": 0.05121, "loss_cls": 0.12776, "acc": 95.1625, "loss_bbox": 0.16334, "loss_mask": 0.1161, "loss": 0.46611, "time": 2.7671}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.67712, "loss_rpn_cls": 0.00723, "loss_rpn_bbox": 0.05305, "loss_cls": 0.12404, "acc": 95.37969, "loss_bbox": 0.16265, "loss_mask": 0.1165, "loss": 0.46347, "time": 3.19722}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.49248, "loss_rpn_cls": 0.00676, "loss_rpn_bbox": 0.05288, "loss_cls": 0.121, "acc": 95.36328, "loss_bbox": 0.15909, "loss_mask": 0.11643, "loss": 0.45615, "time": 3.00856}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.807, "bbox_mAP_50": 0.943, "bbox_mAP_75": 0.906, "bbox_mAP_s": 0.47, "bbox_mAP_m": 0.811, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.807 0.943 0.906 0.470 0.811 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.24284, "loss_rpn_cls": 0.00891, "loss_rpn_bbox": 0.05388, "loss_cls": 0.13358, "acc": 94.9349, "loss_bbox": 0.16637, "loss_mask": 0.11763, "loss": 0.48038, "time": 2.65843}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.47804, "loss_rpn_cls": 0.00686, "loss_rpn_bbox": 0.05457, "loss_cls": 0.12158, "acc": 95.4375, "loss_bbox": 0.16292, "loss_mask": 0.1176, "loss": 0.46353, "time": 3.00092}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.499, "loss_rpn_cls": 0.00681, "loss_rpn_bbox": 0.05006, "loss_cls": 0.12257, "acc": 95.33828, "loss_bbox": 0.15809, "loss_mask": 0.11473, "loss": 0.45226, "time": 3.0097}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.6514, "loss_rpn_cls": 0.00703, "loss_rpn_bbox": 0.05133, "loss_cls": 0.11594, "acc": 95.67266, "loss_bbox": 0.15291, "loss_mask": 0.11511, "loss": 0.44232, "time": 3.17239}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.805, "bbox_mAP_50": 0.941, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.542, "bbox_mAP_m": 0.808, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.805 0.941 0.910 0.542 0.808 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.19852, "loss_rpn_cls": 0.00829, "loss_rpn_bbox": 0.05226, "loss_cls": 0.13435, "acc": 94.84003, "loss_bbox": 0.16655, "loss_mask": 0.11909, "loss": 0.48054, "time": 2.61512}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.74156, "loss_rpn_cls": 0.00652, "loss_rpn_bbox": 0.04955, "loss_cls": 0.10803, "acc": 95.90156, "loss_bbox": 0.15322, "loss_mask": 0.11501, "loss": 0.43233, "time": 3.26307}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.63532, "loss_rpn_cls": 0.00674, "loss_rpn_bbox": 0.04961, "loss_cls": 0.10817, "acc": 95.89531, "loss_bbox": 0.15048, "loss_mask": 0.11283, "loss": 0.42782, "time": 3.1536}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.42194, "loss_rpn_cls": 0.00546, "loss_rpn_bbox": 0.04913, "loss_cls": 0.12043, "acc": 95.42578, "loss_bbox": 0.15795, "loss_mask": 0.11374, "loss": 0.4467, "time": 2.93065}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.806, "bbox_mAP_50": 0.944, "bbox_mAP_75": 0.906, "bbox_mAP_s": 0.541, "bbox_mAP_m": 0.808, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.806 0.944 0.906 0.541 0.808 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.13257, "loss_rpn_cls": 0.01006, "loss_rpn_bbox": 0.05568, "loss_cls": 0.1365, "acc": 94.84685, "loss_bbox": 0.16308, "loss_mask": 0.11729, "loss": 0.48262, "time": 2.54727}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.67597, "loss_rpn_cls": 0.00604, "loss_rpn_bbox": 0.0507, "loss_cls": 0.10787, "acc": 95.85703, "loss_bbox": 0.14842, "loss_mask": 0.11256, "loss": 0.4256, "time": 3.18726}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.68142, "loss_rpn_cls": 0.00708, "loss_rpn_bbox": 0.05203, "loss_cls": 0.1147, "acc": 95.70547, "loss_bbox": 0.15124, "loss_mask": 0.11335, "loss": 0.4384, "time": 3.19748}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.46063, "loss_rpn_cls": 0.00515, "loss_rpn_bbox": 0.04569, "loss_cls": 0.10664, "acc": 95.93281, "loss_bbox": 0.14886, "loss_mask": 0.1109, "loss": 0.41722, "time": 2.97547}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.801, "bbox_mAP_50": 0.938, "bbox_mAP_75": 0.9, "bbox_mAP_s": 0.544, "bbox_mAP_m": 0.804, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.801 0.938 0.900 0.544 0.804 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.10902, "loss_rpn_cls": 0.01033, "loss_rpn_bbox": 0.0508, "loss_cls": 0.13003, "acc": 95.17113, "loss_bbox": 0.16457, "loss_mask": 0.11598, "loss": 0.47172, "time": 2.52759}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.83186, "loss_rpn_cls": 0.00582, "loss_rpn_bbox": 0.04835, "loss_cls": 0.10521, "acc": 96.03125, "loss_bbox": 0.14604, "loss_mask": 0.1119, "loss": 0.41731, "time": 3.35033}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.48172, "loss_rpn_cls": 0.00606, "loss_rpn_bbox": 0.0475, "loss_cls": 0.10658, "acc": 95.89531, "loss_bbox": 0.14624, "loss_mask": 0.10916, "loss": 0.41553, "time": 2.99235}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.45636, "loss_rpn_cls": 0.00629, "loss_rpn_bbox": 0.04989, "loss_cls": 0.09784, "acc": 96.2875, "loss_bbox": 0.14731, "loss_mask": 0.11095, "loss": 0.41229, "time": 2.97461}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.815, "bbox_mAP_50": 0.951, "bbox_mAP_75": 0.915, "bbox_mAP_s": 0.514, "bbox_mAP_m": 0.818, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.815 0.951 0.915 0.514 0.818 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.16944, "loss_rpn_cls": 0.00978, "loss_rpn_bbox": 0.05379, "loss_cls": 0.12682, "acc": 95.22011, "loss_bbox": 0.15255, "loss_mask": 0.11235, "loss": 0.45529, "time": 2.5842}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.66562, "loss_rpn_cls": 0.00607, "loss_rpn_bbox": 0.04714, "loss_cls": 0.10111, "acc": 96.20547, "loss_bbox": 0.14487, "loss_mask": 0.11, "loss": 0.40919, "time": 3.18535}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.5159, "loss_rpn_cls": 0.00516, "loss_rpn_bbox": 0.0473, "loss_cls": 0.11466, "acc": 95.66094, "loss_bbox": 0.14977, "loss_mask": 0.11242, "loss": 0.42931, "time": 3.03386}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.53727, "loss_rpn_cls": 0.0053, "loss_rpn_bbox": 0.04564, "loss_cls": 0.10529, "acc": 95.99922, "loss_bbox": 0.14857, "loss_mask": 0.11, "loss": 0.41479, "time": 3.05391}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.809, "bbox_mAP_50": 0.938, "bbox_mAP_75": 0.906, "bbox_mAP_s": 0.377, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.809 0.938 0.906 0.377 0.813 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.12196, "loss_rpn_cls": 0.01197, "loss_rpn_bbox": 0.05141, "loss_cls": 0.12262, "acc": 95.45263, "loss_bbox": 0.15427, "loss_mask": 0.11199, "loss": 0.45225, "time": 2.53782}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.58615, "loss_rpn_cls": 0.00517, "loss_rpn_bbox": 0.04661, "loss_cls": 0.10304, "acc": 95.99297, "loss_bbox": 0.14314, "loss_mask": 0.10868, "loss": 0.40664, "time": 3.10674}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.63886, "loss_rpn_cls": 0.00553, "loss_rpn_bbox": 0.04494, "loss_cls": 0.09737, "acc": 96.30547, "loss_bbox": 0.14282, "loss_mask": 0.11023, "loss": 0.40089, "time": 3.16175}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.54399, "loss_rpn_cls": 0.00567, "loss_rpn_bbox": 0.04531, "loss_cls": 0.10388, "acc": 96.04609, "loss_bbox": 0.14779, "loss_mask": 0.11224, "loss": 0.4149, "time": 3.06102}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.815, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.514, "bbox_mAP_m": 0.819, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.815 0.948 0.914 0.514 0.819 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.18529, "loss_rpn_cls": 0.00994, "loss_rpn_bbox": 0.05228, "loss_cls": 0.12101, "acc": 95.48673, "loss_bbox": 0.15277, "loss_mask": 0.114, "loss": 0.45, "time": 2.59872}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.62877, "loss_rpn_cls": 0.005, "loss_rpn_bbox": 0.04393, "loss_cls": 0.09626, "acc": 96.37812, "loss_bbox": 0.14089, "loss_mask": 0.10948, "loss": 0.39557, "time": 3.14438}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.69786, "loss_rpn_cls": 0.00576, "loss_rpn_bbox": 0.04602, "loss_cls": 0.09866, "acc": 96.33125, "loss_bbox": 0.14341, "loss_mask": 0.10925, "loss": 0.4031, "time": 3.21659}
{"mode": "train", "epoch": 13, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.60021, "loss_rpn_cls": 0.00578, "loss_rpn_bbox": 0.04565, "loss_cls": 0.09648, "acc": 96.29453, "loss_bbox": 0.14454, "loss_mask": 0.1118, "loss": 0.40424, "time": 3.10981}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.815, "bbox_mAP_50": 0.949, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.503, "bbox_mAP_m": 0.818, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.815 0.949 0.914 0.503 0.818 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.21787, "loss_rpn_cls": 0.00896, "loss_rpn_bbox": 0.04648, "loss_cls": 0.11872, "acc": 95.46937, "loss_bbox": 0.15151, "loss_mask": 0.11448, "loss": 0.44015, "time": 2.63207}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.63766, "loss_rpn_cls": 0.005, "loss_rpn_bbox": 0.04529, "loss_cls": 0.09418, "acc": 96.52344, "loss_bbox": 0.14365, "loss_mask": 0.10972, "loss": 0.39784, "time": 3.15821}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.54137, "loss_rpn_cls": 0.00512, "loss_rpn_bbox": 0.04482, "loss_cls": 0.10194, "acc": 96.17969, "loss_bbox": 0.14235, "loss_mask": 0.10744, "loss": 0.40166, "time": 3.06222}
{"mode": "train", "epoch": 14, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.62254, "loss_rpn_cls": 0.00599, "loss_rpn_bbox": 0.04961, "loss_cls": 0.09552, "acc": 96.32734, "loss_bbox": 0.14677, "loss_mask": 0.11181, "loss": 0.40971, "time": 3.13793}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.813, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.487, "bbox_mAP_m": 0.816, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.813 0.948 0.914 0.487 0.816 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.25534, "loss_rpn_cls": 0.01073, "loss_rpn_bbox": 0.04962, "loss_cls": 0.11337, "acc": 95.77133, "loss_bbox": 0.14978, "loss_mask": 0.11053, "loss": 0.43404, "time": 2.66975}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 10381, "data_time": 2.62412, "loss_rpn_cls": 0.00455, "loss_rpn_bbox": 0.04515, "loss_cls": 0.0905, "acc": 96.68359, "loss_bbox": 0.13823, "loss_mask": 0.10666, "loss": 0.38509, "time": 3.14024}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 10381, "data_time": 2.51583, "loss_rpn_cls": 0.00543, "loss_rpn_bbox": 0.0451, "loss_cls": 0.09623, "acc": 96.35312, "loss_bbox": 0.14316, "loss_mask": 0.10911, "loss": 0.39902, "time": 3.01714}
{"mode": "train", "epoch": 15, "iter": 150, "lr": 0.01, "memory": 10381, "data_time": 2.68368, "loss_rpn_cls": 0.00697, "loss_rpn_bbox": 0.04558, "loss_cls": 0.08889, "acc": 96.62969, "loss_bbox": 0.13981, "loss_mask": 0.10913, "loss": 0.39038, "time": 3.20557}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.813, "bbox_mAP_50": 0.95, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.507, "bbox_mAP_m": 0.816, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.813 0.950 0.914 0.507 0.816 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.01, "memory": 10381, "data_time": 2.32913, "loss_rpn_cls": 0.00933, "loss_rpn_bbox": 0.04585, "loss_cls": 0.11474, "acc": 95.78993, "loss_bbox": 0.15378, "loss_mask": 0.11606, "loss": 0.43977, "time": 2.7408}
