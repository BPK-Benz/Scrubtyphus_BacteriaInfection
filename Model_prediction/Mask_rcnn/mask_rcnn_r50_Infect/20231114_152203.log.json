{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.5),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                ],\n                p=0.5)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.5),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                        ],\n                        p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.5)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/MaskRCNN_R50_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 887641017, "exp_name": "mask_rcnn_r50_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 11211, "data_time": 3.75221, "loss_rpn_cls": 0.37854, "loss_rpn_bbox": 0.17038, "loss_cls": 0.88396, "acc": 69.0235, "loss_bbox": 0.68794, "loss_mask": 1.73112, "loss": 3.85193, "time": 4.47422}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 11211, "data_time": 4.07949, "loss_rpn_cls": 0.05506, "loss_rpn_bbox": 0.11667, "loss_cls": 0.58821, "acc": 78.04312, "loss_bbox": 0.75338, "loss_mask": 0.39544, "loss": 1.90877, "time": 4.78255}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00221, "bbox_mAP": 0.447, "bbox_mAP_50": 0.702, "bbox_mAP_75": 0.515, "bbox_mAP_s": 0.229, "bbox_mAP_m": 0.454, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.447 0.702 0.515 0.229 0.454 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.00221, "memory": 11211, "data_time": 4.0524, "loss_rpn_cls": 0.03163, "loss_rpn_bbox": 0.1073, "loss_cls": 0.37235, "acc": 85.89305, "loss_bbox": 0.46697, "loss_mask": 0.22213, "loss": 1.20037, "time": 4.61919}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00321, "memory": 11212, "data_time": 4.28837, "loss_rpn_cls": 0.02043, "loss_rpn_bbox": 0.08522, "loss_cls": 0.30996, "acc": 88.56689, "loss_bbox": 0.30267, "loss_mask": 0.17999, "loss": 0.89827, "time": 4.99775}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00421, "memory": 11212, "data_time": 3.96066, "loss_rpn_cls": 0.01233, "loss_rpn_bbox": 0.06415, "loss_cls": 0.2264, "acc": 91.68994, "loss_bbox": 0.2018, "loss_mask": 0.14095, "loss": 0.64562, "time": 4.66726}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.719, "bbox_mAP_50": 0.883, "bbox_mAP_75": 0.836, "bbox_mAP_s": 0.424, "bbox_mAP_m": 0.724, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.719 0.883 0.836 0.424 0.724 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.00443, "memory": 11212, "data_time": 4.38807, "loss_rpn_cls": 0.01339, "loss_rpn_bbox": 0.06652, "loss_cls": 0.20872, "acc": 92.11927, "loss_bbox": 0.20608, "loss_mask": 0.13535, "loss": 0.63006, "time": 4.96219}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00542, "memory": 11212, "data_time": 3.95822, "loss_rpn_cls": 0.00901, "loss_rpn_bbox": 0.06198, "loss_cls": 0.19282, "acc": 92.80127, "loss_bbox": 0.19167, "loss_mask": 0.13139, "loss": 0.58686, "time": 4.66328}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00642, "memory": 11212, "data_time": 4.03764, "loss_rpn_cls": 0.01047, "loss_rpn_bbox": 0.0605, "loss_cls": 0.17015, "acc": 93.6167, "loss_bbox": 0.18982, "loss_mask": 0.13166, "loss": 0.5626, "time": 4.75822}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.00664, "bbox_mAP": 0.781, "bbox_mAP_50": 0.917, "bbox_mAP_75": 0.879, "bbox_mAP_s": 0.439, "bbox_mAP_m": 0.785, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.781 0.917 0.879 0.439 0.785 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.00664, "memory": 11212, "data_time": 4.46528, "loss_rpn_cls": 0.01109, "loss_rpn_bbox": 0.0652, "loss_cls": 0.17042, "acc": 93.64358, "loss_bbox": 0.17741, "loss_mask": 0.12742, "loss": 0.55154, "time": 5.03867}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00764, "memory": 11212, "data_time": 4.03136, "loss_rpn_cls": 0.00855, "loss_rpn_bbox": 0.06005, "loss_cls": 0.16271, "acc": 93.83008, "loss_bbox": 0.17533, "loss_mask": 0.12354, "loss": 0.53017, "time": 4.73839}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00864, "memory": 11212, "data_time": 3.42585, "loss_rpn_cls": 0.00942, "loss_rpn_bbox": 0.05932, "loss_cls": 0.15318, "acc": 94.21094, "loss_bbox": 0.17424, "loss_mask": 0.12305, "loss": 0.51921, "time": 4.14708}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.784, "bbox_mAP_50": 0.924, "bbox_mAP_75": 0.885, "bbox_mAP_s": 0.332, "bbox_mAP_m": 0.788, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.784 0.924 0.885 0.332 0.788 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.00886, "memory": 11212, "data_time": 4.53013, "loss_rpn_cls": 0.00975, "loss_rpn_bbox": 0.05744, "loss_cls": 0.15285, "acc": 94.33469, "loss_bbox": 0.17597, "loss_mask": 0.12404, "loss": 0.52005, "time": 5.09909}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00986, "memory": 11212, "data_time": 4.04672, "loss_rpn_cls": 0.00878, "loss_rpn_bbox": 0.06115, "loss_cls": 0.14627, "acc": 94.51855, "loss_bbox": 0.17399, "loss_mask": 0.12082, "loss": 0.51101, "time": 4.74981}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 3.58456, "loss_rpn_cls": 0.00872, "loss_rpn_bbox": 0.06098, "loss_cls": 0.13702, "acc": 94.78467, "loss_bbox": 0.16816, "loss_mask": 0.11796, "loss": 0.49283, "time": 4.29451}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.79, "bbox_mAP_50": 0.929, "bbox_mAP_75": 0.89, "bbox_mAP_s": 0.425, "bbox_mAP_m": 0.794, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.790 0.929 0.890 0.425 0.794 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.32702, "loss_rpn_cls": 0.01207, "loss_rpn_bbox": 0.06611, "loss_cls": 0.15642, "acc": 94.08992, "loss_bbox": 0.1707, "loss_mask": 0.12103, "loss": 0.52632, "time": 3.90549}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.03921, "loss_rpn_cls": 0.00845, "loss_rpn_bbox": 0.05728, "loss_cls": 0.13696, "acc": 94.86279, "loss_bbox": 0.17297, "loss_mask": 0.12014, "loss": 0.49581, "time": 3.75759}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 2.92255, "loss_rpn_cls": 0.00807, "loss_rpn_bbox": 0.05522, "loss_cls": 0.12903, "acc": 95.06201, "loss_bbox": 0.16386, "loss_mask": 0.11958, "loss": 0.47577, "time": 3.62998}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.794, "bbox_mAP_50": 0.933, "bbox_mAP_75": 0.893, "bbox_mAP_s": 0.419, "bbox_mAP_m": 0.797, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.933 0.893 0.419 0.797 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.32803, "loss_rpn_cls": 0.00932, "loss_rpn_bbox": 0.05498, "loss_cls": 0.13332, "acc": 94.96319, "loss_bbox": 0.16005, "loss_mask": 0.11965, "loss": 0.47732, "time": 3.9047}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.07863, "loss_rpn_cls": 0.00739, "loss_rpn_bbox": 0.05289, "loss_cls": 0.11875, "acc": 95.47021, "loss_bbox": 0.15675, "loss_mask": 0.11577, "loss": 0.45154, "time": 3.78992}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 2.94513, "loss_rpn_cls": 0.00735, "loss_rpn_bbox": 0.04965, "loss_cls": 0.12242, "acc": 95.31738, "loss_bbox": 0.15918, "loss_mask": 0.11832, "loss": 0.45692, "time": 3.65183}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.783, "bbox_mAP_50": 0.925, "bbox_mAP_75": 0.89, "bbox_mAP_s": 0.365, "bbox_mAP_m": 0.787, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.783 0.925 0.890 0.365 0.787 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.35873, "loss_rpn_cls": 0.00991, "loss_rpn_bbox": 0.05571, "loss_cls": 0.13394, "acc": 94.9225, "loss_bbox": 0.1632, "loss_mask": 0.11882, "loss": 0.48159, "time": 3.94244}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.03546, "loss_rpn_cls": 0.00721, "loss_rpn_bbox": 0.05182, "loss_cls": 0.12005, "acc": 95.39941, "loss_bbox": 0.1573, "loss_mask": 0.11632, "loss": 0.4527, "time": 3.73932}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 2.96521, "loss_rpn_cls": 0.00798, "loss_rpn_bbox": 0.05282, "loss_cls": 0.11664, "acc": 95.56055, "loss_bbox": 0.15472, "loss_mask": 0.11297, "loss": 0.44513, "time": 3.67516}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.804, "bbox_mAP_50": 0.94, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.462, "bbox_mAP_m": 0.808, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.804 0.940 0.905 0.462 0.808 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.32634, "loss_rpn_cls": 0.00875, "loss_rpn_bbox": 0.04889, "loss_cls": 0.12206, "acc": 95.38199, "loss_bbox": 0.15673, "loss_mask": 0.1186, "loss": 0.45503, "time": 3.91022}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.16416, "loss_rpn_cls": 0.00734, "loss_rpn_bbox": 0.05134, "loss_cls": 0.11036, "acc": 95.83398, "loss_bbox": 0.15199, "loss_mask": 0.11292, "loss": 0.43396, "time": 3.87487}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 2.90818, "loss_rpn_cls": 0.00669, "loss_rpn_bbox": 0.04848, "loss_cls": 0.11181, "acc": 95.75391, "loss_bbox": 0.1516, "loss_mask": 0.11494, "loss": 0.43351, "time": 3.6107}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.8, "bbox_mAP_50": 0.935, "bbox_mAP_75": 0.903, "bbox_mAP_s": 0.564, "bbox_mAP_m": 0.803, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.800 0.935 0.903 0.564 0.803 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.34449, "loss_rpn_cls": 0.01001, "loss_rpn_bbox": 0.04833, "loss_cls": 0.1246, "acc": 95.29685, "loss_bbox": 0.15533, "loss_mask": 0.11577, "loss": 0.45403, "time": 3.91464}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.43663, "loss_rpn_cls": 0.00616, "loss_rpn_bbox": 0.04993, "loss_cls": 0.10589, "acc": 95.97461, "loss_bbox": 0.15162, "loss_mask": 0.1139, "loss": 0.42751, "time": 4.14045}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 3.33204, "loss_rpn_cls": 0.00617, "loss_rpn_bbox": 0.04923, "loss_cls": 0.11127, "acc": 95.80908, "loss_bbox": 0.14776, "loss_mask": 0.11164, "loss": 0.42606, "time": 4.02979}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.808, "bbox_mAP_50": 0.937, "bbox_mAP_75": 0.902, "bbox_mAP_s": 0.526, "bbox_mAP_m": 0.812, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.808 0.937 0.902 0.526 0.812 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.85566, "loss_rpn_cls": 0.01127, "loss_rpn_bbox": 0.05053, "loss_cls": 0.12632, "acc": 95.21735, "loss_bbox": 0.15401, "loss_mask": 0.11621, "loss": 0.45833, "time": 4.42506}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.51617, "loss_rpn_cls": 0.00603, "loss_rpn_bbox": 0.05035, "loss_cls": 0.10646, "acc": 95.97559, "loss_bbox": 0.15466, "loss_mask": 0.11397, "loss": 0.43147, "time": 4.21402}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 3.47045, "loss_rpn_cls": 0.00696, "loss_rpn_bbox": 0.04885, "loss_cls": 0.10596, "acc": 96.01758, "loss_bbox": 0.14784, "loss_mask": 0.11366, "loss": 0.42328, "time": 4.17243}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.811, "bbox_mAP_50": 0.94, "bbox_mAP_75": 0.903, "bbox_mAP_s": 0.566, "bbox_mAP_m": 0.815, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.811 0.940 0.903 0.566 0.815 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.82812, "loss_rpn_cls": 0.00981, "loss_rpn_bbox": 0.05449, "loss_cls": 0.11869, "acc": 95.53598, "loss_bbox": 0.15292, "loss_mask": 0.1163, "loss": 0.4522, "time": 4.39888}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.40865, "loss_rpn_cls": 0.00618, "loss_rpn_bbox": 0.04879, "loss_cls": 0.10344, "acc": 96.11914, "loss_bbox": 0.14794, "loss_mask": 0.11385, "loss": 0.42021, "time": 4.10566}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 3.01435, "loss_rpn_cls": 0.00561, "loss_rpn_bbox": 0.04559, "loss_cls": 0.10011, "acc": 96.21289, "loss_bbox": 0.14569, "loss_mask": 0.11126, "loss": 0.40826, "time": 3.71334}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.811, "bbox_mAP_50": 0.935, "bbox_mAP_75": 0.904, "bbox_mAP_s": 0.5, "bbox_mAP_m": 0.815, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.811 0.935 0.904 0.500 0.815 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.32313, "loss_rpn_cls": 0.00945, "loss_rpn_bbox": 0.0504, "loss_cls": 0.11801, "acc": 95.61173, "loss_bbox": 0.15334, "loss_mask": 0.11529, "loss": 0.44649, "time": 3.89017}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.05115, "loss_rpn_cls": 0.00604, "loss_rpn_bbox": 0.04821, "loss_cls": 0.10282, "acc": 96.06689, "loss_bbox": 0.14685, "loss_mask": 0.11319, "loss": 0.41711, "time": 3.75739}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 3.06447, "loss_rpn_cls": 0.00585, "loss_rpn_bbox": 0.04671, "loss_cls": 0.09587, "acc": 96.36182, "loss_bbox": 0.14499, "loss_mask": 0.11152, "loss": 0.40494, "time": 3.77184}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.808, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.911, "bbox_mAP_s": 0.356, "bbox_mAP_m": 0.812, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.808 0.946 0.911 0.356 0.812 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.37356, "loss_rpn_cls": 0.00862, "loss_rpn_bbox": 0.04863, "loss_cls": 0.11672, "acc": 95.64365, "loss_bbox": 0.15264, "loss_mask": 0.11557, "loss": 0.44217, "time": 3.94323}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.12592, "loss_rpn_cls": 0.00606, "loss_rpn_bbox": 0.04843, "loss_cls": 0.09716, "acc": 96.36865, "loss_bbox": 0.14784, "loss_mask": 0.11246, "loss": 0.41193, "time": 3.82506}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 2.97426, "loss_rpn_cls": 0.00624, "loss_rpn_bbox": 0.04646, "loss_cls": 0.10072, "acc": 96.21484, "loss_bbox": 0.14026, "loss_mask": 0.10889, "loss": 0.40257, "time": 3.67276}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.819, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.516, "bbox_mAP_m": 0.822, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.819 0.946 0.910 0.516 0.822 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 3.35074, "loss_rpn_cls": 0.00809, "loss_rpn_bbox": 0.04476, "loss_cls": 0.11702, "acc": 95.69812, "loss_bbox": 0.1499, "loss_mask": 0.11691, "loss": 0.43668, "time": 3.91856}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 11212, "data_time": 3.13211, "loss_rpn_cls": 0.00592, "loss_rpn_bbox": 0.04399, "loss_cls": 0.09981, "acc": 96.22168, "loss_bbox": 0.14271, "loss_mask": 0.11071, "loss": 0.40315, "time": 3.83457}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 11212, "data_time": 2.99205, "loss_rpn_cls": 0.00573, "loss_rpn_bbox": 0.04812, "loss_cls": 0.09539, "acc": 96.49609, "loss_bbox": 0.14399, "loss_mask": 0.11072, "loss": 0.40395, "time": 3.69542}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.804, "bbox_mAP_50": 0.936, "bbox_mAP_75": 0.9, "bbox_mAP_s": 0.497, "bbox_mAP_m": 0.808, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.804 0.936 0.900 0.497 0.808 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.01, "memory": 11212, "data_time": 4.54769, "loss_rpn_cls": 0.00939, "loss_rpn_bbox": 0.05296, "loss_cls": 0.12152, "acc": 95.64303, "loss_bbox": 0.15318, "loss_mask": 0.11407, "loss": 0.45113, "time": 5.11866}
