{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=1000,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.5),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                    dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                ],\n                p=0.5)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.5),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n                            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n                        ],\n                        p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/mask_rcnn_r101_fpn_2x_coco_bbox_mAP-0.408__segm_mAP-0.366_20200505_071027-14b391c7.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.5)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/MaskRCNN_R101_fp16_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 791427255, "exp_name": "mask_rcnn_r101_fp16_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 5267, "data_time": 1.80516, "loss_rpn_cls": 0.44256, "loss_rpn_bbox": 0.15551, "loss_cls": 0.73195, "acc": 71.70139, "loss_bbox": 0.60794, "loss_mask": 0.55026, "loss": 2.48822, "time": 2.26125}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 5283, "data_time": 1.17159, "loss_rpn_cls": 0.03092, "loss_rpn_bbox": 0.09347, "loss_cls": 0.41925, "acc": 83.91309, "loss_bbox": 0.45195, "loss_mask": 0.19109, "loss": 1.18668, "time": 1.63029}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 5283, "data_time": 1.09783, "loss_rpn_cls": 0.0139, "loss_rpn_bbox": 0.0707, "loss_cls": 0.26651, "acc": 90.28613, "loss_bbox": 0.23164, "loss_mask": 0.13863, "loss": 0.72139, "time": 1.55895}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 5321, "data_time": 1.18764, "loss_rpn_cls": 0.01265, "loss_rpn_bbox": 0.0656, "loss_cls": 0.20819, "acc": 92.47363, "loss_bbox": 0.20729, "loss_mask": 0.13436, "loss": 0.62809, "time": 1.65399}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.735, "bbox_mAP_50": 0.89, "bbox_mAP_75": 0.843, "bbox_mAP_s": 0.348, "bbox_mAP_m": 0.74, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.735 0.890 0.843 0.348 0.740 -1.000"}
{"mode": "val", "epoch": 1, "iter": 78, "lr": 0.00443, "memory": 5503, "data_time": 1.44459, "loss_rpn_cls": 0.01163, "loss_rpn_bbox": 0.06799, "loss_cls": 0.20526, "acc": 92.61506, "loss_bbox": 0.19667, "loss_mask": 0.13131, "loss": 0.61287, "time": 1.70276}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00542, "memory": 5503, "data_time": 1.23609, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.06993, "loss_cls": 0.18897, "acc": 93.08887, "loss_bbox": 0.19687, "loss_mask": 0.12938, "loss": 0.59737, "time": 1.69781}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00642, "memory": 5503, "data_time": 1.19559, "loss_rpn_cls": 0.01035, "loss_rpn_bbox": 0.06955, "loss_cls": 0.18972, "acc": 93.0, "loss_bbox": 0.20302, "loss_mask": 0.12999, "loss": 0.60262, "time": 1.65477}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00742, "memory": 5503, "data_time": 1.17206, "loss_rpn_cls": 0.01219, "loss_rpn_bbox": 0.06845, "loss_cls": 0.18346, "acc": 93.16309, "loss_bbox": 0.19785, "loss_mask": 0.1244, "loss": 0.58634, "time": 1.63021}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00842, "memory": 5503, "data_time": 1.3281, "loss_rpn_cls": 0.01143, "loss_rpn_bbox": 0.06883, "loss_cls": 0.17241, "acc": 93.6416, "loss_bbox": 0.19121, "loss_mask": 0.12806, "loss": 0.57193, "time": 1.79637}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.764, "bbox_mAP_50": 0.921, "bbox_mAP_75": 0.876, "bbox_mAP_s": 0.517, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.764 0.921 0.876 0.517 0.768 -1.000"}
{"mode": "val", "epoch": 2, "iter": 78, "lr": 0.00886, "memory": 5503, "data_time": 1.46976, "loss_rpn_cls": 0.01149, "loss_rpn_bbox": 0.06157, "loss_cls": 0.16645, "acc": 93.66111, "loss_bbox": 0.19435, "loss_mask": 0.13151, "loss": 0.56536, "time": 1.72823}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00986, "memory": 5503, "data_time": 1.23194, "loss_rpn_cls": 0.00915, "loss_rpn_bbox": 0.06488, "loss_cls": 0.15475, "acc": 94.2168, "loss_bbox": 0.17525, "loss_mask": 0.11768, "loss": 0.52172, "time": 1.6963}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.25588, "loss_rpn_cls": 0.01017, "loss_rpn_bbox": 0.06188, "loss_cls": 0.15511, "acc": 94.19238, "loss_bbox": 0.19155, "loss_mask": 0.1283, "loss": 0.54702, "time": 1.72346}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.06957, "loss_rpn_cls": 0.00963, "loss_rpn_bbox": 0.06101, "loss_cls": 0.16173, "acc": 93.90723, "loss_bbox": 0.18551, "loss_mask": 0.11963, "loss": 0.5375, "time": 1.52819}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.17327, "loss_rpn_cls": 0.00871, "loss_rpn_bbox": 0.06095, "loss_cls": 0.14332, "acc": 94.54004, "loss_bbox": 0.17878, "loss_mask": 0.12293, "loss": 0.51469, "time": 1.64036}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.01, "bbox_mAP": 0.776, "bbox_mAP_50": 0.918, "bbox_mAP_75": 0.885, "bbox_mAP_s": 0.5, "bbox_mAP_m": 0.78, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.776 0.918 0.885 0.500 0.780 -1.000"}
{"mode": "val", "epoch": 3, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.45368, "loss_rpn_cls": 0.01209, "loss_rpn_bbox": 0.05943, "loss_cls": 0.16206, "acc": 93.95408, "loss_bbox": 0.18407, "loss_mask": 0.12029, "loss": 0.53795, "time": 1.71295}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.18755, "loss_rpn_cls": 0.00782, "loss_rpn_bbox": 0.05884, "loss_cls": 0.14905, "acc": 94.43066, "loss_bbox": 0.17047, "loss_mask": 0.11539, "loss": 0.50156, "time": 1.6552}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.19047, "loss_rpn_cls": 0.00758, "loss_rpn_bbox": 0.06031, "loss_cls": 0.13246, "acc": 95.05273, "loss_bbox": 0.17073, "loss_mask": 0.11798, "loss": 0.48905, "time": 1.66067}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.10758, "loss_rpn_cls": 0.00979, "loss_rpn_bbox": 0.05642, "loss_cls": 0.13946, "acc": 94.73047, "loss_bbox": 0.17444, "loss_mask": 0.12007, "loss": 0.50018, "time": 1.57454}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.20131, "loss_rpn_cls": 0.00769, "loss_rpn_bbox": 0.055, "loss_cls": 0.12928, "acc": 95.07422, "loss_bbox": 0.17016, "loss_mask": 0.11929, "loss": 0.48142, "time": 1.66618}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.01, "bbox_mAP": 0.795, "bbox_mAP_50": 0.931, "bbox_mAP_75": 0.899, "bbox_mAP_s": 0.399, "bbox_mAP_m": 0.799, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.931 0.899 0.399 0.799 -1.000"}
{"mode": "val", "epoch": 4, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.43209, "loss_rpn_cls": 0.01246, "loss_rpn_bbox": 0.05348, "loss_cls": 0.16098, "acc": 93.8921, "loss_bbox": 0.1764, "loss_mask": 0.12133, "loss": 0.52465, "time": 1.6889}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.24777, "loss_rpn_cls": 0.00836, "loss_rpn_bbox": 0.05188, "loss_cls": 0.1256, "acc": 95.20215, "loss_bbox": 0.16384, "loss_mask": 0.11609, "loss": 0.46577, "time": 1.72101}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.11515, "loss_rpn_cls": 0.00961, "loss_rpn_bbox": 0.05399, "loss_cls": 0.12969, "acc": 95.12598, "loss_bbox": 0.16191, "loss_mask": 0.11515, "loss": 0.47034, "time": 1.5855}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.11972, "loss_rpn_cls": 0.00715, "loss_rpn_bbox": 0.05321, "loss_cls": 0.1176, "acc": 95.47266, "loss_bbox": 0.16309, "loss_mask": 0.11706, "loss": 0.45812, "time": 1.60165}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.07631, "loss_rpn_cls": 0.00705, "loss_rpn_bbox": 0.05292, "loss_cls": 0.12966, "acc": 95.10156, "loss_bbox": 0.16237, "loss_mask": 0.11356, "loss": 0.46556, "time": 1.53756}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.796, "bbox_mAP_50": 0.939, "bbox_mAP_75": 0.904, "bbox_mAP_s": 0.491, "bbox_mAP_m": 0.799, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.939 0.904 0.491 0.799 -1.000"}
{"mode": "val", "epoch": 5, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.40513, "loss_rpn_cls": 0.00858, "loss_rpn_bbox": 0.04874, "loss_cls": 0.12858, "acc": 95.12846, "loss_bbox": 0.17193, "loss_mask": 0.11735, "loss": 0.47518, "time": 1.66464}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.13795, "loss_rpn_cls": 0.00623, "loss_rpn_bbox": 0.05101, "loss_cls": 0.12401, "acc": 95.28223, "loss_bbox": 0.15879, "loss_mask": 0.11152, "loss": 0.45156, "time": 1.60172}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.22285, "loss_rpn_cls": 0.0081, "loss_rpn_bbox": 0.05239, "loss_cls": 0.12053, "acc": 95.41992, "loss_bbox": 0.15572, "loss_mask": 0.11521, "loss": 0.45195, "time": 1.69727}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.04943, "loss_rpn_cls": 0.00834, "loss_rpn_bbox": 0.05307, "loss_cls": 0.11705, "acc": 95.55176, "loss_bbox": 0.15527, "loss_mask": 0.1126, "loss": 0.44634, "time": 1.51736}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.07289, "loss_rpn_cls": 0.00535, "loss_rpn_bbox": 0.05011, "loss_cls": 0.11975, "acc": 95.53613, "loss_bbox": 0.15767, "loss_mask": 0.11476, "loss": 0.44764, "time": 1.54235}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.798, "bbox_mAP_50": 0.936, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.571, "bbox_mAP_m": 0.801, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.798 0.936 0.905 0.571 0.801 -1.000"}
{"mode": "val", "epoch": 6, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.39632, "loss_rpn_cls": 0.0114, "loss_rpn_bbox": 0.05007, "loss_cls": 0.13, "acc": 95.05834, "loss_bbox": 0.16498, "loss_mask": 0.11919, "loss": 0.47564, "time": 1.65568}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.19056, "loss_rpn_cls": 0.00741, "loss_rpn_bbox": 0.04852, "loss_cls": 0.11286, "acc": 95.64453, "loss_bbox": 0.15633, "loss_mask": 0.11753, "loss": 0.44266, "time": 1.66244}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.1133, "loss_rpn_cls": 0.00769, "loss_rpn_bbox": 0.05109, "loss_cls": 0.11465, "acc": 95.7168, "loss_bbox": 0.15514, "loss_mask": 0.11328, "loss": 0.44185, "time": 1.58458}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.15418, "loss_rpn_cls": 0.00709, "loss_rpn_bbox": 0.05044, "loss_cls": 0.10591, "acc": 95.99512, "loss_bbox": 0.15131, "loss_mask": 0.11048, "loss": 0.42522, "time": 1.62815}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.07063, "loss_rpn_cls": 0.00687, "loss_rpn_bbox": 0.05056, "loss_cls": 0.10653, "acc": 95.92773, "loss_bbox": 0.15316, "loss_mask": 0.11255, "loss": 0.42967, "time": 1.53892}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.807, "bbox_mAP_50": 0.945, "bbox_mAP_75": 0.911, "bbox_mAP_s": 0.462, "bbox_mAP_m": 0.811, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.807 0.945 0.911 0.462 0.811 -1.000"}
{"mode": "val", "epoch": 7, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.39192, "loss_rpn_cls": 0.0088, "loss_rpn_bbox": 0.05261, "loss_cls": 0.12358, "acc": 95.34881, "loss_bbox": 0.17749, "loss_mask": 0.11728, "loss": 0.47975, "time": 1.65117}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.15734, "loss_rpn_cls": 0.00633, "loss_rpn_bbox": 0.04764, "loss_cls": 0.10888, "acc": 95.83691, "loss_bbox": 0.15368, "loss_mask": 0.11206, "loss": 0.42861, "time": 1.62232}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.07522, "loss_rpn_cls": 0.00573, "loss_rpn_bbox": 0.04643, "loss_cls": 0.1117, "acc": 95.80371, "loss_bbox": 0.15087, "loss_mask": 0.11209, "loss": 0.42682, "time": 1.54386}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.10166, "loss_rpn_cls": 0.00611, "loss_rpn_bbox": 0.05064, "loss_cls": 0.10593, "acc": 95.89844, "loss_bbox": 0.15423, "loss_mask": 0.11374, "loss": 0.43064, "time": 1.57181}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.11823, "loss_rpn_cls": 0.00632, "loss_rpn_bbox": 0.05105, "loss_cls": 0.11065, "acc": 95.76953, "loss_bbox": 0.15224, "loss_mask": 0.11298, "loss": 0.43324, "time": 1.58939}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.812, "bbox_mAP_50": 0.947, "bbox_mAP_75": 0.916, "bbox_mAP_s": 0.558, "bbox_mAP_m": 0.816, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.812 0.947 0.916 0.558 0.816 -1.000"}
{"mode": "val", "epoch": 8, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.38172, "loss_rpn_cls": 0.00938, "loss_rpn_bbox": 0.04803, "loss_cls": 0.11826, "acc": 95.45898, "loss_bbox": 0.17022, "loss_mask": 0.1188, "loss": 0.46469, "time": 1.64013}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.21196, "loss_rpn_cls": 0.00628, "loss_rpn_bbox": 0.04925, "loss_cls": 0.10143, "acc": 96.20801, "loss_bbox": 0.14963, "loss_mask": 0.11148, "loss": 0.41807, "time": 1.68377}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.01691, "loss_rpn_cls": 0.00657, "loss_rpn_bbox": 0.04914, "loss_cls": 0.11159, "acc": 95.78223, "loss_bbox": 0.15536, "loss_mask": 0.11144, "loss": 0.4341, "time": 1.48037}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.04947, "loss_rpn_cls": 0.00637, "loss_rpn_bbox": 0.04794, "loss_cls": 0.10581, "acc": 96.00586, "loss_bbox": 0.15273, "loss_mask": 0.11341, "loss": 0.42627, "time": 1.52185}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.10334, "loss_rpn_cls": 0.00574, "loss_rpn_bbox": 0.05014, "loss_cls": 0.10652, "acc": 96.00195, "loss_bbox": 0.15657, "loss_mask": 0.11235, "loss": 0.43131, "time": 1.57463}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.812, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.52, "bbox_mAP_m": 0.815, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.812 0.946 0.910 0.520 0.815 -1.000"}
{"mode": "val", "epoch": 9, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.37417, "loss_rpn_cls": 0.00952, "loss_rpn_bbox": 0.04464, "loss_cls": 0.11622, "acc": 95.56353, "loss_bbox": 0.16222, "loss_mask": 0.11618, "loss": 0.44878, "time": 1.63174}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.12286, "loss_rpn_cls": 0.00445, "loss_rpn_bbox": 0.0463, "loss_cls": 0.1021, "acc": 96.18262, "loss_bbox": 0.15041, "loss_mask": 0.11053, "loss": 0.41378, "time": 1.59339}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.13337, "loss_rpn_cls": 0.00627, "loss_rpn_bbox": 0.04764, "loss_cls": 0.10152, "acc": 96.14648, "loss_bbox": 0.14656, "loss_mask": 0.11065, "loss": 0.41263, "time": 1.60706}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.15043, "loss_rpn_cls": 0.00712, "loss_rpn_bbox": 0.04907, "loss_cls": 0.09671, "acc": 96.45312, "loss_bbox": 0.14862, "loss_mask": 0.11277, "loss": 0.41428, "time": 1.62417}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.08341, "loss_rpn_cls": 0.00577, "loss_rpn_bbox": 0.04727, "loss_cls": 0.10269, "acc": 96.10059, "loss_bbox": 0.14723, "loss_mask": 0.10873, "loss": 0.41169, "time": 1.54904}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.81, "bbox_mAP_50": 0.949, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.461, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.810 0.949 0.910 0.461 0.813 -1.000"}
{"mode": "val", "epoch": 10, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.37886, "loss_rpn_cls": 0.01007, "loss_rpn_bbox": 0.04596, "loss_cls": 0.11689, "acc": 95.64616, "loss_bbox": 0.1577, "loss_mask": 0.11442, "loss": 0.44505, "time": 1.63466}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.16527, "loss_rpn_cls": 0.00596, "loss_rpn_bbox": 0.04281, "loss_cls": 0.09619, "acc": 96.41797, "loss_bbox": 0.13976, "loss_mask": 0.1067, "loss": 0.39142, "time": 1.63238}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.14868, "loss_rpn_cls": 0.00678, "loss_rpn_bbox": 0.04673, "loss_cls": 0.09653, "acc": 96.31836, "loss_bbox": 0.14793, "loss_mask": 0.11195, "loss": 0.40992, "time": 1.62238}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.07117, "loss_rpn_cls": 0.00611, "loss_rpn_bbox": 0.04937, "loss_cls": 0.10669, "acc": 95.97168, "loss_bbox": 0.15374, "loss_mask": 0.11234, "loss": 0.42825, "time": 1.54075}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.0529, "loss_rpn_cls": 0.00595, "loss_rpn_bbox": 0.04704, "loss_cls": 0.1035, "acc": 96.1377, "loss_bbox": 0.14502, "loss_mask": 0.10824, "loss": 0.40974, "time": 1.52494}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.815, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.915, "bbox_mAP_s": 0.505, "bbox_mAP_m": 0.818, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.815 0.946 0.915 0.505 0.818 -1.000"}
{"mode": "val", "epoch": 11, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.38822, "loss_rpn_cls": 0.00957, "loss_rpn_bbox": 0.04795, "loss_cls": 0.11672, "acc": 95.62049, "loss_bbox": 0.15412, "loss_mask": 0.11128, "loss": 0.43964, "time": 1.64718}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.09321, "loss_rpn_cls": 0.0046, "loss_rpn_bbox": 0.0437, "loss_cls": 0.09897, "acc": 96.30078, "loss_bbox": 0.1431, "loss_mask": 0.10602, "loss": 0.39639, "time": 1.56179}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.04314, "loss_rpn_cls": 0.00576, "loss_rpn_bbox": 0.04525, "loss_cls": 0.1042, "acc": 96.0918, "loss_bbox": 0.14398, "loss_mask": 0.10915, "loss": 0.40834, "time": 1.50481}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.15993, "loss_rpn_cls": 0.00609, "loss_rpn_bbox": 0.04692, "loss_cls": 0.09365, "acc": 96.51172, "loss_bbox": 0.14652, "loss_mask": 0.11112, "loss": 0.4043, "time": 1.63114}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.16559, "loss_rpn_cls": 0.00615, "loss_rpn_bbox": 0.04624, "loss_cls": 0.09452, "acc": 96.35156, "loss_bbox": 0.14324, "loss_mask": 0.11163, "loss": 0.40177, "time": 1.6464}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.813, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.914, "bbox_mAP_s": 0.487, "bbox_mAP_m": 0.815, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.813 0.948 0.914 0.487 0.815 -1.000"}
{"mode": "val", "epoch": 12, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.38425, "loss_rpn_cls": 0.01, "loss_rpn_bbox": 0.04767, "loss_cls": 0.11734, "acc": 95.57855, "loss_bbox": 0.15802, "loss_mask": 0.11683, "loss": 0.44987, "time": 1.64393}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.13419, "loss_rpn_cls": 0.0054, "loss_rpn_bbox": 0.04569, "loss_cls": 0.09613, "acc": 96.33496, "loss_bbox": 0.14496, "loss_mask": 0.10988, "loss": 0.40205, "time": 1.60978}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.07854, "loss_rpn_cls": 0.00626, "loss_rpn_bbox": 0.04527, "loss_cls": 0.09773, "acc": 96.38672, "loss_bbox": 0.15039, "loss_mask": 0.11358, "loss": 0.41323, "time": 1.55757}
{"mode": "train", "epoch": 13, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.0669, "loss_rpn_cls": 0.00592, "loss_rpn_bbox": 0.04534, "loss_cls": 0.09816, "acc": 96.25, "loss_bbox": 0.14907, "loss_mask": 0.11054, "loss": 0.40905, "time": 1.54196}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.05056, "loss_rpn_cls": 0.005, "loss_rpn_bbox": 0.04371, "loss_cls": 0.09693, "acc": 96.38281, "loss_bbox": 0.14221, "loss_mask": 0.10756, "loss": 0.3954, "time": 1.5268}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.814, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.912, "bbox_mAP_s": 0.48, "bbox_mAP_m": 0.817, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.814 0.948 0.912 0.480 0.817 -1.000"}
{"mode": "val", "epoch": 13, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.37041, "loss_rpn_cls": 0.01245, "loss_rpn_bbox": 0.04882, "loss_cls": 0.11041, "acc": 95.89844, "loss_bbox": 0.15734, "loss_mask": 0.11312, "loss": 0.44215, "time": 1.63457}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 0.96684, "loss_rpn_cls": 0.00389, "loss_rpn_bbox": 0.04332, "loss_cls": 0.09702, "acc": 96.33984, "loss_bbox": 0.14328, "loss_mask": 0.10491, "loss": 0.39241, "time": 1.4344}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.13968, "loss_rpn_cls": 0.00577, "loss_rpn_bbox": 0.04486, "loss_cls": 0.09003, "acc": 96.68848, "loss_bbox": 0.14479, "loss_mask": 0.11006, "loss": 0.39551, "time": 1.62892}
{"mode": "train", "epoch": 14, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.00946, "loss_rpn_cls": 0.00483, "loss_rpn_bbox": 0.04323, "loss_cls": 0.09005, "acc": 96.56055, "loss_bbox": 0.14075, "loss_mask": 0.10814, "loss": 0.387, "time": 1.48839}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.16906, "loss_rpn_cls": 0.00676, "loss_rpn_bbox": 0.04747, "loss_cls": 0.09729, "acc": 96.37012, "loss_bbox": 0.14419, "loss_mask": 0.11012, "loss": 0.40583, "time": 1.65889}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.822, "bbox_mAP_50": 0.951, "bbox_mAP_75": 0.921, "bbox_mAP_s": 0.54, "bbox_mAP_m": 0.825, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.822 0.951 0.921 0.540 0.825 -1.000"}
{"mode": "val", "epoch": 14, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.37256, "loss_rpn_cls": 0.00881, "loss_rpn_bbox": 0.04555, "loss_cls": 0.10966, "acc": 95.9504, "loss_bbox": 0.1523, "loss_mask": 0.1139, "loss": 0.43022, "time": 1.63881}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 5503, "data_time": 1.15707, "loss_rpn_cls": 0.00483, "loss_rpn_bbox": 0.04305, "loss_cls": 0.0918, "acc": 96.58105, "loss_bbox": 0.14178, "loss_mask": 0.10838, "loss": 0.38983, "time": 1.63841}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 5503, "data_time": 1.02628, "loss_rpn_cls": 0.00523, "loss_rpn_bbox": 0.04429, "loss_cls": 0.09661, "acc": 96.32812, "loss_bbox": 0.14505, "loss_mask": 0.11015, "loss": 0.40134, "time": 1.50801}
{"mode": "train", "epoch": 15, "iter": 150, "lr": 0.01, "memory": 5503, "data_time": 1.04043, "loss_rpn_cls": 0.00538, "loss_rpn_bbox": 0.04479, "loss_cls": 0.0926, "acc": 96.46875, "loss_bbox": 0.14528, "loss_mask": 0.10809, "loss": 0.39614, "time": 1.52122}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.01, "memory": 5503, "data_time": 1.10828, "loss_rpn_cls": 0.00527, "loss_rpn_bbox": 0.04477, "loss_cls": 0.09734, "acc": 96.26367, "loss_bbox": 0.14283, "loss_mask": 0.10961, "loss": 0.39982, "time": 1.59049}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.802, "bbox_mAP_50": 0.945, "bbox_mAP_75": 0.911, "bbox_mAP_s": 0.545, "bbox_mAP_m": 0.806, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.802 0.945 0.911 0.545 0.806 -1.000"}
{"mode": "val", "epoch": 15, "iter": 78, "lr": 0.01, "memory": 5503, "data_time": 1.37066, "loss_rpn_cls": 0.00958, "loss_rpn_bbox": 0.04961, "loss_cls": 0.11703, "acc": 95.69436, "loss_bbox": 0.15534, "loss_mask": 0.11243, "loss": 0.44399, "time": 1.63642}
