{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/faster_rcnn_r101_fpn_2x_coco_bbox_mAP-0.398_20200504_210455-1d2dac9c.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/FasterRCNN_R101_fp16_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1118999069, "exp_name": "faster_rcnn_r101_fp16_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00495, "memory": 8418, "data_time": 0.07051, "loss_rpn_cls": 0.16314, "loss_rpn_bbox": 0.11112, "loss_cls": 0.55662, "acc": 79.31885, "loss_bbox": 0.48868, "loss": 1.31957, "time": 0.72754}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 8562, "data_time": 0.01415, "loss_rpn_cls": 0.01197, "loss_rpn_bbox": 0.07365, "loss_cls": 0.25936, "acc": 90.55859, "loss_bbox": 0.20469, "loss": 0.54967, "time": 0.70722}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01104, "bbox_mAP": 0.697, "bbox_mAP_50": 0.863, "bbox_mAP_75": 0.812, "bbox_mAP_s": 0.46, "bbox_mAP_m": 0.701, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.697 0.863 0.812 0.460 0.701 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.01104, "memory": 8562, "data_time": 0.09541, "loss_rpn_cls": 0.01482, "loss_rpn_bbox": 0.0816, "loss_cls": 0.21864, "acc": 91.92082, "loss_bbox": 0.1956, "loss": 0.51067, "time": 0.43981}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01603, "memory": 8562, "data_time": 0.07326, "loss_rpn_cls": 0.0102, "loss_rpn_bbox": 0.07078, "loss_cls": 0.18056, "acc": 93.37109, "loss_bbox": 0.18917, "loss": 0.4507, "time": 0.75629}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02103, "memory": 8562, "data_time": 0.01448, "loss_rpn_cls": 0.00938, "loss_rpn_bbox": 0.06886, "loss_cls": 0.16886, "acc": 93.76318, "loss_bbox": 0.18445, "loss": 0.43155, "time": 0.71412}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.02213, "bbox_mAP": 0.752, "bbox_mAP_50": 0.906, "bbox_mAP_75": 0.87, "bbox_mAP_s": 0.534, "bbox_mAP_m": 0.755, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.752 0.906 0.870 0.534 0.755 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.02213, "memory": 8612, "data_time": 0.09379, "loss_rpn_cls": 0.01024, "loss_rpn_bbox": 0.07909, "loss_cls": 0.17023, "acc": 93.78506, "loss_bbox": 0.19013, "loss": 0.44969, "time": 0.44009}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02712, "memory": 8620, "data_time": 0.07114, "loss_rpn_cls": 0.01005, "loss_rpn_bbox": 0.06928, "loss_cls": 0.15507, "acc": 94.31201, "loss_bbox": 0.17961, "loss": 0.41402, "time": 0.76374}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.03212, "memory": 8620, "data_time": 0.01469, "loss_rpn_cls": 0.01094, "loss_rpn_bbox": 0.06831, "loss_cls": 0.14456, "acc": 94.63623, "loss_bbox": 0.17351, "loss": 0.39732, "time": 0.73019}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.03322, "bbox_mAP": 0.782, "bbox_mAP_50": 0.926, "bbox_mAP_75": 0.889, "bbox_mAP_s": 0.532, "bbox_mAP_m": 0.786, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.782 0.926 0.889 0.532 0.786 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.03322, "memory": 8620, "data_time": 0.0973, "loss_rpn_cls": 0.01382, "loss_rpn_bbox": 0.07445, "loss_cls": 0.15237, "acc": 94.34846, "loss_bbox": 0.18003, "loss": 0.42067, "time": 0.44243}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.03821, "memory": 8620, "data_time": 0.07748, "loss_rpn_cls": 0.0105, "loss_rpn_bbox": 0.07309, "loss_cls": 0.14658, "acc": 94.58984, "loss_bbox": 0.17358, "loss": 0.40374, "time": 0.77173}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.04321, "memory": 8620, "data_time": 0.01459, "loss_rpn_cls": 0.01199, "loss_rpn_bbox": 0.06982, "loss_cls": 0.14027, "acc": 94.76953, "loss_bbox": 0.17738, "loss": 0.39946, "time": 0.73572}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.04431, "bbox_mAP": 0.785, "bbox_mAP_50": 0.94, "bbox_mAP_75": 0.899, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.788, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.785 0.940 0.899 0.353 0.788 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.04431, "memory": 8620, "data_time": 0.09671, "loss_rpn_cls": 0.0129, "loss_rpn_bbox": 0.06233, "loss_cls": 0.1363, "acc": 95.03518, "loss_bbox": 0.17047, "loss": 0.38201, "time": 0.44102}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0493, "memory": 8620, "data_time": 0.07445, "loss_rpn_cls": 0.00956, "loss_rpn_bbox": 0.06701, "loss_cls": 0.13035, "acc": 95.16309, "loss_bbox": 0.16983, "loss": 0.37674, "time": 0.76441}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01414, "loss_rpn_cls": 0.01026, "loss_rpn_bbox": 0.07058, "loss_cls": 0.13626, "acc": 94.95996, "loss_bbox": 0.17514, "loss": 0.39224, "time": 0.73818}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.786, "bbox_mAP_50": 0.928, "bbox_mAP_75": 0.888, "bbox_mAP_s": 0.464, "bbox_mAP_m": 0.789, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.786 0.928 0.888 0.464 0.789 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.09171, "loss_rpn_cls": 0.01384, "loss_rpn_bbox": 0.07779, "loss_cls": 0.14875, "acc": 94.41419, "loss_bbox": 0.16489, "loss": 0.40527, "time": 0.43331}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07319, "loss_rpn_cls": 0.00952, "loss_rpn_bbox": 0.06449, "loss_cls": 0.12471, "acc": 95.33936, "loss_bbox": 0.1662, "loss": 0.36492, "time": 0.77001}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.0146, "loss_rpn_cls": 0.00779, "loss_rpn_bbox": 0.06132, "loss_cls": 0.12612, "acc": 95.29492, "loss_bbox": 0.15895, "loss": 0.35418, "time": 0.73357}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.799, "bbox_mAP_50": 0.942, "bbox_mAP_75": 0.911, "bbox_mAP_s": 0.498, "bbox_mAP_m": 0.803, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.799 0.942 0.911 0.498 0.803 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.09856, "loss_rpn_cls": 0.0145, "loss_rpn_bbox": 0.06259, "loss_cls": 0.12619, "acc": 95.25366, "loss_bbox": 0.17789, "loss": 0.38116, "time": 0.45033}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07224, "loss_rpn_cls": 0.00827, "loss_rpn_bbox": 0.05622, "loss_cls": 0.11537, "acc": 95.69385, "loss_bbox": 0.15909, "loss": 0.33894, "time": 0.78518}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01419, "loss_rpn_cls": 0.0083, "loss_rpn_bbox": 0.05608, "loss_cls": 0.11073, "acc": 95.91895, "loss_bbox": 0.1532, "loss": 0.32831, "time": 0.74614}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.805, "bbox_mAP_50": 0.939, "bbox_mAP_75": 0.903, "bbox_mAP_s": 0.514, "bbox_mAP_m": 0.808, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.805 0.939 0.903 0.514 0.808 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.09111, "loss_rpn_cls": 0.01219, "loss_rpn_bbox": 0.05791, "loss_cls": 0.12845, "acc": 95.15663, "loss_bbox": 0.16335, "loss": 0.3619, "time": 0.44498}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07525, "loss_rpn_cls": 0.0072, "loss_rpn_bbox": 0.05508, "loss_cls": 0.10421, "acc": 96.05176, "loss_bbox": 0.14582, "loss": 0.31233, "time": 0.78466}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01501, "loss_rpn_cls": 0.00776, "loss_rpn_bbox": 0.0572, "loss_cls": 0.10732, "acc": 95.96387, "loss_bbox": 0.15314, "loss": 0.32542, "time": 0.74982}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.819, "bbox_mAP_50": 0.943, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.473, "bbox_mAP_m": 0.822, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.819 0.943 0.910 0.473 0.822 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.0936, "loss_rpn_cls": 0.01416, "loss_rpn_bbox": 0.06752, "loss_cls": 0.12308, "acc": 95.41516, "loss_bbox": 0.1573, "loss": 0.36206, "time": 0.44456}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07414, "loss_rpn_cls": 0.00632, "loss_rpn_bbox": 0.05317, "loss_cls": 0.10413, "acc": 96.10938, "loss_bbox": 0.15145, "loss": 0.31508, "time": 0.7884}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01442, "loss_rpn_cls": 0.00732, "loss_rpn_bbox": 0.05154, "loss_cls": 0.09981, "acc": 96.23047, "loss_bbox": 0.14371, "loss": 0.30238, "time": 0.74438}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.05, "bbox_mAP": 0.815, "bbox_mAP_50": 0.951, "bbox_mAP_75": 0.915, "bbox_mAP_s": 0.507, "bbox_mAP_m": 0.818, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.815 0.951 0.915 0.507 0.818 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.09244, "loss_rpn_cls": 0.0124, "loss_rpn_bbox": 0.0562, "loss_cls": 0.12259, "acc": 95.46086, "loss_bbox": 0.15218, "loss": 0.34337, "time": 0.46197}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07136, "loss_rpn_cls": 0.00617, "loss_rpn_bbox": 0.04844, "loss_cls": 0.09184, "acc": 96.57568, "loss_bbox": 0.13945, "loss": 0.2859, "time": 0.7715}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01396, "loss_rpn_cls": 0.00599, "loss_rpn_bbox": 0.04982, "loss_cls": 0.09309, "acc": 96.47217, "loss_bbox": 0.14047, "loss": 0.28937, "time": 0.73649}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.05, "bbox_mAP": 0.801, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.4, "bbox_mAP_m": 0.804, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.801 0.948 0.910 0.400 0.804 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.09321, "loss_rpn_cls": 0.01523, "loss_rpn_bbox": 0.05182, "loss_cls": 0.10647, "acc": 96.15072, "loss_bbox": 0.155, "loss": 0.32852, "time": 0.44893}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07544, "loss_rpn_cls": 0.00675, "loss_rpn_bbox": 0.05255, "loss_cls": 0.09197, "acc": 96.54346, "loss_bbox": 0.14249, "loss": 0.29376, "time": 0.78775}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01447, "loss_rpn_cls": 0.00602, "loss_rpn_bbox": 0.04706, "loss_cls": 0.08992, "acc": 96.65332, "loss_bbox": 0.13565, "loss": 0.27866, "time": 0.73469}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.05, "bbox_mAP": 0.809, "bbox_mAP_50": 0.944, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.472, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.809 0.944 0.905 0.472 0.813 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.08937, "loss_rpn_cls": 0.01451, "loss_rpn_bbox": 0.05711, "loss_cls": 0.1119, "acc": 95.91409, "loss_bbox": 0.15384, "loss": 0.33736, "time": 0.44964}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07397, "loss_rpn_cls": 0.00653, "loss_rpn_bbox": 0.04683, "loss_cls": 0.08472, "acc": 96.83105, "loss_bbox": 0.13295, "loss": 0.27104, "time": 0.76715}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01514, "loss_rpn_cls": 0.00555, "loss_rpn_bbox": 0.04932, "loss_cls": 0.0874, "acc": 96.68457, "loss_bbox": 0.1414, "loss": 0.28368, "time": 0.73607}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.05, "bbox_mAP": 0.825, "bbox_mAP_50": 0.951, "bbox_mAP_75": 0.919, "bbox_mAP_s": 0.468, "bbox_mAP_m": 0.828, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.825 0.951 0.919 0.468 0.828 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.10382, "loss_rpn_cls": 0.0129, "loss_rpn_bbox": 0.04834, "loss_cls": 0.1075, "acc": 96.06245, "loss_bbox": 0.14518, "loss": 0.31391, "time": 0.44821}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07062, "loss_rpn_cls": 0.00531, "loss_rpn_bbox": 0.04626, "loss_cls": 0.07917, "acc": 97.03223, "loss_bbox": 0.13514, "loss": 0.26589, "time": 0.78546}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01266, "loss_rpn_cls": 0.00503, "loss_rpn_bbox": 0.04687, "loss_cls": 0.08564, "acc": 96.81445, "loss_bbox": 0.13617, "loss": 0.27371, "time": 0.74485}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.05, "bbox_mAP": 0.82, "bbox_mAP_50": 0.95, "bbox_mAP_75": 0.917, "bbox_mAP_s": 0.505, "bbox_mAP_m": 0.823, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.820 0.950 0.917 0.505 0.823 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.08379, "loss_rpn_cls": 0.01208, "loss_rpn_bbox": 0.04597, "loss_cls": 0.10695, "acc": 96.08499, "loss_bbox": 0.15057, "loss": 0.31557, "time": 0.42666}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.06955, "loss_rpn_cls": 0.0053, "loss_rpn_bbox": 0.04443, "loss_cls": 0.0835, "acc": 96.9248, "loss_bbox": 0.13739, "loss": 0.27064, "time": 0.78851}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01335, "loss_rpn_cls": 0.00554, "loss_rpn_bbox": 0.04843, "loss_cls": 0.08783, "acc": 96.70703, "loss_bbox": 0.13367, "loss": 0.27547, "time": 0.74499}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.05, "bbox_mAP": 0.818, "bbox_mAP_50": 0.944, "bbox_mAP_75": 0.908, "bbox_mAP_s": 0.37, "bbox_mAP_m": 0.822, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.818 0.944 0.908 0.370 0.822 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.09474, "loss_rpn_cls": 0.01035, "loss_rpn_bbox": 0.0531, "loss_cls": 0.11514, "acc": 95.77887, "loss_bbox": 0.14607, "loss": 0.32466, "time": 0.45553}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.05, "memory": 8620, "data_time": 0.07673, "loss_rpn_cls": 0.00552, "loss_rpn_bbox": 0.04316, "loss_cls": 0.07893, "acc": 97.00977, "loss_bbox": 0.13056, "loss": 0.25817, "time": 0.79315}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.05, "memory": 8620, "data_time": 0.01202, "loss_rpn_cls": 0.00522, "loss_rpn_bbox": 0.04672, "loss_cls": 0.07659, "acc": 97.13867, "loss_bbox": 0.12806, "loss": 0.25659, "time": 0.74065}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.05, "bbox_mAP": 0.824, "bbox_mAP_50": 0.952, "bbox_mAP_75": 0.915, "bbox_mAP_s": 0.497, "bbox_mAP_m": 0.828, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.824 0.952 0.915 0.497 0.828 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.05, "memory": 8620, "data_time": 0.08772, "loss_rpn_cls": 0.01218, "loss_rpn_bbox": 0.04582, "loss_cls": 0.10771, "acc": 96.02113, "loss_bbox": 0.13806, "loss": 0.30377, "time": 0.45212}
