{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/faster_rcnn_r50_fpn_fp16_1x_coco_20200204-d4dc1471.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='ShiftScaleRotate',\n        shift_limit=0.0625,\n        scale_limit=0,\n        rotate_limit=0,\n        interpolation=1,\n        p=0.75),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/FasterRCNN_R50_fp16_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 917867726, "exp_name": "faster_rcnn_r50_fp16_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00495, "memory": 5903, "data_time": 0.07312, "loss_rpn_cls": 0.11413, "loss_rpn_bbox": 0.10626, "loss_cls": 0.61942, "acc": 75.60059, "loss_bbox": 0.50942, "loss": 1.34923, "time": 0.60848}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 5903, "data_time": 0.01438, "loss_rpn_cls": 0.01227, "loss_rpn_bbox": 0.06855, "loss_cls": 0.2697, "acc": 90.16309, "loss_bbox": 0.21567, "loss": 0.56619, "time": 0.55472}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01104, "bbox_mAP": 0.719, "bbox_mAP_50": 0.886, "bbox_mAP_75": 0.835, "bbox_mAP_s": 0.323, "bbox_mAP_m": 0.723, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.719 0.886 0.835 0.323 0.723 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.01104, "memory": 5903, "data_time": 0.09028, "loss_rpn_cls": 0.01322, "loss_rpn_bbox": 0.07054, "loss_cls": 0.20074, "acc": 92.65638, "loss_bbox": 0.20014, "loss": 0.48464, "time": 0.40648}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01603, "memory": 5908, "data_time": 0.07117, "loss_rpn_cls": 0.01061, "loss_rpn_bbox": 0.06961, "loss_cls": 0.17651, "acc": 93.48584, "loss_bbox": 0.19413, "loss": 0.45086, "time": 0.61944}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02103, "memory": 5908, "data_time": 0.01515, "loss_rpn_cls": 0.00936, "loss_rpn_bbox": 0.06761, "loss_cls": 0.15891, "acc": 94.03906, "loss_bbox": 0.18274, "loss": 0.41861, "time": 0.5553}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.02213, "bbox_mAP": 0.758, "bbox_mAP_50": 0.926, "bbox_mAP_75": 0.883, "bbox_mAP_s": 0.46, "bbox_mAP_m": 0.763, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.758 0.926 0.883 0.460 0.763 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.02213, "memory": 5908, "data_time": 0.09093, "loss_rpn_cls": 0.01314, "loss_rpn_bbox": 0.06587, "loss_cls": 0.15034, "acc": 94.25456, "loss_bbox": 0.19207, "loss": 0.42141, "time": 0.40751}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02712, "memory": 5908, "data_time": 0.07361, "loss_rpn_cls": 0.01, "loss_rpn_bbox": 0.06815, "loss_cls": 0.15479, "acc": 94.10693, "loss_bbox": 0.18301, "loss": 0.41594, "time": 0.62919}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.03212, "memory": 5908, "data_time": 0.01326, "loss_rpn_cls": 0.01135, "loss_rpn_bbox": 0.07479, "loss_cls": 0.14812, "acc": 94.45605, "loss_bbox": 0.18222, "loss": 0.41649, "time": 0.57476}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.03322, "bbox_mAP": 0.778, "bbox_mAP_50": 0.929, "bbox_mAP_75": 0.889, "bbox_mAP_s": 0.344, "bbox_mAP_m": 0.781, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.778 0.929 0.889 0.344 0.781 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.03322, "memory": 5908, "data_time": 0.09584, "loss_rpn_cls": 0.01662, "loss_rpn_bbox": 0.07269, "loss_cls": 0.14729, "acc": 94.60074, "loss_bbox": 0.18071, "loss": 0.41731, "time": 0.41516}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.03821, "memory": 5908, "data_time": 0.07128, "loss_rpn_cls": 0.01036, "loss_rpn_bbox": 0.06936, "loss_cls": 0.14567, "acc": 94.56201, "loss_bbox": 0.17977, "loss": 0.40515, "time": 0.63297}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.04321, "memory": 5908, "data_time": 0.01264, "loss_rpn_cls": 0.01078, "loss_rpn_bbox": 0.07347, "loss_cls": 0.13708, "acc": 94.84961, "loss_bbox": 0.17473, "loss": 0.39606, "time": 0.57932}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.04431, "bbox_mAP": 0.77, "bbox_mAP_50": 0.924, "bbox_mAP_75": 0.888, "bbox_mAP_s": 0.333, "bbox_mAP_m": 0.774, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.770 0.924 0.888 0.333 0.774 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.04431, "memory": 5908, "data_time": 0.13719, "loss_rpn_cls": 0.01578, "loss_rpn_bbox": 0.07207, "loss_cls": 0.15913, "acc": 94.05111, "loss_bbox": 0.19079, "loss": 0.43776, "time": 0.46777}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0493, "memory": 5908, "data_time": 0.07469, "loss_rpn_cls": 0.01099, "loss_rpn_bbox": 0.07002, "loss_cls": 0.13152, "acc": 95.08936, "loss_bbox": 0.17677, "loss": 0.3893, "time": 0.64584}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01273, "loss_rpn_cls": 0.00909, "loss_rpn_bbox": 0.06388, "loss_cls": 0.12887, "acc": 95.14697, "loss_bbox": 0.16933, "loss": 0.37119, "time": 0.58585}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.765, "bbox_mAP_50": 0.928, "bbox_mAP_75": 0.891, "bbox_mAP_s": 0.442, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.765 0.928 0.891 0.442 0.768 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.09016, "loss_rpn_cls": 0.01348, "loss_rpn_bbox": 0.07604, "loss_cls": 0.16112, "acc": 93.97536, "loss_bbox": 0.18958, "loss": 0.44023, "time": 0.3872}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.06905, "loss_rpn_cls": 0.00955, "loss_rpn_bbox": 0.06501, "loss_cls": 0.12391, "acc": 95.3291, "loss_bbox": 0.16736, "loss": 0.36583, "time": 0.64077}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01283, "loss_rpn_cls": 0.00966, "loss_rpn_bbox": 0.06051, "loss_cls": 0.12169, "acc": 95.45117, "loss_bbox": 0.16182, "loss": 0.35367, "time": 0.57335}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.802, "bbox_mAP_50": 0.935, "bbox_mAP_75": 0.898, "bbox_mAP_s": 0.43, "bbox_mAP_m": 0.805, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.802 0.935 0.898 0.430 0.805 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.08969, "loss_rpn_cls": 0.01184, "loss_rpn_bbox": 0.05264, "loss_cls": 0.13658, "acc": 94.99324, "loss_bbox": 0.16204, "loss": 0.36311, "time": 0.39813}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.06916, "loss_rpn_cls": 0.00927, "loss_rpn_bbox": 0.05956, "loss_cls": 0.11894, "acc": 95.50977, "loss_bbox": 0.1579, "loss": 0.34567, "time": 0.62332}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01424, "loss_rpn_cls": 0.00802, "loss_rpn_bbox": 0.05644, "loss_cls": 0.12057, "acc": 95.49023, "loss_bbox": 0.15411, "loss": 0.33914, "time": 0.57861}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.794, "bbox_mAP_50": 0.934, "bbox_mAP_75": 0.9, "bbox_mAP_s": 0.435, "bbox_mAP_m": 0.797, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.934 0.900 0.435 0.797 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.11473, "loss_rpn_cls": 0.01255, "loss_rpn_bbox": 0.05771, "loss_cls": 0.15262, "acc": 94.43798, "loss_bbox": 0.16655, "loss": 0.38943, "time": 0.44344}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07321, "loss_rpn_cls": 0.00823, "loss_rpn_bbox": 0.06173, "loss_cls": 0.11022, "acc": 95.90186, "loss_bbox": 0.15754, "loss": 0.33772, "time": 0.65119}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.0133, "loss_rpn_cls": 0.00883, "loss_rpn_bbox": 0.05648, "loss_cls": 0.11511, "acc": 95.65625, "loss_bbox": 0.15627, "loss": 0.33668, "time": 0.58429}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.797, "bbox_mAP_50": 0.94, "bbox_mAP_75": 0.907, "bbox_mAP_s": 0.37, "bbox_mAP_m": 0.8, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.940 0.907 0.370 0.800 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.08782, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.0498, "loss_cls": 0.11437, "acc": 95.80141, "loss_bbox": 0.15423, "loss": 0.33063, "time": 0.40168}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07358, "loss_rpn_cls": 0.00757, "loss_rpn_bbox": 0.05206, "loss_cls": 0.10584, "acc": 96.05273, "loss_bbox": 0.1461, "loss": 0.31156, "time": 0.64459}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01395, "loss_rpn_cls": 0.00709, "loss_rpn_bbox": 0.05378, "loss_cls": 0.1044, "acc": 96.10352, "loss_bbox": 0.15144, "loss": 0.31672, "time": 0.59336}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.05, "bbox_mAP": 0.81, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.912, "bbox_mAP_s": 0.532, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.810 0.946 0.912 0.532 0.813 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.0907, "loss_rpn_cls": 0.01113, "loss_rpn_bbox": 0.05127, "loss_cls": 0.12517, "acc": 95.26743, "loss_bbox": 0.15426, "loss": 0.34183, "time": 0.39471}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07351, "loss_rpn_cls": 0.00669, "loss_rpn_bbox": 0.0527, "loss_cls": 0.10417, "acc": 96.13086, "loss_bbox": 0.14896, "loss": 0.31253, "time": 0.65272}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01388, "loss_rpn_cls": 0.00703, "loss_rpn_bbox": 0.05134, "loss_cls": 0.10653, "acc": 96.00098, "loss_bbox": 0.14341, "loss": 0.3083, "time": 0.58377}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.936, "bbox_mAP_75": 0.902, "bbox_mAP_s": 0.514, "bbox_mAP_m": 0.799, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.936 0.902 0.514 0.799 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.09221, "loss_rpn_cls": 0.01744, "loss_rpn_bbox": 0.06165, "loss_cls": 0.14932, "acc": 94.6696, "loss_bbox": 0.15997, "loss": 0.38837, "time": 0.40266}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07556, "loss_rpn_cls": 0.00687, "loss_rpn_bbox": 0.05201, "loss_cls": 0.09408, "acc": 96.52344, "loss_bbox": 0.14567, "loss": 0.29862, "time": 0.65088}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01319, "loss_rpn_cls": 0.00599, "loss_rpn_bbox": 0.0488, "loss_cls": 0.10138, "acc": 96.20459, "loss_bbox": 0.14479, "loss": 0.30096, "time": 0.58701}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.05, "bbox_mAP": 0.816, "bbox_mAP_50": 0.949, "bbox_mAP_75": 0.913, "bbox_mAP_s": 0.465, "bbox_mAP_m": 0.819, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.816 0.949 0.913 0.465 0.819 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.08641, "loss_rpn_cls": 0.01174, "loss_rpn_bbox": 0.05468, "loss_cls": 0.11683, "acc": 95.61799, "loss_bbox": 0.14821, "loss": 0.33147, "time": 0.41122}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07135, "loss_rpn_cls": 0.00562, "loss_rpn_bbox": 0.05192, "loss_cls": 0.09382, "acc": 96.49268, "loss_bbox": 0.14026, "loss": 0.29161, "time": 0.6354}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01301, "loss_rpn_cls": 0.00635, "loss_rpn_bbox": 0.04681, "loss_cls": 0.09373, "acc": 96.46484, "loss_bbox": 0.13885, "loss": 0.28573, "time": 0.57691}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.05, "bbox_mAP": 0.806, "bbox_mAP_50": 0.942, "bbox_mAP_75": 0.911, "bbox_mAP_s": 0.42, "bbox_mAP_m": 0.81, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.806 0.942 0.911 0.420 0.810 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.09879, "loss_rpn_cls": 0.01052, "loss_rpn_bbox": 0.06077, "loss_cls": 0.1264, "acc": 95.23237, "loss_bbox": 0.1584, "loss": 0.35609, "time": 0.40907}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07498, "loss_rpn_cls": 0.00592, "loss_rpn_bbox": 0.04851, "loss_cls": 0.09654, "acc": 96.34961, "loss_bbox": 0.13834, "loss": 0.28931, "time": 0.64237}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01414, "loss_rpn_cls": 0.00608, "loss_rpn_bbox": 0.04772, "loss_cls": 0.08788, "acc": 96.72266, "loss_bbox": 0.1391, "loss": 0.28077, "time": 0.58575}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.05, "bbox_mAP": 0.825, "bbox_mAP_50": 0.95, "bbox_mAP_75": 0.912, "bbox_mAP_s": 0.479, "bbox_mAP_m": 0.828, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.825 0.950 0.912 0.479 0.828 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.09708, "loss_rpn_cls": 0.01165, "loss_rpn_bbox": 0.04936, "loss_cls": 0.10851, "acc": 96.00235, "loss_bbox": 0.14116, "loss": 0.31068, "time": 0.40271}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07419, "loss_rpn_cls": 0.00565, "loss_rpn_bbox": 0.04667, "loss_cls": 0.08187, "acc": 96.9209, "loss_bbox": 0.13401, "loss": 0.2682, "time": 0.64359}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01383, "loss_rpn_cls": 0.00519, "loss_rpn_bbox": 0.04724, "loss_cls": 0.08371, "acc": 96.8291, "loss_bbox": 0.13398, "loss": 0.27012, "time": 0.57854}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.05, "bbox_mAP": 0.819, "bbox_mAP_50": 0.951, "bbox_mAP_75": 0.918, "bbox_mAP_s": 0.45, "bbox_mAP_m": 0.823, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.819 0.951 0.918 0.450 0.823 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.10005, "loss_rpn_cls": 0.01176, "loss_rpn_bbox": 0.05409, "loss_cls": 0.1117, "acc": 95.81268, "loss_bbox": 0.14891, "loss": 0.32646, "time": 0.41453}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.05, "memory": 5908, "data_time": 0.07341, "loss_rpn_cls": 0.00467, "loss_rpn_bbox": 0.04316, "loss_cls": 0.08549, "acc": 96.75732, "loss_bbox": 0.13243, "loss": 0.26575, "time": 0.64498}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.05, "memory": 5908, "data_time": 0.01425, "loss_rpn_cls": 0.00581, "loss_rpn_bbox": 0.0486, "loss_cls": 0.086, "acc": 96.72363, "loss_bbox": 0.13822, "loss": 0.27863, "time": 0.59238}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.05, "bbox_mAP": 0.8, "bbox_mAP_50": 0.948, "bbox_mAP_75": 0.91, "bbox_mAP_s": 0.376, "bbox_mAP_m": 0.803, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.800 0.948 0.910 0.376 0.803 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.05, "memory": 5908, "data_time": 0.09282, "loss_rpn_cls": 0.01055, "loss_rpn_bbox": 0.05806, "loss_cls": 0.10492, "acc": 96.08874, "loss_bbox": 0.15361, "loss": 0.32714, "time": 0.40041}
