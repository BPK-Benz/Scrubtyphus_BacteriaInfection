{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/faster_rcnn_r50_fpn_2x_coco_bbox_mAP-0.384_20200504_210434-a5d8aa15.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='ShiftScaleRotate',\n        shift_limit=0.0625,\n        scale_limit=0,\n        rotate_limit=0,\n        interpolation=1,\n        p=0.75),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/FasterRCNN_R50_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 402330812, "exp_name": "faster_rcnn_r50_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00495, "memory": 9224, "data_time": 0.08012, "loss_rpn_cls": 0.1515, "loss_rpn_bbox": 0.10887, "loss_cls": 0.5488, "acc": 78.22314, "loss_bbox": 0.49023, "loss": 1.2994, "time": 0.81619}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 9364, "data_time": 0.02272, "loss_rpn_cls": 0.01252, "loss_rpn_bbox": 0.06603, "loss_cls": 0.26335, "acc": 90.18799, "loss_bbox": 0.20368, "loss": 0.54558, "time": 0.76863}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01104, "bbox_mAP": 0.728, "bbox_mAP_50": 0.888, "bbox_mAP_75": 0.846, "bbox_mAP_s": 0.486, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.728 0.888 0.846 0.486 0.733 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.01104, "memory": 9364, "data_time": 0.09153, "loss_rpn_cls": 0.01323, "loss_rpn_bbox": 0.07397, "loss_cls": 0.1834, "acc": 93.35687, "loss_bbox": 0.19763, "loss": 0.46823, "time": 0.49265}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01603, "memory": 9398, "data_time": 0.07267, "loss_rpn_cls": 0.01118, "loss_rpn_bbox": 0.07238, "loss_cls": 0.17959, "acc": 93.37793, "loss_bbox": 0.1873, "loss": 0.45045, "time": 0.80999}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02103, "memory": 9398, "data_time": 0.02251, "loss_rpn_cls": 0.01111, "loss_rpn_bbox": 0.07366, "loss_cls": 0.16057, "acc": 93.95654, "loss_bbox": 0.17789, "loss": 0.42323, "time": 0.76149}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.02213, "bbox_mAP": 0.763, "bbox_mAP_50": 0.922, "bbox_mAP_75": 0.881, "bbox_mAP_s": 0.42, "bbox_mAP_m": 0.767, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.763 0.922 0.881 0.420 0.767 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.02213, "memory": 9398, "data_time": 0.09365, "loss_rpn_cls": 0.01283, "loss_rpn_bbox": 0.06352, "loss_cls": 0.15874, "acc": 94.0918, "loss_bbox": 0.18154, "loss": 0.41663, "time": 0.48865}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02712, "memory": 9398, "data_time": 0.07799, "loss_rpn_cls": 0.00981, "loss_rpn_bbox": 0.06923, "loss_cls": 0.13909, "acc": 94.78174, "loss_bbox": 0.17521, "loss": 0.39334, "time": 0.81816}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.03212, "memory": 9398, "data_time": 0.02314, "loss_rpn_cls": 0.0112, "loss_rpn_bbox": 0.07029, "loss_cls": 0.14384, "acc": 94.4834, "loss_bbox": 0.17759, "loss": 0.40292, "time": 0.77488}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.03322, "bbox_mAP": 0.769, "bbox_mAP_50": 0.924, "bbox_mAP_75": 0.89, "bbox_mAP_s": 0.387, "bbox_mAP_m": 0.773, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.769 0.924 0.890 0.387 0.773 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.03322, "memory": 9398, "data_time": 0.09139, "loss_rpn_cls": 0.02033, "loss_rpn_bbox": 0.08001, "loss_cls": 0.16644, "acc": 93.67864, "loss_bbox": 0.19364, "loss": 0.46041, "time": 0.49001}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.03821, "memory": 9398, "data_time": 0.07839, "loss_rpn_cls": 0.01087, "loss_rpn_bbox": 0.07014, "loss_cls": 0.13773, "acc": 94.85156, "loss_bbox": 0.17417, "loss": 0.39291, "time": 0.82672}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.04321, "memory": 9398, "data_time": 0.02389, "loss_rpn_cls": 0.01084, "loss_rpn_bbox": 0.07138, "loss_cls": 0.1423, "acc": 94.64941, "loss_bbox": 0.17657, "loss": 0.4011, "time": 0.78201}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.04431, "bbox_mAP": 0.799, "bbox_mAP_50": 0.936, "bbox_mAP_75": 0.899, "bbox_mAP_s": 0.432, "bbox_mAP_m": 0.803, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.799 0.936 0.899 0.432 0.803 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.04431, "memory": 9398, "data_time": 0.09445, "loss_rpn_cls": 0.01332, "loss_rpn_bbox": 0.07692, "loss_cls": 0.15211, "acc": 94.26144, "loss_bbox": 0.17074, "loss": 0.41309, "time": 0.49371}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0493, "memory": 9398, "data_time": 0.07681, "loss_rpn_cls": 0.01102, "loss_rpn_bbox": 0.06784, "loss_cls": 0.13146, "acc": 95.11816, "loss_bbox": 0.1745, "loss": 0.38482, "time": 0.83613}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 9398, "data_time": 0.02348, "loss_rpn_cls": 0.01068, "loss_rpn_bbox": 0.06748, "loss_cls": 0.12962, "acc": 95.12598, "loss_bbox": 0.16866, "loss": 0.37643, "time": 0.79667}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.787, "bbox_mAP_50": 0.941, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.466, "bbox_mAP_m": 0.791, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.787 0.941 0.905 0.466 0.791 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.05, "memory": 9398, "data_time": 0.09529, "loss_rpn_cls": 0.01416, "loss_rpn_bbox": 0.06433, "loss_cls": 0.13942, "acc": 94.81733, "loss_bbox": 0.17651, "loss": 0.39442, "time": 0.50243}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07658, "loss_rpn_cls": 0.00977, "loss_rpn_bbox": 0.06262, "loss_cls": 0.12443, "acc": 95.34375, "loss_bbox": 0.16921, "loss": 0.36603, "time": 0.83043}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02927, "loss_rpn_cls": 0.01023, "loss_rpn_bbox": 0.06365, "loss_cls": 0.12218, "acc": 95.47021, "loss_bbox": 0.16172, "loss": 0.35778, "time": 0.79413}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.791, "bbox_mAP_50": 0.939, "bbox_mAP_75": 0.901, "bbox_mAP_s": 0.421, "bbox_mAP_m": 0.795, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.791 0.939 0.901 0.421 0.795 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.08309, "loss_rpn_cls": 0.01661, "loss_rpn_bbox": 0.05866, "loss_cls": 0.12535, "acc": 95.22423, "loss_bbox": 0.16135, "loss": 0.36197, "time": 0.47853}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07698, "loss_rpn_cls": 0.00811, "loss_rpn_bbox": 0.05808, "loss_cls": 0.11155, "acc": 95.81982, "loss_bbox": 0.16119, "loss": 0.33893, "time": 0.84512}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02322, "loss_rpn_cls": 0.00831, "loss_rpn_bbox": 0.05756, "loss_cls": 0.1123, "acc": 95.74561, "loss_bbox": 0.15495, "loss": 0.33312, "time": 0.79498}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.789, "bbox_mAP_50": 0.933, "bbox_mAP_75": 0.895, "bbox_mAP_s": 0.383, "bbox_mAP_m": 0.793, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.789 0.933 0.895 0.383 0.793 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.0907, "loss_rpn_cls": 0.01421, "loss_rpn_bbox": 0.05647, "loss_cls": 0.12921, "acc": 95.31187, "loss_bbox": 0.18145, "loss": 0.38134, "time": 0.48814}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07725, "loss_rpn_cls": 0.00771, "loss_rpn_bbox": 0.05503, "loss_cls": 0.10574, "acc": 96.04346, "loss_bbox": 0.1522, "loss": 0.32068, "time": 0.83614}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02308, "loss_rpn_cls": 0.00649, "loss_rpn_bbox": 0.05179, "loss_cls": 0.10551, "acc": 95.93164, "loss_bbox": 0.15212, "loss": 0.31591, "time": 0.78718}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.791, "bbox_mAP_50": 0.932, "bbox_mAP_75": 0.9, "bbox_mAP_s": 0.439, "bbox_mAP_m": 0.795, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.791 0.932 0.900 0.439 0.795 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.09474, "loss_rpn_cls": 0.01163, "loss_rpn_bbox": 0.06792, "loss_cls": 0.13221, "acc": 95.06961, "loss_bbox": 0.16355, "loss": 0.37531, "time": 0.49985}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07263, "loss_rpn_cls": 0.0069, "loss_rpn_bbox": 0.05036, "loss_cls": 0.09954, "acc": 96.28369, "loss_bbox": 0.14349, "loss": 0.30028, "time": 0.83474}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02354, "loss_rpn_cls": 0.00651, "loss_rpn_bbox": 0.05218, "loss_cls": 0.09964, "acc": 96.16699, "loss_bbox": 0.14645, "loss": 0.30478, "time": 0.7949}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.05, "bbox_mAP": 0.809, "bbox_mAP_50": 0.949, "bbox_mAP_75": 0.915, "bbox_mAP_s": 0.516, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.809 0.949 0.915 0.516 0.813 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.09155, "loss_rpn_cls": 0.01076, "loss_rpn_bbox": 0.05439, "loss_cls": 0.10484, "acc": 96.05932, "loss_bbox": 0.15171, "loss": 0.3217, "time": 0.49287}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07345, "loss_rpn_cls": 0.0057, "loss_rpn_bbox": 0.04991, "loss_cls": 0.09768, "acc": 96.35303, "loss_bbox": 0.14035, "loss": 0.29364, "time": 0.84186}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02323, "loss_rpn_cls": 0.00648, "loss_rpn_bbox": 0.05083, "loss_cls": 0.09602, "acc": 96.35498, "loss_bbox": 0.1425, "loss": 0.29584, "time": 0.79375}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.05, "bbox_mAP": 0.786, "bbox_mAP_50": 0.924, "bbox_mAP_75": 0.888, "bbox_mAP_s": 0.414, "bbox_mAP_m": 0.789, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.786 0.924 0.888 0.414 0.789 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.0881, "loss_rpn_cls": 0.01302, "loss_rpn_bbox": 0.05432, "loss_cls": 0.13316, "acc": 95.22674, "loss_bbox": 0.15611, "loss": 0.35661, "time": 0.49551}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07318, "loss_rpn_cls": 0.00652, "loss_rpn_bbox": 0.05396, "loss_cls": 0.09367, "acc": 96.47363, "loss_bbox": 0.14345, "loss": 0.2976, "time": 0.82261}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02413, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.0516, "loss_cls": 0.09056, "acc": 96.52734, "loss_bbox": 0.14361, "loss": 0.2924, "time": 0.79782}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.05, "bbox_mAP": 0.807, "bbox_mAP_50": 0.939, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.482, "bbox_mAP_m": 0.81, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.807 0.939 0.905 0.482 0.810 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.09, "loss_rpn_cls": 0.01434, "loss_rpn_bbox": 0.06058, "loss_cls": 0.11279, "acc": 95.76635, "loss_bbox": 0.15594, "loss": 0.34365, "time": 0.49032}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07603, "loss_rpn_cls": 0.00634, "loss_rpn_bbox": 0.04671, "loss_cls": 0.08929, "acc": 96.60449, "loss_bbox": 0.13745, "loss": 0.27979, "time": 0.82934}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.0245, "loss_rpn_cls": 0.00532, "loss_rpn_bbox": 0.04574, "loss_cls": 0.0868, "acc": 96.75244, "loss_bbox": 0.13578, "loss": 0.27364, "time": 0.79208}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.05, "bbox_mAP": 0.81, "bbox_mAP_50": 0.947, "bbox_mAP_75": 0.913, "bbox_mAP_s": 0.451, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.810 0.947 0.913 0.451 0.813 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.09141, "loss_rpn_cls": 0.01325, "loss_rpn_bbox": 0.04627, "loss_cls": 0.1055, "acc": 95.99484, "loss_bbox": 0.14847, "loss": 0.31349, "time": 0.48824}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07105, "loss_rpn_cls": 0.00541, "loss_rpn_bbox": 0.0485, "loss_cls": 0.08161, "acc": 96.93701, "loss_bbox": 0.13527, "loss": 0.27079, "time": 0.82982}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02352, "loss_rpn_cls": 0.00603, "loss_rpn_bbox": 0.04824, "loss_cls": 0.08881, "acc": 96.70068, "loss_bbox": 0.13781, "loss": 0.28089, "time": 0.7973}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.05, "bbox_mAP": 0.816, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.916, "bbox_mAP_s": 0.337, "bbox_mAP_m": 0.819, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.816 0.946 0.916 0.337 0.819 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.09449, "loss_rpn_cls": 0.01265, "loss_rpn_bbox": 0.04593, "loss_cls": 0.10708, "acc": 96.01425, "loss_bbox": 0.144, "loss": 0.30967, "time": 0.50346}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07506, "loss_rpn_cls": 0.00556, "loss_rpn_bbox": 0.04823, "loss_cls": 0.0827, "acc": 96.85645, "loss_bbox": 0.13407, "loss": 0.27057, "time": 0.83516}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02347, "loss_rpn_cls": 0.00578, "loss_rpn_bbox": 0.04891, "loss_cls": 0.08075, "acc": 96.94727, "loss_bbox": 0.1333, "loss": 0.26874, "time": 0.802}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.05, "bbox_mAP": 0.812, "bbox_mAP_50": 0.946, "bbox_mAP_75": 0.906, "bbox_mAP_s": 0.597, "bbox_mAP_m": 0.816, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.812 0.946 0.906 0.597 0.816 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.09121, "loss_rpn_cls": 0.01103, "loss_rpn_bbox": 0.04811, "loss_cls": 0.10689, "acc": 95.94789, "loss_bbox": 0.14724, "loss": 0.31327, "time": 0.48693}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.05, "memory": 9413, "data_time": 0.07265, "loss_rpn_cls": 0.00544, "loss_rpn_bbox": 0.04744, "loss_cls": 0.08312, "acc": 96.90088, "loss_bbox": 0.13377, "loss": 0.26977, "time": 0.83158}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.05, "memory": 9413, "data_time": 0.02537, "loss_rpn_cls": 0.00559, "loss_rpn_bbox": 0.0476, "loss_cls": 0.08268, "acc": 96.90186, "loss_bbox": 0.1325, "loss": 0.26837, "time": 0.79262}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.05, "bbox_mAP": 0.821, "bbox_mAP_50": 0.951, "bbox_mAP_75": 0.916, "bbox_mAP_s": 0.514, "bbox_mAP_m": 0.824, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.821 0.951 0.916 0.514 0.824 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.05, "memory": 9413, "data_time": 0.08934, "loss_rpn_cls": 0.01431, "loss_rpn_bbox": 0.05473, "loss_cls": 0.11286, "acc": 95.88341, "loss_bbox": 0.14654, "loss": 0.32844, "time": 0.48942}
