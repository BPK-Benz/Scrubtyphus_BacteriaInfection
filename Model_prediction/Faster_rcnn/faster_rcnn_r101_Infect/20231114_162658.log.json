{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/faster_rcnn_r101_fpn_2x_coco_bbox_mAP-0.398_20200504_210455-1d2dac9c.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/FasterRCNN_R101_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 557685321, "exp_name": "faster_rcnn_r101_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00495, "memory": 14372, "data_time": 0.07008, "loss_rpn_cls": 0.16103, "loss_rpn_bbox": 0.11901, "loss_cls": 0.55447, "acc": 78.14941, "loss_bbox": 0.4796, "loss": 1.31412, "time": 1.145}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 14520, "data_time": 0.02747, "loss_rpn_cls": 0.01079, "loss_rpn_bbox": 0.0705, "loss_cls": 0.25637, "acc": 90.55957, "loss_bbox": 0.20788, "loss": 0.54554, "time": 1.1398}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01104, "bbox_mAP": 0.73, "bbox_mAP_50": 0.893, "bbox_mAP_75": 0.846, "bbox_mAP_s": 0.446, "bbox_mAP_m": 0.734, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.730 0.893 0.846 0.446 0.734 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.01104, "memory": 14520, "data_time": 0.09388, "loss_rpn_cls": 0.01464, "loss_rpn_bbox": 0.08208, "loss_cls": 0.19357, "acc": 92.96687, "loss_bbox": 0.1838, "loss": 0.47409, "time": 0.56861}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01603, "memory": 14529, "data_time": 0.07438, "loss_rpn_cls": 0.00859, "loss_rpn_bbox": 0.06533, "loss_cls": 0.17427, "acc": 93.65527, "loss_bbox": 0.18592, "loss": 0.43411, "time": 1.19838}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02103, "memory": 14529, "data_time": 0.02962, "loss_rpn_cls": 0.01133, "loss_rpn_bbox": 0.07151, "loss_cls": 0.16563, "acc": 93.84473, "loss_bbox": 0.18301, "loss": 0.43148, "time": 1.16234}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.02213, "bbox_mAP": 0.741, "bbox_mAP_50": 0.914, "bbox_mAP_75": 0.874, "bbox_mAP_s": 0.398, "bbox_mAP_m": 0.745, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.741 0.914 0.874 0.398 0.745 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.02213, "memory": 14529, "data_time": 0.1004, "loss_rpn_cls": 0.01558, "loss_rpn_bbox": 0.06842, "loss_cls": 0.18745, "acc": 93.17658, "loss_bbox": 0.19523, "loss": 0.46669, "time": 0.58098}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02712, "memory": 14529, "data_time": 0.07389, "loss_rpn_cls": 0.01033, "loss_rpn_bbox": 0.0704, "loss_cls": 0.15199, "acc": 94.40723, "loss_bbox": 0.17949, "loss": 0.41221, "time": 1.20914}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.03212, "memory": 14529, "data_time": 0.03129, "loss_rpn_cls": 0.01012, "loss_rpn_bbox": 0.07034, "loss_cls": 0.14475, "acc": 94.62402, "loss_bbox": 0.17686, "loss": 0.40208, "time": 1.16879}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.03322, "bbox_mAP": 0.776, "bbox_mAP_50": 0.932, "bbox_mAP_75": 0.895, "bbox_mAP_s": 0.418, "bbox_mAP_m": 0.78, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.776 0.932 0.895 0.418 0.780 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.03322, "memory": 14529, "data_time": 0.08855, "loss_rpn_cls": 0.01547, "loss_rpn_bbox": 0.07018, "loss_cls": 0.15698, "acc": 94.32029, "loss_bbox": 0.18808, "loss": 0.43071, "time": 0.56368}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.03821, "memory": 14529, "data_time": 0.08089, "loss_rpn_cls": 0.01028, "loss_rpn_bbox": 0.07029, "loss_cls": 0.14624, "acc": 94.66113, "loss_bbox": 0.17505, "loss": 0.40185, "time": 1.21754}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.04321, "memory": 14529, "data_time": 0.02909, "loss_rpn_cls": 0.011, "loss_rpn_bbox": 0.07054, "loss_cls": 0.14148, "acc": 94.7373, "loss_bbox": 0.17894, "loss": 0.40196, "time": 1.16486}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.04431, "bbox_mAP": 0.778, "bbox_mAP_50": 0.937, "bbox_mAP_75": 0.896, "bbox_mAP_s": 0.524, "bbox_mAP_m": 0.782, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.778 0.937 0.896 0.524 0.782 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.04431, "memory": 14529, "data_time": 0.08358, "loss_rpn_cls": 0.01379, "loss_rpn_bbox": 0.06743, "loss_cls": 0.13975, "acc": 94.78353, "loss_bbox": 0.18184, "loss": 0.40281, "time": 0.5561}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0493, "memory": 14529, "data_time": 0.07741, "loss_rpn_cls": 0.01004, "loss_rpn_bbox": 0.06809, "loss_cls": 0.13346, "acc": 95.02148, "loss_bbox": 0.17263, "loss": 0.38422, "time": 1.2205}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02843, "loss_rpn_cls": 0.00998, "loss_rpn_bbox": 0.06628, "loss_cls": 0.1384, "acc": 95.00342, "loss_bbox": 0.16877, "loss": 0.38343, "time": 1.16568}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.801, "bbox_mAP_50": 0.933, "bbox_mAP_75": 0.902, "bbox_mAP_s": 0.497, "bbox_mAP_m": 0.805, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.801 0.933 0.902 0.497 0.805 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.09279, "loss_rpn_cls": 0.01363, "loss_rpn_bbox": 0.05464, "loss_cls": 0.13509, "acc": 95.10717, "loss_bbox": 0.16084, "loss": 0.3642, "time": 0.56965}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.078, "loss_rpn_cls": 0.00806, "loss_rpn_bbox": 0.06239, "loss_cls": 0.12745, "acc": 95.25342, "loss_bbox": 0.16707, "loss": 0.36497, "time": 1.21571}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.03019, "loss_rpn_cls": 0.00965, "loss_rpn_bbox": 0.06071, "loss_cls": 0.12283, "acc": 95.4751, "loss_bbox": 0.16291, "loss": 0.3561, "time": 1.17902}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.794, "bbox_mAP_50": 0.943, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.441, "bbox_mAP_m": 0.798, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.943 0.905 0.441 0.798 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.08885, "loss_rpn_cls": 0.01467, "loss_rpn_bbox": 0.06487, "loss_cls": 0.12436, "acc": 95.40014, "loss_bbox": 0.16477, "loss": 0.36868, "time": 0.56931}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07567, "loss_rpn_cls": 0.00805, "loss_rpn_bbox": 0.05648, "loss_cls": 0.11157, "acc": 95.82129, "loss_bbox": 0.15774, "loss": 0.33383, "time": 1.22293}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.03017, "loss_rpn_cls": 0.00901, "loss_rpn_bbox": 0.06052, "loss_cls": 0.10924, "acc": 95.9165, "loss_bbox": 0.15575, "loss": 0.33451, "time": 1.18767}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.803, "bbox_mAP_50": 0.944, "bbox_mAP_75": 0.908, "bbox_mAP_s": 0.417, "bbox_mAP_m": 0.806, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.803 0.944 0.908 0.417 0.806 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.0968, "loss_rpn_cls": 0.0111, "loss_rpn_bbox": 0.05634, "loss_cls": 0.11909, "acc": 95.42768, "loss_bbox": 0.17043, "loss": 0.35695, "time": 0.57725}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.06954, "loss_rpn_cls": 0.00771, "loss_rpn_bbox": 0.05847, "loss_cls": 0.10715, "acc": 95.9248, "loss_bbox": 0.15401, "loss": 0.32734, "time": 1.20738}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.03048, "loss_rpn_cls": 0.00711, "loss_rpn_bbox": 0.05148, "loss_cls": 0.09935, "acc": 96.32227, "loss_bbox": 0.14966, "loss": 0.3076, "time": 1.17261}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.81, "bbox_mAP_50": 0.939, "bbox_mAP_75": 0.904, "bbox_mAP_s": 0.424, "bbox_mAP_m": 0.814, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.810 0.939 0.904 0.424 0.814 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.09176, "loss_rpn_cls": 0.01106, "loss_rpn_bbox": 0.05991, "loss_cls": 0.12116, "acc": 95.57792, "loss_bbox": 0.15181, "loss": 0.34393, "time": 0.5724}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07365, "loss_rpn_cls": 0.00728, "loss_rpn_bbox": 0.05234, "loss_cls": 0.09974, "acc": 96.30322, "loss_bbox": 0.14882, "loss": 0.30818, "time": 1.22355}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02903, "loss_rpn_cls": 0.00679, "loss_rpn_bbox": 0.05366, "loss_cls": 0.1035, "acc": 96.1665, "loss_bbox": 0.15035, "loss": 0.31431, "time": 1.17169}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.05, "bbox_mAP": 0.808, "bbox_mAP_50": 0.944, "bbox_mAP_75": 0.909, "bbox_mAP_s": 0.468, "bbox_mAP_m": 0.811, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.808 0.944 0.909 0.468 0.811 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.09611, "loss_rpn_cls": 0.01549, "loss_rpn_bbox": 0.05037, "loss_cls": 0.12519, "acc": 95.29685, "loss_bbox": 0.1595, "loss": 0.35055, "time": 0.57347}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07764, "loss_rpn_cls": 0.00622, "loss_rpn_bbox": 0.05251, "loss_cls": 0.09413, "acc": 96.47559, "loss_bbox": 0.14208, "loss": 0.29494, "time": 1.22406}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02985, "loss_rpn_cls": 0.00702, "loss_rpn_bbox": 0.05097, "loss_cls": 0.09886, "acc": 96.36133, "loss_bbox": 0.14414, "loss": 0.30099, "time": 1.18925}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.05, "bbox_mAP": 0.82, "bbox_mAP_50": 0.947, "bbox_mAP_75": 0.912, "bbox_mAP_s": 0.465, "bbox_mAP_m": 0.823, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.820 0.947 0.912 0.465 0.823 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.08994, "loss_rpn_cls": 0.01201, "loss_rpn_bbox": 0.05659, "loss_cls": 0.11629, "acc": 95.55601, "loss_bbox": 0.15331, "loss": 0.33819, "time": 0.56417}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07446, "loss_rpn_cls": 0.00589, "loss_rpn_bbox": 0.04928, "loss_cls": 0.08841, "acc": 96.64014, "loss_bbox": 0.1403, "loss": 0.28389, "time": 1.21885}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02977, "loss_rpn_cls": 0.00578, "loss_rpn_bbox": 0.05023, "loss_cls": 0.09326, "acc": 96.55078, "loss_bbox": 0.13998, "loss": 0.28924, "time": 1.1712}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.05, "bbox_mAP": 0.803, "bbox_mAP_50": 0.937, "bbox_mAP_75": 0.896, "bbox_mAP_s": 0.435, "bbox_mAP_m": 0.806, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.803 0.937 0.896 0.435 0.806 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.09315, "loss_rpn_cls": 0.01141, "loss_rpn_bbox": 0.05418, "loss_cls": 0.13679, "acc": 94.86992, "loss_bbox": 0.15459, "loss": 0.35698, "time": 0.5707}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07484, "loss_rpn_cls": 0.00577, "loss_rpn_bbox": 0.04933, "loss_cls": 0.09152, "acc": 96.54541, "loss_bbox": 0.14141, "loss": 0.28802, "time": 1.2215}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02983, "loss_rpn_cls": 0.00643, "loss_rpn_bbox": 0.04979, "loss_cls": 0.08995, "acc": 96.59863, "loss_bbox": 0.13881, "loss": 0.28498, "time": 1.17913}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.05, "bbox_mAP": 0.81, "bbox_mAP_50": 0.943, "bbox_mAP_75": 0.905, "bbox_mAP_s": 0.46, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.810 0.943 0.905 0.460 0.813 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.09467, "loss_rpn_cls": 0.0107, "loss_rpn_bbox": 0.05094, "loss_cls": 0.11627, "acc": 95.705, "loss_bbox": 0.14735, "loss": 0.32527, "time": 0.57249}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07481, "loss_rpn_cls": 0.00562, "loss_rpn_bbox": 0.04785, "loss_cls": 0.07969, "acc": 97.03467, "loss_bbox": 0.13248, "loss": 0.26565, "time": 1.22873}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.0295, "loss_rpn_cls": 0.00542, "loss_rpn_bbox": 0.04656, "loss_cls": 0.08378, "acc": 96.83398, "loss_bbox": 0.13395, "loss": 0.26971, "time": 1.1797}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.05, "bbox_mAP": 0.816, "bbox_mAP_50": 0.944, "bbox_mAP_75": 0.911, "bbox_mAP_s": 0.466, "bbox_mAP_m": 0.819, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.816 0.944 0.911 0.466 0.819 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.08689, "loss_rpn_cls": 0.01146, "loss_rpn_bbox": 0.04698, "loss_cls": 0.11558, "acc": 95.69624, "loss_bbox": 0.14467, "loss": 0.31869, "time": 0.56654}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07384, "loss_rpn_cls": 0.00554, "loss_rpn_bbox": 0.04829, "loss_cls": 0.08043, "acc": 97.00391, "loss_bbox": 0.13795, "loss": 0.27221, "time": 1.22913}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02933, "loss_rpn_cls": 0.00619, "loss_rpn_bbox": 0.04743, "loss_cls": 0.08109, "acc": 96.91455, "loss_bbox": 0.13214, "loss": 0.26684, "time": 1.18293}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.05, "bbox_mAP": 0.804, "bbox_mAP_50": 0.941, "bbox_mAP_75": 0.902, "bbox_mAP_s": 0.368, "bbox_mAP_m": 0.808, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.804 0.941 0.902 0.368 0.808 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.08438, "loss_rpn_cls": 0.01465, "loss_rpn_bbox": 0.04566, "loss_cls": 0.11126, "acc": 96.03115, "loss_bbox": 0.14487, "loss": 0.31645, "time": 0.55132}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.05, "memory": 14529, "data_time": 0.07181, "loss_rpn_cls": 0.00461, "loss_rpn_bbox": 0.04612, "loss_cls": 0.0778, "acc": 97.05225, "loss_bbox": 0.1314, "loss": 0.25994, "time": 1.21827}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.05, "memory": 14529, "data_time": 0.02791, "loss_rpn_cls": 0.00495, "loss_rpn_bbox": 0.04535, "loss_cls": 0.07715, "acc": 97.13428, "loss_bbox": 0.12879, "loss": 0.25625, "time": 1.17236}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.05, "bbox_mAP": 0.826, "bbox_mAP_50": 0.949, "bbox_mAP_75": 0.915, "bbox_mAP_s": 0.476, "bbox_mAP_m": 0.829, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.826 0.949 0.915 0.476 0.829 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.05, "memory": 14529, "data_time": 0.0913, "loss_rpn_cls": 0.01367, "loss_rpn_bbox": 0.04907, "loss_cls": 0.09744, "acc": 96.31786, "loss_bbox": 0.14421, "loss": 0.30439, "time": 0.56351}
