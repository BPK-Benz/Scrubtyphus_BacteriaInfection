{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/cascade_mask_rcnn_r50_fpn_1x_coco_20200203-9d4dcb24.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.5],\n        contrast_limit=[0.1, 0.5],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.5)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/CasecadeMask_R50_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 869571651, "exp_name": "cascade_mask_rcnn_r50_InfectNuc.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 9929, "data_time": 0.83812, "loss_rpn_cls": 0.07167, "loss_rpn_bbox": 0.03958, "s0.loss_cls": 0.3733, "s0.acc": 85.36992, "s0.loss_bbox": 0.08541, "s0.loss_mask": 0.22043, "s1.loss_cls": 0.21164, "s1.acc": 83.06674, "s1.loss_bbox": 0.07582, "s1.loss_mask": 0.12016, "s2.loss_cls": 0.11369, "s2.acc": 82.35231, "s2.loss_bbox": 0.04666, "s2.loss_mask": 0.06481, "loss": 1.42315, "time": 1.81141}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01773, "bbox_mAP": 0.7, "bbox_mAP_50": 0.803, "bbox_mAP_75": 0.772, "bbox_mAP_s": 0.259, "bbox_mAP_m": 0.701, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.700 0.803 0.772 0.259 0.701 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.01773, "memory": 9929, "data_time": 2.36708, "loss_rpn_cls": 0.01281, "loss_rpn_bbox": 0.03414, "s0.loss_cls": 0.13574, "s0.acc": 94.82949, "s0.loss_bbox": 0.04676, "s0.loss_mask": 0.11577, "s1.loss_cls": 0.07169, "s1.acc": 94.5863, "s1.loss_bbox": 0.05122, "s1.loss_mask": 0.06112, "s2.loss_cls": 0.03896, "s2.acc": 94.09603, "s2.loss_bbox": 0.03632, "s2.loss_mask": 0.02906, "loss": 0.6336, "time": 2.98362}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02772, "memory": 9929, "data_time": 1.41968, "loss_rpn_cls": 0.0105, "loss_rpn_bbox": 0.03044, "s0.loss_cls": 0.1337, "s0.acc": 94.90898, "s0.loss_bbox": 0.04586, "s0.loss_mask": 0.1137, "s1.loss_cls": 0.06819, "s1.acc": 94.95116, "s1.loss_bbox": 0.04746, "s1.loss_mask": 0.05903, "s2.loss_cls": 0.0371, "s2.acc": 94.47756, "s2.loss_bbox": 0.03458, "s2.loss_mask": 0.02868, "loss": 0.60923, "time": 2.40943}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.03551, "bbox_mAP": 0.677, "bbox_mAP_50": 0.78, "bbox_mAP_75": 0.758, "bbox_mAP_s": 0.341, "bbox_mAP_m": 0.678, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.677 0.780 0.758 0.341 0.678 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.03551, "memory": 9929, "data_time": 2.30787, "loss_rpn_cls": 0.01245, "loss_rpn_bbox": 0.02243, "s0.loss_cls": 0.12315, "s0.acc": 95.45325, "s0.loss_bbox": 0.04324, "s0.loss_mask": 0.11078, "s1.loss_cls": 0.06317, "s1.acc": 95.30786, "s1.loss_bbox": 0.04482, "s1.loss_mask": 0.05811, "s2.loss_cls": 0.03547, "s2.acc": 94.64007, "s2.loss_bbox": 0.03523, "s2.loss_mask": 0.02794, "loss": 0.5768, "time": 2.9357}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0455, "memory": 9929, "data_time": 1.36454, "loss_rpn_cls": 0.01001, "loss_rpn_bbox": 0.02667, "s0.loss_cls": 0.11282, "s0.acc": 95.75234, "s0.loss_bbox": 0.04125, "s0.loss_mask": 0.10867, "s1.loss_cls": 0.05953, "s1.acc": 95.61647, "s1.loss_bbox": 0.04342, "s1.loss_mask": 0.05657, "s2.loss_cls": 0.03209, "s2.acc": 95.21762, "s2.loss_bbox": 0.03322, "s2.loss_mask": 0.02776, "loss": 0.55202, "time": 2.35124}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.05, "bbox_mAP": 0.721, "bbox_mAP_50": 0.821, "bbox_mAP_75": 0.799, "bbox_mAP_s": 0.283, "bbox_mAP_m": 0.722, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.721 0.821 0.799 0.283 0.722 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.05, "memory": 9929, "data_time": 2.36158, "loss_rpn_cls": 0.01306, "loss_rpn_bbox": 0.03943, "s0.loss_cls": 0.11008, "s0.acc": 95.82465, "s0.loss_bbox": 0.04562, "s0.loss_mask": 0.11195, "s1.loss_cls": 0.06101, "s1.acc": 95.43374, "s1.loss_bbox": 0.04758, "s1.loss_mask": 0.05718, "s2.loss_cls": 0.03332, "s2.acc": 94.91557, "s2.loss_bbox": 0.03448, "s2.loss_mask": 0.02802, "loss": 0.58174, "time": 2.97388}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.05, "memory": 9929, "data_time": 1.74188, "loss_rpn_cls": 0.0092, "loss_rpn_bbox": 0.02363, "s0.loss_cls": 0.10796, "s0.acc": 95.92539, "s0.loss_bbox": 0.04092, "s0.loss_mask": 0.10847, "s1.loss_cls": 0.05818, "s1.acc": 95.68405, "s1.loss_bbox": 0.04361, "s1.loss_mask": 0.05669, "s2.loss_cls": 0.03159, "s2.acc": 95.26398, "s2.loss_bbox": 0.03257, "s2.loss_mask": 0.02767, "loss": 0.54049, "time": 2.71935}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.05, "bbox_mAP": 0.737, "bbox_mAP_50": 0.836, "bbox_mAP_75": 0.815, "bbox_mAP_s": 0.342, "bbox_mAP_m": 0.737, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.737 0.836 0.815 0.342 0.737 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.05, "memory": 9929, "data_time": 2.26122, "loss_rpn_cls": 0.01163, "loss_rpn_bbox": 0.01683, "s0.loss_cls": 0.11316, "s0.acc": 95.79551, "s0.loss_bbox": 0.04155, "s0.loss_mask": 0.11011, "s1.loss_cls": 0.06059, "s1.acc": 95.52678, "s1.loss_bbox": 0.04375, "s1.loss_mask": 0.05565, "s2.loss_cls": 0.03128, "s2.acc": 95.23794, "s2.loss_bbox": 0.03368, "s2.loss_mask": 0.02746, "loss": 0.54567, "time": 2.87752}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 9929, "data_time": 1.7083, "loss_rpn_cls": 0.00733, "loss_rpn_bbox": 0.01928, "s0.loss_cls": 0.10835, "s0.acc": 95.91133, "s0.loss_bbox": 0.03988, "s0.loss_mask": 0.11, "s1.loss_cls": 0.05851, "s1.acc": 95.60016, "s1.loss_bbox": 0.04329, "s1.loss_mask": 0.05639, "s2.loss_cls": 0.03077, "s2.acc": 95.38191, "s2.loss_bbox": 0.03282, "s2.loss_mask": 0.0279, "loss": 0.53452, "time": 2.69211}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.748, "bbox_mAP_50": 0.844, "bbox_mAP_75": 0.819, "bbox_mAP_s": 0.332, "bbox_mAP_m": 0.748, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.748 0.844 0.819 0.332 0.748 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.05, "memory": 9929, "data_time": 2.18731, "loss_rpn_cls": 0.01191, "loss_rpn_bbox": 0.01721, "s0.loss_cls": 0.09905, "s0.acc": 96.25558, "s0.loss_bbox": 0.03699, "s0.loss_mask": 0.10867, "s1.loss_cls": 0.0595, "s1.acc": 95.52309, "s1.loss_bbox": 0.04174, "s1.loss_mask": 0.05576, "s2.loss_cls": 0.03202, "s2.acc": 95.15931, "s2.loss_bbox": 0.03184, "s2.loss_mask": 0.02738, "loss": 0.52206, "time": 2.80438}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 9929, "data_time": 1.82779, "loss_rpn_cls": 0.00815, "loss_rpn_bbox": 0.01917, "s0.loss_cls": 0.09981, "s0.acc": 96.2707, "s0.loss_bbox": 0.03636, "s0.loss_mask": 0.10696, "s1.loss_cls": 0.05584, "s1.acc": 95.85351, "s1.loss_bbox": 0.03982, "s1.loss_mask": 0.05489, "s2.loss_cls": 0.02942, "s2.acc": 95.57576, "s2.loss_bbox": 0.03137, "s2.loss_mask": 0.0272, "loss": 0.50897, "time": 2.80553}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.739, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.816, "bbox_mAP_s": 0.277, "bbox_mAP_m": 0.74, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.739 0.840 0.816 0.277 0.740 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.05, "memory": 9929, "data_time": 2.16023, "loss_rpn_cls": 0.01117, "loss_rpn_bbox": 0.01866, "s0.loss_cls": 0.09178, "s0.acc": 96.46081, "s0.loss_bbox": 0.04085, "s0.loss_mask": 0.11142, "s1.loss_cls": 0.05173, "s1.acc": 95.98574, "s1.loss_bbox": 0.04429, "s1.loss_mask": 0.05725, "s2.loss_cls": 0.02845, "s2.acc": 95.61662, "s2.loss_bbox": 0.03333, "s2.loss_mask": 0.02856, "loss": 0.51748, "time": 2.77003}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 9929, "data_time": 1.80038, "loss_rpn_cls": 0.00604, "loss_rpn_bbox": 0.01652, "s0.loss_cls": 0.08923, "s0.acc": 96.58125, "s0.loss_bbox": 0.03489, "s0.loss_mask": 0.10768, "s1.loss_cls": 0.0496, "s1.acc": 96.29394, "s1.loss_bbox": 0.03967, "s1.loss_mask": 0.05516, "s2.loss_cls": 0.02626, "s2.acc": 95.98904, "s2.loss_bbox": 0.03177, "s2.loss_mask": 0.02747, "loss": 0.4843, "time": 2.78337}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.758, "bbox_mAP_50": 0.856, "bbox_mAP_75": 0.834, "bbox_mAP_s": 0.251, "bbox_mAP_m": 0.759, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.758 0.856 0.834 0.251 0.759 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.05, "memory": 9929, "data_time": 2.23419, "loss_rpn_cls": 0.0117, "loss_rpn_bbox": 0.02009, "s0.loss_cls": 0.09305, "s0.acc": 96.5594, "s0.loss_bbox": 0.04072, "s0.loss_mask": 0.1129, "s1.loss_cls": 0.05081, "s1.acc": 96.19168, "s1.loss_bbox": 0.03906, "s1.loss_mask": 0.05658, "s2.loss_cls": 0.02832, "s2.acc": 95.73506, "s2.loss_bbox": 0.02854, "s2.loss_mask": 0.02735, "loss": 0.50913, "time": 2.8498}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 9929, "data_time": 1.72608, "loss_rpn_cls": 0.00616, "loss_rpn_bbox": 0.01592, "s0.loss_cls": 0.08945, "s0.acc": 96.56328, "s0.loss_bbox": 0.03593, "s0.loss_mask": 0.10837, "s1.loss_cls": 0.04704, "s1.acc": 96.43923, "s1.loss_bbox": 0.03952, "s1.loss_mask": 0.05611, "s2.loss_cls": 0.0253, "s2.acc": 96.11231, "s2.loss_bbox": 0.03074, "s2.loss_mask": 0.02775, "loss": 0.48229, "time": 2.70814}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.735, "bbox_mAP_50": 0.831, "bbox_mAP_75": 0.809, "bbox_mAP_s": 0.28, "bbox_mAP_m": 0.735, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.735 0.831 0.809 0.280 0.735 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.05, "memory": 9929, "data_time": 2.27344, "loss_rpn_cls": 0.01057, "loss_rpn_bbox": 0.01774, "s0.loss_cls": 0.09251, "s0.acc": 96.5532, "s0.loss_bbox": 0.03956, "s0.loss_mask": 0.10863, "s1.loss_cls": 0.0514, "s1.acc": 96.12849, "s1.loss_bbox": 0.03972, "s1.loss_mask": 0.05598, "s2.loss_cls": 0.02805, "s2.acc": 95.77729, "s2.loss_bbox": 0.03069, "s2.loss_mask": 0.02751, "loss": 0.50235, "time": 2.88473}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 9929, "data_time": 1.83589, "loss_rpn_cls": 0.00595, "loss_rpn_bbox": 0.01043, "s0.loss_cls": 0.06801, "s0.acc": 97.4, "s0.loss_bbox": 0.02798, "s0.loss_mask": 0.10534, "s1.loss_cls": 0.03908, "s1.acc": 97.04247, "s1.loss_bbox": 0.03266, "s1.loss_mask": 0.05353, "s2.loss_cls": 0.02122, "s2.acc": 96.81411, "s2.loss_bbox": 0.02714, "s2.loss_mask": 0.02675, "loss": 0.41808, "time": 2.8214}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.765, "bbox_mAP_50": 0.841, "bbox_mAP_75": 0.821, "bbox_mAP_s": 0.328, "bbox_mAP_m": 0.765, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.765 0.841 0.821 0.328 0.765 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.005, "memory": 9929, "data_time": 2.28355, "loss_rpn_cls": 0.01023, "loss_rpn_bbox": 0.0111, "s0.loss_cls": 0.07549, "s0.acc": 97.19804, "s0.loss_bbox": 0.03179, "s0.loss_mask": 0.10741, "s1.loss_cls": 0.0459, "s1.acc": 96.57378, "s1.loss_bbox": 0.03443, "s1.loss_mask": 0.05341, "s2.loss_cls": 0.02534, "s2.acc": 96.15393, "s2.loss_bbox": 0.02783, "s2.loss_mask": 0.02646, "loss": 0.44938, "time": 2.90677}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 9929, "data_time": 1.77198, "loss_rpn_cls": 0.0037, "loss_rpn_bbox": 0.00924, "s0.loss_cls": 0.06199, "s0.acc": 97.63125, "s0.loss_bbox": 0.02571, "s0.loss_mask": 0.10312, "s1.loss_cls": 0.03599, "s1.acc": 97.23795, "s1.loss_bbox": 0.03106, "s1.loss_mask": 0.05229, "s2.loss_cls": 0.01976, "s2.acc": 97.00363, "s2.loss_bbox": 0.02661, "s2.loss_mask": 0.02636, "loss": 0.39584, "time": 2.75322}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.825, "bbox_mAP_s": 0.328, "bbox_mAP_m": 0.769, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.842 0.825 0.328 0.769 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.005, "memory": 9929, "data_time": 2.31593, "loss_rpn_cls": 0.00964, "loss_rpn_bbox": 0.01109, "s0.loss_cls": 0.07438, "s0.acc": 97.19122, "s0.loss_bbox": 0.03131, "s0.loss_mask": 0.10729, "s1.loss_cls": 0.04502, "s1.acc": 96.55443, "s1.loss_bbox": 0.03531, "s1.loss_mask": 0.05346, "s2.loss_cls": 0.02505, "s2.acc": 96.14186, "s2.loss_bbox": 0.02843, "s2.loss_mask": 0.02662, "loss": 0.4476, "time": 2.93897}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 9929, "data_time": 1.77403, "loss_rpn_cls": 0.00348, "loss_rpn_bbox": 0.00921, "s0.loss_cls": 0.06009, "s0.acc": 97.76953, "s0.loss_bbox": 0.02552, "s0.loss_mask": 0.10347, "s1.loss_cls": 0.03515, "s1.acc": 97.36625, "s1.loss_bbox": 0.03049, "s1.loss_mask": 0.05239, "s2.loss_cls": 0.01942, "s2.acc": 97.07923, "s2.loss_bbox": 0.02614, "s2.loss_mask": 0.02629, "loss": 0.39165, "time": 2.75814}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.772, "bbox_mAP_50": 0.851, "bbox_mAP_75": 0.83, "bbox_mAP_s": 0.328, "bbox_mAP_m": 0.773, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.772 0.851 0.830 0.328 0.773 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.005, "memory": 9929, "data_time": 2.30173, "loss_rpn_cls": 0.01013, "loss_rpn_bbox": 0.01092, "s0.loss_cls": 0.075, "s0.acc": 97.17138, "s0.loss_bbox": 0.03112, "s0.loss_mask": 0.10824, "s1.loss_cls": 0.04593, "s1.acc": 96.51196, "s1.loss_bbox": 0.0346, "s1.loss_mask": 0.05352, "s2.loss_cls": 0.02509, "s2.acc": 96.20709, "s2.loss_bbox": 0.02788, "s2.loss_mask": 0.02666, "loss": 0.44911, "time": 2.92154}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0005, "memory": 9929, "data_time": 1.76812, "loss_rpn_cls": 0.00383, "loss_rpn_bbox": 0.00887, "s0.loss_cls": 0.05929, "s0.acc": 97.75352, "s0.loss_bbox": 0.02555, "s0.loss_mask": 0.10465, "s1.loss_cls": 0.03522, "s1.acc": 97.3635, "s1.loss_bbox": 0.03091, "s1.loss_mask": 0.05298, "s2.loss_cls": 0.01909, "s2.acc": 97.15247, "s2.loss_bbox": 0.02633, "s2.loss_mask": 0.02656, "loss": 0.39325, "time": 2.75003}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.77, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.825, "bbox_mAP_s": 0.337, "bbox_mAP_m": 0.77, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.770 0.845 0.825 0.337 0.770 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.0005, "memory": 9929, "data_time": 2.30343, "loss_rpn_cls": 0.00916, "loss_rpn_bbox": 0.01049, "s0.loss_cls": 0.07325, "s0.acc": 97.24888, "s0.loss_bbox": 0.03086, "s0.loss_mask": 0.10719, "s1.loss_cls": 0.04484, "s1.acc": 96.64965, "s1.loss_bbox": 0.03426, "s1.loss_mask": 0.05324, "s2.loss_cls": 0.02482, "s2.acc": 96.29642, "s2.loss_bbox": 0.02814, "s2.loss_mask": 0.02662, "loss": 0.44286, "time": 2.9246}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0005, "memory": 9929, "data_time": 1.55277, "loss_rpn_cls": 0.00315, "loss_rpn_bbox": 0.00868, "s0.loss_cls": 0.05884, "s0.acc": 97.7957, "s0.loss_bbox": 0.02535, "s0.loss_mask": 0.10334, "s1.loss_cls": 0.03502, "s1.acc": 97.38101, "s1.loss_bbox": 0.03092, "s1.loss_mask": 0.05227, "s2.loss_cls": 0.01907, "s2.acc": 97.10424, "s2.loss_bbox": 0.02639, "s2.loss_mask": 0.02629, "loss": 0.38931, "time": 2.53786}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.769, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.825, "bbox_mAP_s": 0.337, "bbox_mAP_m": 0.77, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.769 0.842 0.825 0.337 0.770 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.0005, "memory": 9929, "data_time": 1.65538, "loss_rpn_cls": 0.00863, "loss_rpn_bbox": 0.01034, "s0.loss_cls": 0.07604, "s0.acc": 97.16022, "s0.loss_bbox": 0.03115, "s0.loss_mask": 0.10773, "s1.loss_cls": 0.04535, "s1.acc": 96.55538, "s1.loss_bbox": 0.03437, "s1.loss_mask": 0.0535, "s2.loss_cls": 0.02483, "s2.acc": 96.24885, "s2.loss_bbox": 0.02772, "s2.loss_mask": 0.0267, "loss": 0.44634, "time": 2.27246}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0005, "memory": 9929, "data_time": 1.6758, "loss_rpn_cls": 0.00383, "loss_rpn_bbox": 0.00885, "s0.loss_cls": 0.05836, "s0.acc": 97.80039, "s0.loss_bbox": 0.025, "s0.loss_mask": 0.1047, "s1.loss_cls": 0.035, "s1.acc": 97.36032, "s1.loss_bbox": 0.03079, "s1.loss_mask": 0.05295, "s2.loss_cls": 0.01897, "s2.acc": 97.12842, "s2.loss_bbox": 0.02643, "s2.loss_mask": 0.02663, "loss": 0.3915, "time": 2.66502}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.771, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.828, "bbox_mAP_s": 0.335, "bbox_mAP_m": 0.772, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.771 0.845 0.828 0.335 0.772 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.0005, "memory": 9929, "data_time": 1.94086, "loss_rpn_cls": 0.00805, "loss_rpn_bbox": 0.01037, "s0.loss_cls": 0.07461, "s0.acc": 97.19494, "s0.loss_bbox": 0.03145, "s0.loss_mask": 0.10739, "s1.loss_cls": 0.04549, "s1.acc": 96.52025, "s1.loss_bbox": 0.0352, "s1.loss_mask": 0.05335, "s2.loss_cls": 0.0249, "s2.acc": 96.12375, "s2.loss_bbox": 0.02835, "s2.loss_mask": 0.02658, "loss": 0.44573, "time": 2.56104}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0005, "memory": 9929, "data_time": 1.57934, "loss_rpn_cls": 0.00397, "loss_rpn_bbox": 0.009, "s0.loss_cls": 0.05892, "s0.acc": 97.73867, "s0.loss_bbox": 0.02488, "s0.loss_mask": 0.10368, "s1.loss_cls": 0.03474, "s1.acc": 97.37344, "s1.loss_bbox": 0.03021, "s1.loss_mask": 0.05252, "s2.loss_cls": 0.0188, "s2.acc": 97.18302, "s2.loss_bbox": 0.02616, "s2.loss_mask": 0.02641, "loss": 0.38927, "time": 2.57251}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.771, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.828, "bbox_mAP_s": 0.329, "bbox_mAP_m": 0.771, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.771 0.845 0.828 0.329 0.771 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.0005, "memory": 9929, "data_time": 2.15899, "loss_rpn_cls": 0.00942, "loss_rpn_bbox": 0.01031, "s0.loss_cls": 0.07612, "s0.acc": 97.17324, "s0.loss_bbox": 0.03097, "s0.loss_mask": 0.10728, "s1.loss_cls": 0.04649, "s1.acc": 96.50796, "s1.loss_bbox": 0.03443, "s1.loss_mask": 0.05321, "s2.loss_cls": 0.02477, "s2.acc": 96.25696, "s2.loss_bbox": 0.02765, "s2.loss_mask": 0.02654, "loss": 0.4472, "time": 2.77944}
