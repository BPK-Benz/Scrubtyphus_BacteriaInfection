{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/cascade_mask_rcnn_r101_fpn_1x_coco_20200203-befdf6ee.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.5],\n        contrast_limit=[0.1, 0.5],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.5)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/CasecadeMask_R101_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2128744407, "exp_name": "cascade_mask_rcnn_r101_InfectNuc.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 13223, "data_time": 1.72887, "loss_rpn_cls": 0.08075, "loss_rpn_bbox": 0.04221, "s0.loss_cls": 0.37454, "s0.acc": 85.54492, "s0.loss_bbox": 0.09426, "s0.loss_mask": 0.23682, "s1.loss_cls": 0.19291, "s1.acc": 85.60985, "s1.loss_bbox": 0.0789, "s1.loss_mask": 0.14304, "s2.loss_cls": 0.10363, "s2.acc": 84.48503, "s2.loss_bbox": 0.04763, "s2.loss_mask": 0.07132, "loss": 1.466, "time": 2.83242}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01773, "bbox_mAP": 0.694, "bbox_mAP_50": 0.796, "bbox_mAP_75": 0.77, "bbox_mAP_s": 0.253, "bbox_mAP_m": 0.695, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.694 0.796 0.770 0.253 0.695 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.01773, "memory": 13223, "data_time": 2.27349, "loss_rpn_cls": 0.01266, "loss_rpn_bbox": 0.03376, "s0.loss_cls": 0.13899, "s0.acc": 94.74206, "s0.loss_bbox": 0.04536, "s0.loss_mask": 0.11481, "s1.loss_cls": 0.07265, "s1.acc": 94.58214, "s1.loss_bbox": 0.04831, "s1.loss_mask": 0.06012, "s2.loss_cls": 0.03913, "s2.acc": 94.22389, "s2.loss_bbox": 0.03501, "s2.loss_mask": 0.0291, "loss": 0.62992, "time": 2.95313}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02772, "memory": 13223, "data_time": 1.68176, "loss_rpn_cls": 0.01096, "loss_rpn_bbox": 0.02816, "s0.loss_cls": 0.13219, "s0.acc": 94.97109, "s0.loss_bbox": 0.04676, "s0.loss_mask": 0.11391, "s1.loss_cls": 0.06847, "s1.acc": 94.85769, "s1.loss_bbox": 0.04903, "s1.loss_mask": 0.05966, "s2.loss_cls": 0.03752, "s2.acc": 94.32049, "s2.loss_bbox": 0.03557, "s2.loss_mask": 0.02894, "loss": 0.61118, "time": 2.78919}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.03551, "bbox_mAP": 0.716, "bbox_mAP_50": 0.808, "bbox_mAP_75": 0.785, "bbox_mAP_s": 0.311, "bbox_mAP_m": 0.717, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.716 0.808 0.785 0.311 0.717 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.03551, "memory": 13223, "data_time": 2.33385, "loss_rpn_cls": 0.01152, "loss_rpn_bbox": 0.02191, "s0.loss_cls": 0.11252, "s0.acc": 95.79861, "s0.loss_bbox": 0.04028, "s0.loss_mask": 0.10834, "s1.loss_cls": 0.06221, "s1.acc": 95.44432, "s1.loss_bbox": 0.04357, "s1.loss_mask": 0.05658, "s2.loss_cls": 0.03467, "s2.acc": 94.74841, "s2.loss_bbox": 0.03269, "s2.loss_mask": 0.0277, "loss": 0.55198, "time": 3.00952}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0455, "memory": 13223, "data_time": 1.61175, "loss_rpn_cls": 0.0093, "loss_rpn_bbox": 0.02671, "s0.loss_cls": 0.11481, "s0.acc": 95.7543, "s0.loss_bbox": 0.04219, "s0.loss_mask": 0.11058, "s1.loss_cls": 0.06108, "s1.acc": 95.54859, "s1.loss_bbox": 0.04479, "s1.loss_mask": 0.05709, "s2.loss_cls": 0.0329, "s2.acc": 95.15144, "s2.loss_bbox": 0.03412, "s2.loss_mask": 0.02786, "loss": 0.56142, "time": 2.7284}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.05, "bbox_mAP": 0.732, "bbox_mAP_50": 0.823, "bbox_mAP_75": 0.797, "bbox_mAP_s": 0.337, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.732 0.823 0.797 0.337 0.733 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.05, "memory": 13223, "data_time": 2.25583, "loss_rpn_cls": 0.01496, "loss_rpn_bbox": 0.02266, "s0.loss_cls": 0.11443, "s0.acc": 95.6498, "s0.loss_bbox": 0.04353, "s0.loss_mask": 0.11126, "s1.loss_cls": 0.06107, "s1.acc": 95.39654, "s1.loss_bbox": 0.04444, "s1.loss_mask": 0.0572, "s2.loss_cls": 0.03338, "s2.acc": 94.98117, "s2.loss_bbox": 0.03141, "s2.loss_mask": 0.02784, "loss": 0.56218, "time": 2.93041}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.05, "memory": 13223, "data_time": 1.56663, "loss_rpn_cls": 0.00844, "loss_rpn_bbox": 0.02361, "s0.loss_cls": 0.10698, "s0.acc": 95.95742, "s0.loss_bbox": 0.03886, "s0.loss_mask": 0.10866, "s1.loss_cls": 0.05594, "s1.acc": 95.81294, "s1.loss_bbox": 0.04286, "s1.loss_mask": 0.05655, "s2.loss_cls": 0.02971, "s2.acc": 95.41961, "s2.loss_bbox": 0.03323, "s2.loss_mask": 0.02787, "loss": 0.53272, "time": 2.68647}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.05, "bbox_mAP": 0.697, "bbox_mAP_50": 0.786, "bbox_mAP_75": 0.762, "bbox_mAP_s": 0.292, "bbox_mAP_m": 0.698, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.697 0.786 0.762 0.292 0.698 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.05, "memory": 13223, "data_time": 2.26202, "loss_rpn_cls": 0.014, "loss_rpn_bbox": 0.01989, "s0.loss_cls": 0.11407, "s0.acc": 95.76203, "s0.loss_bbox": 0.03915, "s0.loss_mask": 0.11404, "s1.loss_cls": 0.0613, "s1.acc": 95.62319, "s1.loss_bbox": 0.04254, "s1.loss_mask": 0.05727, "s2.loss_cls": 0.03361, "s2.acc": 95.11352, "s2.loss_bbox": 0.03257, "s2.loss_mask": 0.02799, "loss": 0.55645, "time": 2.93385}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 13223, "data_time": 1.46733, "loss_rpn_cls": 0.00693, "loss_rpn_bbox": 0.02084, "s0.loss_cls": 0.09804, "s0.acc": 96.31953, "s0.loss_bbox": 0.03832, "s0.loss_mask": 0.10899, "s1.loss_cls": 0.05143, "s1.acc": 96.21896, "s1.loss_bbox": 0.04112, "s1.loss_mask": 0.05689, "s2.loss_cls": 0.02765, "s2.acc": 95.85387, "s2.loss_bbox": 0.03209, "s2.loss_mask": 0.02785, "loss": 0.51017, "time": 2.58128}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.702, "bbox_mAP_50": 0.791, "bbox_mAP_75": 0.768, "bbox_mAP_s": 0.308, "bbox_mAP_m": 0.703, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.702 0.791 0.768 0.308 0.703 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.05, "memory": 13223, "data_time": 2.26717, "loss_rpn_cls": 0.01326, "loss_rpn_bbox": 0.02625, "s0.loss_cls": 0.11281, "s0.acc": 95.91952, "s0.loss_bbox": 0.04205, "s0.loss_mask": 0.1099, "s1.loss_cls": 0.06118, "s1.acc": 95.56487, "s1.loss_bbox": 0.04469, "s1.loss_mask": 0.05723, "s2.loss_cls": 0.03324, "s2.acc": 95.12637, "s2.loss_bbox": 0.03217, "s2.loss_mask": 0.02735, "loss": 0.56013, "time": 2.94853}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 13223, "data_time": 1.48904, "loss_rpn_cls": 0.00675, "loss_rpn_bbox": 0.01836, "s0.loss_cls": 0.09331, "s0.acc": 96.57578, "s0.loss_bbox": 0.03761, "s0.loss_mask": 0.10919, "s1.loss_cls": 0.05119, "s1.acc": 96.24316, "s1.loss_bbox": 0.03939, "s1.loss_mask": 0.0561, "s2.loss_cls": 0.02799, "s2.acc": 95.86689, "s2.loss_bbox": 0.03047, "s2.loss_mask": 0.0274, "loss": 0.49777, "time": 2.6039}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.732, "bbox_mAP_50": 0.831, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.287, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.732 0.831 0.808 0.287 0.733 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.05, "memory": 13223, "data_time": 2.24844, "loss_rpn_cls": 0.01077, "loss_rpn_bbox": 0.02129, "s0.loss_cls": 0.09975, "s0.acc": 96.16257, "s0.loss_bbox": 0.04174, "s0.loss_mask": 0.11064, "s1.loss_cls": 0.05394, "s1.acc": 95.95499, "s1.loss_bbox": 0.04542, "s1.loss_mask": 0.05825, "s2.loss_cls": 0.02992, "s2.acc": 95.46494, "s2.loss_bbox": 0.0324, "s2.loss_mask": 0.02817, "loss": 0.53229, "time": 2.9257}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 13223, "data_time": 1.46777, "loss_rpn_cls": 0.00693, "loss_rpn_bbox": 0.01723, "s0.loss_cls": 0.08351, "s0.acc": 96.87734, "s0.loss_bbox": 0.0358, "s0.loss_mask": 0.10977, "s1.loss_cls": 0.0435, "s1.acc": 96.7915, "s1.loss_bbox": 0.03791, "s1.loss_mask": 0.05653, "s2.loss_cls": 0.02451, "s2.acc": 96.32576, "s2.loss_bbox": 0.02948, "s2.loss_mask": 0.02747, "loss": 0.47264, "time": 2.58579}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.736, "bbox_mAP_50": 0.83, "bbox_mAP_75": 0.806, "bbox_mAP_s": 0.28, "bbox_mAP_m": 0.737, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.736 0.830 0.806 0.280 0.737 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.05, "memory": 13223, "data_time": 2.2841, "loss_rpn_cls": 0.01305, "loss_rpn_bbox": 0.01812, "s0.loss_cls": 0.10005, "s0.acc": 96.19978, "s0.loss_bbox": 0.04204, "s0.loss_mask": 0.11275, "s1.loss_cls": 0.05349, "s1.acc": 95.97624, "s1.loss_bbox": 0.04073, "s1.loss_mask": 0.05759, "s2.loss_cls": 0.02894, "s2.acc": 95.5306, "s2.loss_bbox": 0.0295, "s2.loss_mask": 0.02773, "loss": 0.52397, "time": 2.96333}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 13223, "data_time": 1.30254, "loss_rpn_cls": 0.00625, "loss_rpn_bbox": 0.01581, "s0.loss_cls": 0.08737, "s0.acc": 96.74961, "s0.loss_bbox": 0.03459, "s0.loss_mask": 0.10643, "s1.loss_cls": 0.04646, "s1.acc": 96.57384, "s1.loss_bbox": 0.0379, "s1.loss_mask": 0.05494, "s2.loss_cls": 0.02523, "s2.acc": 96.22709, "s2.loss_bbox": 0.03046, "s2.loss_mask": 0.02714, "loss": 0.47257, "time": 2.41228}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.746, "bbox_mAP_50": 0.829, "bbox_mAP_75": 0.812, "bbox_mAP_s": 0.331, "bbox_mAP_m": 0.746, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.746 0.829 0.812 0.331 0.746 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.05, "memory": 13223, "data_time": 2.25046, "loss_rpn_cls": 0.01106, "loss_rpn_bbox": 0.01637, "s0.loss_cls": 0.0961, "s0.acc": 96.37215, "s0.loss_bbox": 0.03889, "s0.loss_mask": 0.10796, "s1.loss_cls": 0.05326, "s1.acc": 96.00345, "s1.loss_bbox": 0.04087, "s1.loss_mask": 0.05454, "s2.loss_cls": 0.0283, "s2.acc": 95.72646, "s2.loss_bbox": 0.03015, "s2.loss_mask": 0.02696, "loss": 0.50448, "time": 2.92633}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 13223, "data_time": 1.31677, "loss_rpn_cls": 0.0049, "loss_rpn_bbox": 0.01028, "s0.loss_cls": 0.06733, "s0.acc": 97.5168, "s0.loss_bbox": 0.02882, "s0.loss_mask": 0.1052, "s1.loss_cls": 0.03805, "s1.acc": 97.22665, "s1.loss_bbox": 0.03352, "s1.loss_mask": 0.05364, "s2.loss_cls": 0.02024, "s2.acc": 97.05918, "s2.loss_bbox": 0.02756, "s2.loss_mask": 0.02662, "loss": 0.41614, "time": 2.4394}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.759, "bbox_mAP_50": 0.835, "bbox_mAP_75": 0.815, "bbox_mAP_s": 0.355, "bbox_mAP_m": 0.759, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.759 0.835 0.815 0.355 0.759 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.005, "memory": 13223, "data_time": 2.2599, "loss_rpn_cls": 0.00898, "loss_rpn_bbox": 0.01081, "s0.loss_cls": 0.07389, "s0.acc": 97.28795, "s0.loss_bbox": 0.0323, "s0.loss_mask": 0.10755, "s1.loss_cls": 0.04433, "s1.acc": 96.73829, "s1.loss_bbox": 0.034, "s1.loss_mask": 0.05366, "s2.loss_cls": 0.0242, "s2.acc": 96.41829, "s2.loss_bbox": 0.0268, "s2.loss_mask": 0.02624, "loss": 0.44276, "time": 2.93455}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 13223, "data_time": 1.41647, "loss_rpn_cls": 0.00363, "loss_rpn_bbox": 0.00932, "s0.loss_cls": 0.05742, "s0.acc": 97.81836, "s0.loss_bbox": 0.02588, "s0.loss_mask": 0.10407, "s1.loss_cls": 0.03413, "s1.acc": 97.38113, "s1.loss_bbox": 0.03068, "s1.loss_mask": 0.05302, "s2.loss_cls": 0.0188, "s2.acc": 97.08828, "s2.loss_bbox": 0.02583, "s2.loss_mask": 0.02611, "loss": 0.3889, "time": 2.53942}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.767, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.827, "bbox_mAP_s": 0.347, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.767 0.845 0.827 0.347 0.768 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.005, "memory": 13223, "data_time": 2.26374, "loss_rpn_cls": 0.01014, "loss_rpn_bbox": 0.01085, "s0.loss_cls": 0.07272, "s0.acc": 97.29043, "s0.loss_bbox": 0.03062, "s0.loss_mask": 0.1068, "s1.loss_cls": 0.0433, "s1.acc": 96.81554, "s1.loss_bbox": 0.03462, "s1.loss_mask": 0.05426, "s2.loss_cls": 0.02377, "s2.acc": 96.38961, "s2.loss_bbox": 0.02706, "s2.loss_mask": 0.02657, "loss": 0.44071, "time": 2.93934}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 13223, "data_time": 1.36123, "loss_rpn_cls": 0.00345, "loss_rpn_bbox": 0.00913, "s0.loss_cls": 0.05643, "s0.acc": 97.88477, "s0.loss_bbox": 0.02583, "s0.loss_mask": 0.10378, "s1.loss_cls": 0.03367, "s1.acc": 97.46441, "s1.loss_bbox": 0.03024, "s1.loss_mask": 0.05312, "s2.loss_cls": 0.0185, "s2.acc": 97.21244, "s2.loss_bbox": 0.02512, "s2.loss_mask": 0.0261, "loss": 0.38537, "time": 2.47876}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.766, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.824, "bbox_mAP_s": 0.349, "bbox_mAP_m": 0.767, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.766 0.845 0.824 0.349 0.767 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.005, "memory": 13223, "data_time": 2.29057, "loss_rpn_cls": 0.00959, "loss_rpn_bbox": 0.01078, "s0.loss_cls": 0.07434, "s0.acc": 97.2216, "s0.loss_bbox": 0.0322, "s0.loss_mask": 0.10859, "s1.loss_cls": 0.04623, "s1.acc": 96.53984, "s1.loss_bbox": 0.03486, "s1.loss_mask": 0.05457, "s2.loss_cls": 0.02519, "s2.acc": 96.28079, "s2.loss_bbox": 0.02777, "s2.loss_mask": 0.02661, "loss": 0.45073, "time": 2.9648}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0005, "memory": 13223, "data_time": 1.34103, "loss_rpn_cls": 0.00385, "loss_rpn_bbox": 0.00865, "s0.loss_cls": 0.05525, "s0.acc": 97.95742, "s0.loss_bbox": 0.02466, "s0.loss_mask": 0.10288, "s1.loss_cls": 0.03233, "s1.acc": 97.60958, "s1.loss_bbox": 0.03027, "s1.loss_mask": 0.0531, "s2.loss_cls": 0.01822, "s2.acc": 97.31848, "s2.loss_bbox": 0.02564, "s2.loss_mask": 0.02615, "loss": 0.381, "time": 2.45155}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.824, "bbox_mAP_s": 0.357, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.842 0.824 0.357 0.768 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.0005, "memory": 13223, "data_time": 2.26045, "loss_rpn_cls": 0.00932, "loss_rpn_bbox": 0.01042, "s0.loss_cls": 0.07393, "s0.acc": 97.27245, "s0.loss_bbox": 0.03068, "s0.loss_mask": 0.10663, "s1.loss_cls": 0.04394, "s1.acc": 96.72858, "s1.loss_bbox": 0.03312, "s1.loss_mask": 0.05336, "s2.loss_cls": 0.02412, "s2.acc": 96.32948, "s2.loss_bbox": 0.02651, "s2.loss_mask": 0.02615, "loss": 0.43818, "time": 2.94071}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0005, "memory": 13223, "data_time": 1.36264, "loss_rpn_cls": 0.00308, "loss_rpn_bbox": 0.0084, "s0.loss_cls": 0.05441, "s0.acc": 98.00391, "s0.loss_bbox": 0.02415, "s0.loss_mask": 0.10187, "s1.loss_cls": 0.03201, "s1.acc": 97.64119, "s1.loss_bbox": 0.02999, "s1.loss_mask": 0.05269, "s2.loss_cls": 0.01738, "s2.acc": 97.40733, "s2.loss_bbox": 0.0252, "s2.loss_mask": 0.02592, "loss": 0.37511, "time": 2.47481}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.769, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.825, "bbox_mAP_s": 0.358, "bbox_mAP_m": 0.77, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.769 0.845 0.825 0.358 0.770 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.0005, "memory": 13223, "data_time": 2.16813, "loss_rpn_cls": 0.00968, "loss_rpn_bbox": 0.01058, "s0.loss_cls": 0.07335, "s0.acc": 97.30469, "s0.loss_bbox": 0.0305, "s0.loss_mask": 0.10661, "s1.loss_cls": 0.04399, "s1.acc": 96.73978, "s1.loss_bbox": 0.03393, "s1.loss_mask": 0.05363, "s2.loss_cls": 0.02415, "s2.acc": 96.3937, "s2.loss_bbox": 0.02694, "s2.loss_mask": 0.02622, "loss": 0.43957, "time": 2.84314}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0005, "memory": 13223, "data_time": 1.48273, "loss_rpn_cls": 0.00321, "loss_rpn_bbox": 0.00868, "s0.loss_cls": 0.0532, "s0.acc": 98.01992, "s0.loss_bbox": 0.02489, "s0.loss_mask": 0.10346, "s1.loss_cls": 0.03207, "s1.acc": 97.61765, "s1.loss_bbox": 0.02957, "s1.loss_mask": 0.05268, "s2.loss_cls": 0.01753, "s2.acc": 97.38847, "s2.loss_bbox": 0.02487, "s2.loss_mask": 0.02591, "loss": 0.37607, "time": 2.60026}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.769, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.825, "bbox_mAP_s": 0.364, "bbox_mAP_m": 0.77, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.769 0.845 0.825 0.364 0.770 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.0005, "memory": 13223, "data_time": 2.11497, "loss_rpn_cls": 0.00872, "loss_rpn_bbox": 0.01038, "s0.loss_cls": 0.0709, "s0.acc": 97.38095, "s0.loss_bbox": 0.03066, "s0.loss_mask": 0.10596, "s1.loss_cls": 0.04234, "s1.acc": 96.82761, "s1.loss_bbox": 0.03348, "s1.loss_mask": 0.05353, "s2.loss_cls": 0.02347, "s2.acc": 96.48773, "s2.loss_bbox": 0.02689, "s2.loss_mask": 0.0262, "loss": 0.43253, "time": 2.79192}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0005, "memory": 13223, "data_time": 1.47976, "loss_rpn_cls": 0.00303, "loss_rpn_bbox": 0.00847, "s0.loss_cls": 0.05244, "s0.acc": 98.04688, "s0.loss_bbox": 0.02371, "s0.loss_mask": 0.10234, "s1.loss_cls": 0.03164, "s1.acc": 97.66751, "s1.loss_bbox": 0.02919, "s1.loss_mask": 0.05244, "s2.loss_cls": 0.01727, "s2.acc": 97.39055, "s2.loss_bbox": 0.02485, "s2.loss_mask": 0.02589, "loss": 0.37128, "time": 2.58568}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.827, "bbox_mAP_s": 0.366, "bbox_mAP_m": 0.769, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.842 0.827 0.366 0.769 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.0005, "memory": 13223, "data_time": 2.04317, "loss_rpn_cls": 0.0092, "loss_rpn_bbox": 0.01043, "s0.loss_cls": 0.07052, "s0.acc": 97.37723, "s0.loss_bbox": 0.03101, "s0.loss_mask": 0.10652, "s1.loss_cls": 0.04264, "s1.acc": 96.8115, "s1.loss_bbox": 0.03422, "s1.loss_mask": 0.05354, "s2.loss_cls": 0.02355, "s2.acc": 96.45924, "s2.loss_bbox": 0.02725, "s2.loss_mask": 0.02621, "loss": 0.4351, "time": 2.72215}
