{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/cascade_mask_rcnn_r101_fpn_1x_coco_20200203-befdf6ee.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.5],\n        contrast_limit=[0.1, 0.5],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.5)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/CasecadeMask_R101_Infect_fp16'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1447226678, "exp_name": "cascade_mask_rcnn_r101_fp16_InfectNuc.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 11112, "data_time": 2.21322, "loss_rpn_cls": 0.07585, "loss_rpn_bbox": 0.0393, "s0.loss_cls": 0.3629, "s0.acc": 85.64429, "s0.loss_bbox": 0.09097, "s0.loss_mask": 0.22445, "s1.loss_cls": 0.20288, "s1.acc": 83.50017, "s1.loss_bbox": 0.07718, "s1.loss_mask": 0.12048, "s2.loss_cls": 0.10483, "s2.acc": 84.67932, "s2.loss_bbox": 0.04634, "s2.loss_mask": 0.06386, "loss": 1.40904, "time": 3.77375}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01104, "bbox_mAP": 0.673, "bbox_mAP_50": 0.768, "bbox_mAP_75": 0.742, "bbox_mAP_s": 0.322, "bbox_mAP_m": 0.673, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.673 0.768 0.742 0.322 0.673 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.01104, "memory": 11112, "data_time": 3.09474, "loss_rpn_cls": 0.01366, "loss_rpn_bbox": 0.02944, "s0.loss_cls": 0.14191, "s0.acc": 94.607, "s0.loss_bbox": 0.04484, "s0.loss_mask": 0.11983, "s1.loss_cls": 0.07697, "s1.acc": 94.14337, "s1.loss_bbox": 0.04889, "s1.loss_mask": 0.06291, "s2.loss_cls": 0.04207, "s2.acc": 93.60402, "s2.loss_bbox": 0.03338, "s2.loss_mask": 0.03011, "loss": 0.64401, "time": 3.94883}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02103, "memory": 11112, "data_time": 2.10216, "loss_rpn_cls": 0.00966, "loss_rpn_bbox": 0.02685, "s0.loss_cls": 0.12553, "s0.acc": 95.24121, "s0.loss_bbox": 0.04569, "s0.loss_mask": 0.11677, "s1.loss_cls": 0.06592, "s1.acc": 95.09393, "s1.loss_bbox": 0.04786, "s1.loss_mask": 0.06069, "s2.loss_cls": 0.03563, "s2.acc": 94.66315, "s2.loss_bbox": 0.03504, "s2.loss_mask": 0.02935, "loss": 0.59899, "time": 3.67721}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.02213, "bbox_mAP": 0.735, "bbox_mAP_50": 0.832, "bbox_mAP_75": 0.806, "bbox_mAP_s": 0.344, "bbox_mAP_m": 0.735, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.735 0.832 0.806 0.344 0.735 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.02213, "memory": 11112, "data_time": 2.94553, "loss_rpn_cls": 0.01029, "loss_rpn_bbox": 0.02155, "s0.loss_cls": 0.12436, "s0.acc": 95.34192, "s0.loss_bbox": 0.04479, "s0.loss_mask": 0.1155, "s1.loss_cls": 0.06649, "s1.acc": 95.01379, "s1.loss_bbox": 0.0472, "s1.loss_mask": 0.05935, "s2.loss_cls": 0.03476, "s2.acc": 94.77439, "s2.loss_bbox": 0.03318, "s2.loss_mask": 0.02864, "loss": 0.58611, "time": 3.78745}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.03212, "memory": 11112, "data_time": 2.0422, "loss_rpn_cls": 0.00877, "loss_rpn_bbox": 0.02508, "s0.loss_cls": 0.10995, "s0.acc": 95.81714, "s0.loss_bbox": 0.04139, "s0.loss_mask": 0.11273, "s1.loss_cls": 0.05955, "s1.acc": 95.50522, "s1.loss_bbox": 0.0444, "s1.loss_mask": 0.05843, "s2.loss_cls": 0.03198, "s2.acc": 95.1629, "s2.loss_bbox": 0.03346, "s2.loss_mask": 0.02838, "loss": 0.5541, "time": 3.60318}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.03322, "bbox_mAP": 0.701, "bbox_mAP_50": 0.805, "bbox_mAP_75": 0.78, "bbox_mAP_s": 0.361, "bbox_mAP_m": 0.702, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.701 0.805 0.780 0.361 0.702 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.03322, "memory": 11112, "data_time": 2.89612, "loss_rpn_cls": 0.01094, "loss_rpn_bbox": 0.02443, "s0.loss_cls": 0.10995, "s0.acc": 95.89781, "s0.loss_bbox": 0.04107, "s0.loss_mask": 0.11047, "s1.loss_cls": 0.06167, "s1.acc": 95.38872, "s1.loss_bbox": 0.0426, "s1.loss_mask": 0.05694, "s2.loss_cls": 0.03141, "s2.acc": 95.31487, "s2.loss_bbox": 0.03366, "s2.loss_mask": 0.0277, "loss": 0.55083, "time": 3.74462}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.04321, "memory": 11112, "data_time": 1.97383, "loss_rpn_cls": 0.00834, "loss_rpn_bbox": 0.02391, "s0.loss_cls": 0.10461, "s0.acc": 96.1062, "s0.loss_bbox": 0.03819, "s0.loss_mask": 0.10946, "s1.loss_cls": 0.05619, "s1.acc": 95.86489, "s1.loss_bbox": 0.04221, "s1.loss_mask": 0.05706, "s2.loss_cls": 0.03025, "s2.acc": 95.56725, "s2.loss_bbox": 0.03232, "s2.loss_mask": 0.02764, "loss": 0.53018, "time": 3.51652}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.04431, "bbox_mAP": 0.726, "bbox_mAP_50": 0.816, "bbox_mAP_75": 0.791, "bbox_mAP_s": 0.307, "bbox_mAP_m": 0.727, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.726 0.816 0.791 0.307 0.727 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.04431, "memory": 11112, "data_time": 2.86812, "loss_rpn_cls": 0.01388, "loss_rpn_bbox": 0.02133, "s0.loss_cls": 0.11966, "s0.acc": 95.48465, "s0.loss_bbox": 0.0419, "s0.loss_mask": 0.1119, "s1.loss_cls": 0.06298, "s1.acc": 95.26396, "s1.loss_bbox": 0.04523, "s1.loss_mask": 0.05833, "s2.loss_cls": 0.03406, "s2.acc": 94.8376, "s2.loss_bbox": 0.03315, "s2.loss_mask": 0.02819, "loss": 0.5706, "time": 3.66838}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 11112, "data_time": 1.95129, "loss_rpn_cls": 0.00797, "loss_rpn_bbox": 0.02424, "s0.loss_cls": 0.09812, "s0.acc": 96.33765, "s0.loss_bbox": 0.03964, "s0.loss_mask": 0.10803, "s1.loss_cls": 0.05246, "s1.acc": 96.0898, "s1.loss_bbox": 0.04223, "s1.loss_mask": 0.05661, "s2.loss_cls": 0.0284, "s2.acc": 95.75575, "s2.loss_bbox": 0.03182, "s2.loss_mask": 0.02759, "loss": 0.51712, "time": 3.45306}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.721, "bbox_mAP_50": 0.819, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.278, "bbox_mAP_m": 0.722, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.721 0.819 0.796 0.278 0.722 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.05, "memory": 11112, "data_time": 3.01096, "loss_rpn_cls": 0.01096, "loss_rpn_bbox": 0.01872, "s0.loss_cls": 0.10158, "s0.acc": 96.25651, "s0.loss_bbox": 0.04224, "s0.loss_mask": 0.11284, "s1.loss_cls": 0.05741, "s1.acc": 95.75999, "s1.loss_bbox": 0.04547, "s1.loss_mask": 0.05792, "s2.loss_cls": 0.03187, "s2.acc": 95.26137, "s2.loss_bbox": 0.03267, "s2.loss_mask": 0.0279, "loss": 0.53959, "time": 3.80047}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 11112, "data_time": 2.33627, "loss_rpn_cls": 0.00726, "loss_rpn_bbox": 0.01952, "s0.loss_cls": 0.09163, "s0.acc": 96.50049, "s0.loss_bbox": 0.03753, "s0.loss_mask": 0.1084, "s1.loss_cls": 0.04935, "s1.acc": 96.28983, "s1.loss_bbox": 0.04082, "s1.loss_mask": 0.056, "s2.loss_cls": 0.02701, "s2.acc": 95.92807, "s2.loss_bbox": 0.03162, "s2.loss_mask": 0.02743, "loss": 0.49657, "time": 3.82452}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.736, "bbox_mAP_50": 0.83, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.265, "bbox_mAP_m": 0.737, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.736 0.830 0.808 0.265 0.737 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.05, "memory": 11112, "data_time": 3.29843, "loss_rpn_cls": 0.01117, "loss_rpn_bbox": 0.02506, "s0.loss_cls": 0.11149, "s0.acc": 95.86964, "s0.loss_bbox": 0.04074, "s0.loss_mask": 0.11886, "s1.loss_cls": 0.06092, "s1.acc": 95.42437, "s1.loss_bbox": 0.0424, "s1.loss_mask": 0.05916, "s2.loss_cls": 0.03216, "s2.acc": 95.11319, "s2.loss_bbox": 0.03198, "s2.loss_mask": 0.02839, "loss": 0.56234, "time": 4.07039}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 11112, "data_time": 2.46482, "loss_rpn_cls": 0.00616, "loss_rpn_bbox": 0.01825, "s0.loss_cls": 0.08216, "s0.acc": 96.86743, "s0.loss_bbox": 0.03401, "s0.loss_mask": 0.10741, "s1.loss_cls": 0.04426, "s1.acc": 96.69716, "s1.loss_bbox": 0.03843, "s1.loss_mask": 0.05594, "s2.loss_cls": 0.02452, "s2.acc": 96.30432, "s2.loss_bbox": 0.02999, "s2.loss_mask": 0.02725, "loss": 0.46838, "time": 3.94635}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.754, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.818, "bbox_mAP_s": 0.262, "bbox_mAP_m": 0.755, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.754 0.839 0.818 0.262 0.755 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.05, "memory": 11112, "data_time": 3.01858, "loss_rpn_cls": 0.00988, "loss_rpn_bbox": 0.01562, "s0.loss_cls": 0.08867, "s0.acc": 96.72476, "s0.loss_bbox": 0.03656, "s0.loss_mask": 0.1084, "s1.loss_cls": 0.05034, "s1.acc": 96.29422, "s1.loss_bbox": 0.03878, "s1.loss_mask": 0.05539, "s2.loss_cls": 0.02815, "s2.acc": 95.82152, "s2.loss_bbox": 0.02903, "s2.loss_mask": 0.02696, "loss": 0.48778, "time": 3.80484}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 11112, "data_time": 2.07474, "loss_rpn_cls": 0.00634, "loss_rpn_bbox": 0.0154, "s0.loss_cls": 0.07885, "s0.acc": 97.04028, "s0.loss_bbox": 0.03248, "s0.loss_mask": 0.10721, "s1.loss_cls": 0.04299, "s1.acc": 96.78312, "s1.loss_bbox": 0.03637, "s1.loss_mask": 0.05544, "s2.loss_cls": 0.02365, "s2.acc": 96.46001, "s2.loss_bbox": 0.02884, "s2.loss_mask": 0.02701, "loss": 0.45458, "time": 3.5669}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.724, "bbox_mAP_50": 0.809, "bbox_mAP_75": 0.789, "bbox_mAP_s": 0.296, "bbox_mAP_m": 0.725, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.724 0.809 0.789 0.296 0.725 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.05, "memory": 11112, "data_time": 2.97564, "loss_rpn_cls": 0.00974, "loss_rpn_bbox": 0.01501, "s0.loss_cls": 0.08961, "s0.acc": 96.64088, "s0.loss_bbox": 0.03976, "s0.loss_mask": 0.11307, "s1.loss_cls": 0.05041, "s1.acc": 96.29562, "s1.loss_bbox": 0.04242, "s1.loss_mask": 0.05772, "s2.loss_cls": 0.02847, "s2.acc": 95.72813, "s2.loss_bbox": 0.03045, "s2.loss_mask": 0.02749, "loss": 0.50416, "time": 3.74502}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 11112, "data_time": 2.17797, "loss_rpn_cls": 0.00443, "loss_rpn_bbox": 0.01025, "s0.loss_cls": 0.06297, "s0.acc": 97.64624, "s0.loss_bbox": 0.027, "s0.loss_mask": 0.10533, "s1.loss_cls": 0.03529, "s1.acc": 97.41407, "s1.loss_bbox": 0.03173, "s1.loss_mask": 0.05416, "s2.loss_cls": 0.0198, "s2.acc": 97.0663, "s2.loss_bbox": 0.02621, "s2.loss_mask": 0.02641, "loss": 0.40358, "time": 3.65224}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.762, "bbox_mAP_50": 0.838, "bbox_mAP_75": 0.821, "bbox_mAP_s": 0.334, "bbox_mAP_m": 0.763, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.762 0.838 0.821 0.334 0.763 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.005, "memory": 11112, "data_time": 2.97317, "loss_rpn_cls": 0.00819, "loss_rpn_bbox": 0.01165, "s0.loss_cls": 0.07669, "s0.acc": 97.13855, "s0.loss_bbox": 0.03358, "s0.loss_mask": 0.10864, "s1.loss_cls": 0.04415, "s1.acc": 96.71451, "s1.loss_bbox": 0.03662, "s1.loss_mask": 0.05552, "s2.loss_cls": 0.02495, "s2.acc": 96.29515, "s2.loss_bbox": 0.02749, "s2.loss_mask": 0.02657, "loss": 0.45406, "time": 3.746}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 11112, "data_time": 2.1586, "loss_rpn_cls": 0.0036, "loss_rpn_bbox": 0.00933, "s0.loss_cls": 0.05813, "s0.acc": 97.80664, "s0.loss_bbox": 0.02608, "s0.loss_mask": 0.10452, "s1.loss_cls": 0.03301, "s1.acc": 97.55571, "s1.loss_bbox": 0.03079, "s1.loss_mask": 0.05381, "s2.loss_cls": 0.01857, "s2.acc": 97.23497, "s2.loss_bbox": 0.02522, "s2.loss_mask": 0.0262, "loss": 0.38926, "time": 3.63404}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.763, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.821, "bbox_mAP_s": 0.334, "bbox_mAP_m": 0.764, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.763 0.842 0.821 0.334 0.764 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.005, "memory": 11112, "data_time": 3.8297, "loss_rpn_cls": 0.00883, "loss_rpn_bbox": 0.01113, "s0.loss_cls": 0.07338, "s0.acc": 97.27063, "s0.loss_bbox": 0.03297, "s0.loss_mask": 0.10953, "s1.loss_cls": 0.04206, "s1.acc": 96.86067, "s1.loss_bbox": 0.03597, "s1.loss_mask": 0.05506, "s2.loss_cls": 0.02435, "s2.acc": 96.29064, "s2.loss_bbox": 0.02788, "s2.loss_mask": 0.02651, "loss": 0.44766, "time": 4.6058}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 11112, "data_time": 2.47338, "loss_rpn_cls": 0.00347, "loss_rpn_bbox": 0.00936, "s0.loss_cls": 0.05553, "s0.acc": 97.90454, "s0.loss_bbox": 0.02565, "s0.loss_mask": 0.10464, "s1.loss_cls": 0.03197, "s1.acc": 97.62012, "s1.loss_bbox": 0.03059, "s1.loss_mask": 0.05403, "s2.loss_cls": 0.01794, "s2.acc": 97.29434, "s2.loss_bbox": 0.02563, "s2.loss_mask": 0.02633, "loss": 0.38514, "time": 3.94947}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.767, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.822, "bbox_mAP_s": 0.334, "bbox_mAP_m": 0.767, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.767 0.842 0.822 0.334 0.767 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.005, "memory": 11112, "data_time": 3.78295, "loss_rpn_cls": 0.00877, "loss_rpn_bbox": 0.01116, "s0.loss_cls": 0.07239, "s0.acc": 97.27376, "s0.loss_bbox": 0.0318, "s0.loss_mask": 0.10711, "s1.loss_cls": 0.04259, "s1.acc": 96.79626, "s1.loss_bbox": 0.03489, "s1.loss_mask": 0.05456, "s2.loss_cls": 0.02432, "s2.acc": 96.28817, "s2.loss_bbox": 0.0272, "s2.loss_mask": 0.02637, "loss": 0.44117, "time": 4.55385}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0005, "memory": 11112, "data_time": 2.98821, "loss_rpn_cls": 0.0037, "loss_rpn_bbox": 0.00883, "s0.loss_cls": 0.05314, "s0.acc": 98.01685, "s0.loss_bbox": 0.02446, "s0.loss_mask": 0.1025, "s1.loss_cls": 0.03034, "s1.acc": 97.74565, "s1.loss_bbox": 0.02925, "s1.loss_mask": 0.05305, "s2.loss_cls": 0.01713, "s2.acc": 97.46715, "s2.loss_bbox": 0.02457, "s2.loss_mask": 0.02595, "loss": 0.37292, "time": 4.46217}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.821, "bbox_mAP_s": 0.323, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.842 0.821 0.323 0.768 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.0005, "memory": 11112, "data_time": 3.49136, "loss_rpn_cls": 0.00833, "loss_rpn_bbox": 0.01066, "s0.loss_cls": 0.07146, "s0.acc": 97.35702, "s0.loss_bbox": 0.03105, "s0.loss_mask": 0.10651, "s1.loss_cls": 0.04126, "s1.acc": 96.93398, "s1.loss_bbox": 0.03428, "s1.loss_mask": 0.05448, "s2.loss_cls": 0.02393, "s2.acc": 96.42295, "s2.loss_bbox": 0.02694, "s2.loss_mask": 0.02648, "loss": 0.43537, "time": 4.25932}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0005, "memory": 11112, "data_time": 2.97366, "loss_rpn_cls": 0.00351, "loss_rpn_bbox": 0.00883, "s0.loss_cls": 0.05322, "s0.acc": 97.99805, "s0.loss_bbox": 0.0246, "s0.loss_mask": 0.1029, "s1.loss_cls": 0.03041, "s1.acc": 97.73342, "s1.loss_bbox": 0.02961, "s1.loss_mask": 0.05328, "s2.loss_cls": 0.0173, "s2.acc": 97.41397, "s2.loss_bbox": 0.02492, "s2.loss_mask": 0.02607, "loss": 0.37468, "time": 4.44331}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.766, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.819, "bbox_mAP_s": 0.332, "bbox_mAP_m": 0.767, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.766 0.839 0.819 0.332 0.767 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.0005, "memory": 11112, "data_time": 2.50891, "loss_rpn_cls": 0.00984, "loss_rpn_bbox": 0.01084, "s0.loss_cls": 0.07401, "s0.acc": 97.28566, "s0.loss_bbox": 0.03181, "s0.loss_mask": 0.10779, "s1.loss_cls": 0.04229, "s1.acc": 96.91785, "s1.loss_bbox": 0.03416, "s1.loss_mask": 0.0545, "s2.loss_cls": 0.02367, "s2.acc": 96.5113, "s2.loss_bbox": 0.02711, "s2.loss_mask": 0.02657, "loss": 0.44259, "time": 3.28913}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0005, "memory": 11112, "data_time": 2.95108, "loss_rpn_cls": 0.0031, "loss_rpn_bbox": 0.00877, "s0.loss_cls": 0.05213, "s0.acc": 98.03467, "s0.loss_bbox": 0.0248, "s0.loss_mask": 0.10312, "s1.loss_cls": 0.0298, "s1.acc": 97.77256, "s1.loss_bbox": 0.03014, "s1.loss_mask": 0.05361, "s2.loss_cls": 0.01706, "s2.acc": 97.46388, "s2.loss_bbox": 0.02502, "s2.loss_mask": 0.02615, "loss": 0.37371, "time": 4.42453}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.766, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.822, "bbox_mAP_s": 0.334, "bbox_mAP_m": 0.767, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.766 0.839 0.822 0.334 0.767 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.0005, "memory": 11112, "data_time": 3.18925, "loss_rpn_cls": 0.0085, "loss_rpn_bbox": 0.01067, "s0.loss_cls": 0.07353, "s0.acc": 97.26813, "s0.loss_bbox": 0.03171, "s0.loss_mask": 0.1073, "s1.loss_cls": 0.04213, "s1.acc": 96.8439, "s1.loss_bbox": 0.03442, "s1.loss_mask": 0.0546, "s2.loss_cls": 0.02376, "s2.acc": 96.41148, "s2.loss_bbox": 0.02691, "s2.loss_mask": 0.02637, "loss": 0.4399, "time": 3.96333}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0005, "memory": 11112, "data_time": 2.7627, "loss_rpn_cls": 0.00356, "loss_rpn_bbox": 0.00879, "s0.loss_cls": 0.05181, "s0.acc": 98.073, "s0.loss_bbox": 0.02397, "s0.loss_mask": 0.10271, "s1.loss_cls": 0.03012, "s1.acc": 97.75016, "s1.loss_bbox": 0.02928, "s1.loss_mask": 0.05328, "s2.loss_cls": 0.01713, "s2.acc": 97.46934, "s2.loss_bbox": 0.02464, "s2.loss_mask": 0.02597, "loss": 0.37127, "time": 4.23383}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.766, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.819, "bbox_mAP_s": 0.332, "bbox_mAP_m": 0.767, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.766 0.839 0.819 0.332 0.767 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.0005, "memory": 11112, "data_time": 3.87676, "loss_rpn_cls": 0.00882, "loss_rpn_bbox": 0.01083, "s0.loss_cls": 0.07427, "s0.acc": 97.2675, "s0.loss_bbox": 0.03153, "s0.loss_mask": 0.10634, "s1.loss_cls": 0.04288, "s1.acc": 96.80187, "s1.loss_bbox": 0.03508, "s1.loss_mask": 0.05425, "s2.loss_cls": 0.02447, "s2.acc": 96.32751, "s2.loss_bbox": 0.02744, "s2.loss_mask": 0.02635, "loss": 0.44227, "time": 4.64876}
