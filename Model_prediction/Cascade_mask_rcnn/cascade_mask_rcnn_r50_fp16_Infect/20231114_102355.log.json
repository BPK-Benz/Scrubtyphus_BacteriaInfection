{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=3,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=3,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.05, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/cascade_mask_rcnn_r50_fpn_1x_coco_20200203-9d4dcb24.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/CasecadeMask_R50_Infect_fp16'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 443066295, "exp_name": "cascade_mask_rcnn_r50_InfectNuc_fp16.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00994, "memory": 8401, "data_time": 2.70524, "loss_rpn_cls": 0.06994, "loss_rpn_bbox": 0.03871, "s0.loss_cls": 0.37358, "s0.acc": 85.75562, "s0.loss_bbox": 0.08771, "s0.loss_mask": 0.25675, "s1.loss_cls": 0.20539, "s1.acc": 83.9347, "s1.loss_bbox": 0.07525, "s1.loss_mask": 0.12719, "s2.loss_cls": 0.11769, "s2.acc": 81.41743, "s2.loss_bbox": 0.04637, "s2.loss_mask": 0.07504, "loss": 1.47363, "time": 4.13843}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.01104, "bbox_mAP": 0.644, "bbox_mAP_50": 0.745, "bbox_mAP_75": 0.717, "bbox_mAP_s": 0.242, "bbox_mAP_m": 0.645, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.644 0.745 0.717 0.242 0.645 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.01104, "memory": 8401, "data_time": 3.56766, "loss_rpn_cls": 0.01297, "loss_rpn_bbox": 0.02087, "s0.loss_cls": 0.16858, "s0.acc": 93.82324, "s0.loss_bbox": 0.05089, "s0.loss_mask": 0.1256, "s1.loss_cls": 0.08681, "s1.acc": 93.73482, "s1.loss_bbox": 0.05198, "s1.loss_mask": 0.0631, "s2.loss_cls": 0.04843, "s2.acc": 92.85601, "s2.loss_bbox": 0.0367, "s2.loss_mask": 0.03013, "loss": 0.69607, "time": 4.37785}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02103, "memory": 8401, "data_time": 2.59525, "loss_rpn_cls": 0.00934, "loss_rpn_bbox": 0.02369, "s0.loss_cls": 0.12948, "s0.acc": 95.12402, "s0.loss_bbox": 0.04521, "s0.loss_mask": 0.11743, "s1.loss_cls": 0.06819, "s1.acc": 94.90279, "s1.loss_bbox": 0.04661, "s1.loss_mask": 0.06058, "s2.loss_cls": 0.03689, "s2.acc": 94.44856, "s2.loss_bbox": 0.03388, "s2.loss_mask": 0.02923, "loss": 0.60054, "time": 4.05702}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.02213, "bbox_mAP": 0.725, "bbox_mAP_50": 0.822, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.285, "bbox_mAP_m": 0.725, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.725 0.822 0.796 0.285 0.725 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.02213, "memory": 8401, "data_time": 3.70776, "loss_rpn_cls": 0.01113, "loss_rpn_bbox": 0.02239, "s0.loss_cls": 0.11645, "s0.acc": 95.59232, "s0.loss_bbox": 0.04593, "s0.loss_mask": 0.1178, "s1.loss_cls": 0.06257, "s1.acc": 95.27427, "s1.loss_bbox": 0.04571, "s1.loss_mask": 0.06008, "s2.loss_cls": 0.0337, "s2.acc": 94.80394, "s2.loss_bbox": 0.03241, "s2.loss_mask": 0.02878, "loss": 0.57695, "time": 4.51813}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.03212, "memory": 8401, "data_time": 2.62396, "loss_rpn_cls": 0.0086, "loss_rpn_bbox": 0.02246, "s0.loss_cls": 0.108, "s0.acc": 95.89648, "s0.loss_bbox": 0.0404, "s0.loss_mask": 0.11058, "s1.loss_cls": 0.05754, "s1.acc": 95.6938, "s1.loss_bbox": 0.04261, "s1.loss_mask": 0.05751, "s2.loss_cls": 0.0318, "s2.acc": 95.23104, "s2.loss_bbox": 0.03189, "s2.loss_mask": 0.02784, "loss": 0.53923, "time": 4.06627}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.03322, "bbox_mAP": 0.741, "bbox_mAP_50": 0.834, "bbox_mAP_75": 0.809, "bbox_mAP_s": 0.348, "bbox_mAP_m": 0.741, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.741 0.834 0.809 0.348 0.741 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.03322, "memory": 8401, "data_time": 3.89708, "loss_rpn_cls": 0.01029, "loss_rpn_bbox": 0.03278, "s0.loss_cls": 0.11031, "s0.acc": 95.92348, "s0.loss_bbox": 0.03961, "s0.loss_mask": 0.10916, "s1.loss_cls": 0.06087, "s1.acc": 95.62149, "s1.loss_bbox": 0.04215, "s1.loss_mask": 0.05713, "s2.loss_cls": 0.03336, "s2.acc": 95.07192, "s2.loss_bbox": 0.03174, "s2.loss_mask": 0.02759, "loss": 0.55499, "time": 4.70792}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.04321, "memory": 8401, "data_time": 2.61156, "loss_rpn_cls": 0.0093, "loss_rpn_bbox": 0.02893, "s0.loss_cls": 0.10708, "s0.acc": 95.96533, "s0.loss_bbox": 0.03966, "s0.loss_mask": 0.10767, "s1.loss_cls": 0.05724, "s1.acc": 95.74171, "s1.loss_bbox": 0.04291, "s1.loss_mask": 0.05676, "s2.loss_cls": 0.03062, "s2.acc": 95.45589, "s2.loss_bbox": 0.03292, "s2.loss_mask": 0.02771, "loss": 0.5408, "time": 4.03551}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.04431, "bbox_mAP": 0.695, "bbox_mAP_50": 0.793, "bbox_mAP_75": 0.775, "bbox_mAP_s": 0.315, "bbox_mAP_m": 0.696, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.695 0.793 0.775 0.315 0.696 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.04431, "memory": 8401, "data_time": 3.80694, "loss_rpn_cls": 0.01179, "loss_rpn_bbox": 0.01995, "s0.loss_cls": 0.11684, "s0.acc": 95.68998, "s0.loss_bbox": 0.04245, "s0.loss_mask": 0.11311, "s1.loss_cls": 0.06304, "s1.acc": 95.41152, "s1.loss_bbox": 0.0451, "s1.loss_mask": 0.05803, "s2.loss_cls": 0.03312, "s2.acc": 94.99166, "s2.loss_bbox": 0.03349, "s2.loss_mask": 0.02794, "loss": 0.56485, "time": 4.61797}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.05, "memory": 8401, "data_time": 2.54003, "loss_rpn_cls": 0.00763, "loss_rpn_bbox": 0.02475, "s0.loss_cls": 0.10247, "s0.acc": 96.08643, "s0.loss_bbox": 0.03648, "s0.loss_mask": 0.1067, "s1.loss_cls": 0.05434, "s1.acc": 95.93291, "s1.loss_bbox": 0.04033, "s1.loss_mask": 0.05572, "s2.loss_cls": 0.02936, "s2.acc": 95.63067, "s2.loss_bbox": 0.0312, "s2.loss_mask": 0.0273, "loss": 0.51629, "time": 3.96455}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.05, "bbox_mAP": 0.733, "bbox_mAP_50": 0.832, "bbox_mAP_75": 0.809, "bbox_mAP_s": 0.324, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.733 0.832 0.809 0.324 0.733 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.05, "memory": 8401, "data_time": 3.8314, "loss_rpn_cls": 0.01813, "loss_rpn_bbox": 0.02725, "s0.loss_cls": 0.1151, "s0.acc": 95.59608, "s0.loss_bbox": 0.04439, "s0.loss_mask": 0.11108, "s1.loss_cls": 0.0629, "s1.acc": 95.3428, "s1.loss_bbox": 0.04462, "s1.loss_mask": 0.05697, "s2.loss_cls": 0.03403, "s2.acc": 94.86009, "s2.loss_bbox": 0.03476, "s2.loss_mask": 0.02789, "loss": 0.57711, "time": 4.66276}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.05, "memory": 8401, "data_time": 2.51839, "loss_rpn_cls": 0.00776, "loss_rpn_bbox": 0.01952, "s0.loss_cls": 0.09418, "s0.acc": 96.47046, "s0.loss_bbox": 0.03518, "s0.loss_mask": 0.10597, "s1.loss_cls": 0.05169, "s1.acc": 96.16185, "s1.loss_bbox": 0.03881, "s1.loss_mask": 0.05488, "s2.loss_cls": 0.02715, "s2.acc": 95.96534, "s2.loss_bbox": 0.03102, "s2.loss_mask": 0.02715, "loss": 0.49331, "time": 3.95553}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.05, "bbox_mAP": 0.749, "bbox_mAP_50": 0.838, "bbox_mAP_75": 0.814, "bbox_mAP_s": 0.289, "bbox_mAP_m": 0.75, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.749 0.838 0.814 0.289 0.750 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.05, "memory": 8401, "data_time": 3.7679, "loss_rpn_cls": 0.01186, "loss_rpn_bbox": 0.02185, "s0.loss_cls": 0.09439, "s0.acc": 96.46246, "s0.loss_bbox": 0.04012, "s0.loss_mask": 0.10963, "s1.loss_cls": 0.05337, "s1.acc": 95.96193, "s1.loss_bbox": 0.04259, "s1.loss_mask": 0.05723, "s2.loss_cls": 0.02961, "s2.acc": 95.56254, "s2.loss_bbox": 0.03172, "s2.loss_mask": 0.02766, "loss": 0.52003, "time": 4.59112}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.05, "memory": 8401, "data_time": 2.55496, "loss_rpn_cls": 0.00654, "loss_rpn_bbox": 0.01725, "s0.loss_cls": 0.08678, "s0.acc": 96.71631, "s0.loss_bbox": 0.03412, "s0.loss_mask": 0.10659, "s1.loss_cls": 0.04862, "s1.acc": 96.3574, "s1.loss_bbox": 0.03848, "s1.loss_mask": 0.05514, "s2.loss_cls": 0.02644, "s2.acc": 96.02439, "s2.loss_bbox": 0.03052, "s2.loss_mask": 0.02702, "loss": 0.47751, "time": 3.98005}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.05, "bbox_mAP": 0.737, "bbox_mAP_50": 0.834, "bbox_mAP_75": 0.81, "bbox_mAP_s": 0.331, "bbox_mAP_m": 0.738, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.737 0.834 0.810 0.331 0.738 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.05, "memory": 8401, "data_time": 3.85287, "loss_rpn_cls": 0.0107, "loss_rpn_bbox": 0.0151, "s0.loss_cls": 0.09195, "s0.acc": 96.52319, "s0.loss_bbox": 0.03724, "s0.loss_mask": 0.10764, "s1.loss_cls": 0.05044, "s1.acc": 96.23208, "s1.loss_bbox": 0.03936, "s1.loss_mask": 0.05539, "s2.loss_cls": 0.02835, "s2.acc": 95.71129, "s2.loss_bbox": 0.03092, "s2.loss_mask": 0.02702, "loss": 0.49411, "time": 4.66274}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.05, "memory": 8401, "data_time": 2.52273, "loss_rpn_cls": 0.0061, "loss_rpn_bbox": 0.0159, "s0.loss_cls": 0.08506, "s0.acc": 96.74805, "s0.loss_bbox": 0.03249, "s0.loss_mask": 0.10322, "s1.loss_cls": 0.04693, "s1.acc": 96.48864, "s1.loss_bbox": 0.03629, "s1.loss_mask": 0.05367, "s2.loss_cls": 0.02479, "s2.acc": 96.27347, "s2.loss_bbox": 0.02948, "s2.loss_mask": 0.02665, "loss": 0.46056, "time": 3.95564}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.05, "bbox_mAP": 0.757, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.818, "bbox_mAP_s": 0.322, "bbox_mAP_m": 0.757, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.757 0.839 0.818 0.322 0.757 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.05, "memory": 8401, "data_time": 3.83622, "loss_rpn_cls": 0.00941, "loss_rpn_bbox": 0.0145, "s0.loss_cls": 0.0856, "s0.acc": 96.82179, "s0.loss_bbox": 0.03505, "s0.loss_mask": 0.10869, "s1.loss_cls": 0.0484, "s1.acc": 96.40208, "s1.loss_bbox": 0.03761, "s1.loss_mask": 0.05461, "s2.loss_cls": 0.02686, "s2.acc": 95.96009, "s2.loss_bbox": 0.02955, "s2.loss_mask": 0.02685, "loss": 0.47714, "time": 4.6494}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 8401, "data_time": 2.60642, "loss_rpn_cls": 0.00431, "loss_rpn_bbox": 0.0101, "s0.loss_cls": 0.06514, "s0.acc": 97.50562, "s0.loss_bbox": 0.02705, "s0.loss_mask": 0.10415, "s1.loss_cls": 0.03776, "s1.acc": 97.12015, "s1.loss_bbox": 0.03247, "s1.loss_mask": 0.05329, "s2.loss_cls": 0.0202, "s2.acc": 96.92794, "s2.loss_bbox": 0.02686, "s2.loss_mask": 0.02636, "loss": 0.40768, "time": 4.03861}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.765, "bbox_mAP_50": 0.841, "bbox_mAP_75": 0.821, "bbox_mAP_s": 0.338, "bbox_mAP_m": 0.766, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.765 0.841 0.821 0.338 0.766 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.005, "memory": 8401, "data_time": 3.82671, "loss_rpn_cls": 0.00905, "loss_rpn_bbox": 0.011, "s0.loss_cls": 0.0775, "s0.acc": 97.09222, "s0.loss_bbox": 0.03251, "s0.loss_mask": 0.10668, "s1.loss_cls": 0.04601, "s1.acc": 96.55656, "s1.loss_bbox": 0.03464, "s1.loss_mask": 0.05363, "s2.loss_cls": 0.025, "s2.acc": 96.24465, "s2.loss_bbox": 0.02751, "s2.loss_mask": 0.02651, "loss": 0.45004, "time": 4.63897}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 8401, "data_time": 2.59708, "loss_rpn_cls": 0.00352, "loss_rpn_bbox": 0.0096, "s0.loss_cls": 0.06185, "s0.acc": 97.65039, "s0.loss_bbox": 0.02608, "s0.loss_mask": 0.10337, "s1.loss_cls": 0.0365, "s1.acc": 97.25239, "s1.loss_bbox": 0.0315, "s1.loss_mask": 0.0531, "s2.loss_cls": 0.01935, "s2.acc": 97.10437, "s2.loss_bbox": 0.02657, "s2.loss_mask": 0.02642, "loss": 0.39786, "time": 4.02511}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.767, "bbox_mAP_50": 0.847, "bbox_mAP_75": 0.827, "bbox_mAP_s": 0.343, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.767 0.847 0.827 0.343 0.768 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.005, "memory": 8401, "data_time": 3.8175, "loss_rpn_cls": 0.00913, "loss_rpn_bbox": 0.01096, "s0.loss_cls": 0.07675, "s0.acc": 97.10224, "s0.loss_bbox": 0.03119, "s0.loss_mask": 0.10582, "s1.loss_cls": 0.04556, "s1.acc": 96.53672, "s1.loss_bbox": 0.03531, "s1.loss_mask": 0.05329, "s2.loss_cls": 0.02464, "s2.acc": 96.2593, "s2.loss_bbox": 0.02803, "s2.loss_mask": 0.02647, "loss": 0.44716, "time": 4.63768}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 8401, "data_time": 2.55483, "loss_rpn_cls": 0.00383, "loss_rpn_bbox": 0.00936, "s0.loss_cls": 0.05835, "s0.acc": 97.76904, "s0.loss_bbox": 0.02517, "s0.loss_mask": 0.10251, "s1.loss_cls": 0.03429, "s1.acc": 97.39956, "s1.loss_bbox": 0.03062, "s1.loss_mask": 0.05257, "s2.loss_cls": 0.01833, "s2.acc": 97.25152, "s2.loss_bbox": 0.02619, "s2.loss_mask": 0.02619, "loss": 0.38741, "time": 3.97936}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.824, "bbox_mAP_s": 0.332, "bbox_mAP_m": 0.768, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.845 0.824 0.332 0.768 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.005, "memory": 8401, "data_time": 3.87627, "loss_rpn_cls": 0.00967, "loss_rpn_bbox": 0.01091, "s0.loss_cls": 0.07625, "s0.acc": 97.10537, "s0.loss_bbox": 0.03176, "s0.loss_mask": 0.10611, "s1.loss_cls": 0.04512, "s1.acc": 96.57692, "s1.loss_bbox": 0.03529, "s1.loss_mask": 0.05367, "s2.loss_cls": 0.02488, "s2.acc": 96.23487, "s2.loss_bbox": 0.02786, "s2.loss_mask": 0.02648, "loss": 0.44799, "time": 4.68602}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0005, "memory": 8401, "data_time": 2.57069, "loss_rpn_cls": 0.00368, "loss_rpn_bbox": 0.00908, "s0.loss_cls": 0.05884, "s0.acc": 97.79297, "s0.loss_bbox": 0.02501, "s0.loss_mask": 0.10228, "s1.loss_cls": 0.03449, "s1.acc": 97.41241, "s1.loss_bbox": 0.03036, "s1.loss_mask": 0.0526, "s2.loss_cls": 0.01833, "s2.acc": 97.25849, "s2.loss_bbox": 0.02619, "s2.loss_mask": 0.0263, "loss": 0.38716, "time": 3.99108}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.824, "bbox_mAP_s": 0.344, "bbox_mAP_m": 0.769, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.845 0.824 0.344 0.769 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.0005, "memory": 8401, "data_time": 3.80766, "loss_rpn_cls": 0.00917, "loss_rpn_bbox": 0.01055, "s0.loss_cls": 0.07607, "s0.acc": 97.18174, "s0.loss_bbox": 0.03108, "s0.loss_mask": 0.10668, "s1.loss_cls": 0.04523, "s1.acc": 96.66051, "s1.loss_bbox": 0.03446, "s1.loss_mask": 0.05361, "s2.loss_cls": 0.02458, "s2.acc": 96.2983, "s2.loss_bbox": 0.02808, "s2.loss_mask": 0.02664, "loss": 0.44615, "time": 4.6209}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0005, "memory": 8401, "data_time": 2.58679, "loss_rpn_cls": 0.00379, "loss_rpn_bbox": 0.00901, "s0.loss_cls": 0.05635, "s0.acc": 97.85498, "s0.loss_bbox": 0.02506, "s0.loss_mask": 0.10165, "s1.loss_cls": 0.03365, "s1.acc": 97.48384, "s1.loss_bbox": 0.03076, "s1.loss_mask": 0.05235, "s2.loss_cls": 0.01795, "s2.acc": 97.29433, "s2.loss_bbox": 0.02606, "s2.loss_mask": 0.0261, "loss": 0.38273, "time": 4.01766}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.771, "bbox_mAP_50": 0.848, "bbox_mAP_75": 0.827, "bbox_mAP_s": 0.343, "bbox_mAP_m": 0.771, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.771 0.848 0.827 0.343 0.771 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.0005, "memory": 8401, "data_time": 2.91985, "loss_rpn_cls": 0.00941, "loss_rpn_bbox": 0.01068, "s0.loss_cls": 0.07588, "s0.acc": 97.19989, "s0.loss_bbox": 0.03138, "s0.loss_mask": 0.10618, "s1.loss_cls": 0.04446, "s1.acc": 96.7281, "s1.loss_bbox": 0.03491, "s1.loss_mask": 0.0535, "s2.loss_cls": 0.02458, "s2.acc": 96.33439, "s2.loss_bbox": 0.02787, "s2.loss_mask": 0.0264, "loss": 0.44525, "time": 3.72115}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0005, "memory": 8401, "data_time": 2.14876, "loss_rpn_cls": 0.00378, "loss_rpn_bbox": 0.00911, "s0.loss_cls": 0.0571, "s0.acc": 97.82373, "s0.loss_bbox": 0.02516, "s0.loss_mask": 0.10225, "s1.loss_cls": 0.03369, "s1.acc": 97.45636, "s1.loss_bbox": 0.03067, "s1.loss_mask": 0.05245, "s2.loss_cls": 0.01799, "s2.acc": 97.28027, "s2.loss_bbox": 0.02619, "s2.loss_mask": 0.02608, "loss": 0.38448, "time": 3.57381}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.771, "bbox_mAP_50": 0.848, "bbox_mAP_75": 0.827, "bbox_mAP_s": 0.343, "bbox_mAP_m": 0.771, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.771 0.848 0.827 0.343 0.771 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.0005, "memory": 8401, "data_time": 2.95925, "loss_rpn_cls": 0.00953, "loss_rpn_bbox": 0.01075, "s0.loss_cls": 0.07694, "s0.acc": 97.18111, "s0.loss_bbox": 0.03025, "s0.loss_mask": 0.10536, "s1.loss_cls": 0.04564, "s1.acc": 96.66337, "s1.loss_bbox": 0.03417, "s1.loss_mask": 0.05316, "s2.loss_cls": 0.02461, "s2.acc": 96.34123, "s2.loss_bbox": 0.0272, "s2.loss_mask": 0.02635, "loss": 0.44395, "time": 3.76153}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0005, "memory": 8401, "data_time": 2.21903, "loss_rpn_cls": 0.00357, "loss_rpn_bbox": 0.00903, "s0.loss_cls": 0.05677, "s0.acc": 97.85547, "s0.loss_bbox": 0.02489, "s0.loss_mask": 0.10232, "s1.loss_cls": 0.03314, "s1.acc": 97.52779, "s1.loss_bbox": 0.03032, "s1.loss_mask": 0.05241, "s2.loss_cls": 0.01789, "s2.acc": 97.32791, "s2.loss_bbox": 0.02612, "s2.loss_mask": 0.02627, "loss": 0.38273, "time": 3.64953}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.769, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.824, "bbox_mAP_s": 0.344, "bbox_mAP_m": 0.769, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.769 0.845 0.824 0.344 0.769 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.0005, "memory": 8401, "data_time": 2.98514, "loss_rpn_cls": 0.00886, "loss_rpn_bbox": 0.01064, "s0.loss_cls": 0.07689, "s0.acc": 97.15169, "s0.loss_bbox": 0.03104, "s0.loss_mask": 0.10548, "s1.loss_cls": 0.04488, "s1.acc": 96.65601, "s1.loss_bbox": 0.03527, "s1.loss_mask": 0.05365, "s2.loss_cls": 0.02461, "s2.acc": 96.23155, "s2.loss_bbox": 0.0279, "s2.loss_mask": 0.02656, "loss": 0.44578, "time": 3.79388}
