{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=3,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=300))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/retinanet_r101_fpn_1x_coco_20200130-7a93545f.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/Retina_R101_fp16_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 322898516, "exp_name": "retinanet_r101_fp16_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 7935, "data_time": 0.07568, "loss_cls": 0.836, "loss_bbox": 0.22453, "loss": 1.06053, "time": 0.58151}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 8060, "data_time": 0.0143, "loss_cls": 0.25818, "loss_bbox": 0.12008, "loss": 0.37826, "time": 0.54014}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00221, "bbox_mAP": 0.555, "bbox_mAP_50": 0.665, "bbox_mAP_75": 0.622, "bbox_mAP_s": 0.111, "bbox_mAP_m": 0.558, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.555 0.665 0.622 0.111 0.558 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.00221, "memory": 8060, "data_time": 0.10378, "loss_cls": 0.1755, "loss_bbox": 0.10963, "loss": 0.28513, "time": 0.3493}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00321, "memory": 8060, "data_time": 0.07777, "loss_cls": 0.14426, "loss_bbox": 0.10101, "loss": 0.24527, "time": 0.57713}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00421, "memory": 8060, "data_time": 0.01448, "loss_cls": 0.11581, "loss_bbox": 0.0954, "loss": 0.21121, "time": 0.54258}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.694, "bbox_mAP_50": 0.812, "bbox_mAP_75": 0.771, "bbox_mAP_s": 0.116, "bbox_mAP_m": 0.695, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.694 0.812 0.771 0.116 0.695 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.00443, "memory": 8060, "data_time": 0.1038, "loss_cls": 0.11202, "loss_bbox": 0.09528, "loss": 0.2073, "time": 0.35136}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00542, "memory": 8060, "data_time": 0.07317, "loss_cls": 0.09596, "loss_bbox": 0.08951, "loss": 0.18548, "time": 0.5724}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00642, "memory": 8060, "data_time": 0.01442, "loss_cls": 0.09032, "loss_bbox": 0.0889, "loss": 0.17922, "time": 0.5474}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.00664, "bbox_mAP": 0.718, "bbox_mAP_50": 0.83, "bbox_mAP_75": 0.793, "bbox_mAP_s": 0.138, "bbox_mAP_m": 0.72, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.718 0.830 0.793 0.138 0.720 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.00664, "memory": 8060, "data_time": 0.10416, "loss_cls": 0.08975, "loss_bbox": 0.09003, "loss": 0.17978, "time": 0.35045}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00764, "memory": 8060, "data_time": 0.07565, "loss_cls": 0.0791, "loss_bbox": 0.085, "loss": 0.1641, "time": 0.57717}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00864, "memory": 8060, "data_time": 0.01402, "loss_cls": 0.07902, "loss_bbox": 0.08506, "loss": 0.16408, "time": 0.5452}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.718, "bbox_mAP_50": 0.821, "bbox_mAP_75": 0.792, "bbox_mAP_s": 0.095, "bbox_mAP_m": 0.721, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.718 0.821 0.792 0.095 0.721 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.00886, "memory": 8060, "data_time": 0.08471, "loss_cls": 0.08277, "loss_bbox": 0.08654, "loss": 0.16931, "time": 0.33203}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00986, "memory": 8060, "data_time": 0.06984, "loss_cls": 0.07239, "loss_bbox": 0.08235, "loss": 0.15474, "time": 0.57068}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01219, "loss_cls": 0.06841, "loss_bbox": 0.08291, "loss": 0.15132, "time": 0.5402}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.729, "bbox_mAP_50": 0.826, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.088, "bbox_mAP_m": 0.731, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.729 0.826 0.796 0.088 0.731 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.10303, "loss_cls": 0.07363, "loss_bbox": 0.08659, "loss": 0.16022, "time": 0.35131}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.07189, "loss_cls": 0.06508, "loss_bbox": 0.07873, "loss": 0.14381, "time": 0.57325}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01378, "loss_cls": 0.06129, "loss_bbox": 0.07804, "loss": 0.13932, "time": 0.53924}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.739, "bbox_mAP_50": 0.836, "bbox_mAP_75": 0.804, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.741, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.739 0.836 0.804 0.101 0.741 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.10209, "loss_cls": 0.07355, "loss_bbox": 0.08335, "loss": 0.1569, "time": 0.34807}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.0784, "loss_cls": 0.05766, "loss_bbox": 0.0764, "loss": 0.13406, "time": 0.57992}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01443, "loss_cls": 0.05564, "loss_bbox": 0.07683, "loss": 0.13247, "time": 0.53861}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.739, "bbox_mAP_50": 0.836, "bbox_mAP_75": 0.807, "bbox_mAP_s": 0.098, "bbox_mAP_m": 0.74, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.739 0.836 0.807 0.098 0.740 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.0983, "loss_cls": 0.07025, "loss_bbox": 0.08361, "loss": 0.15385, "time": 0.34628}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.07481, "loss_cls": 0.05081, "loss_bbox": 0.07418, "loss": 0.12499, "time": 0.57481}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01447, "loss_cls": 0.05203, "loss_bbox": 0.07543, "loss": 0.12745, "time": 0.54104}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.744, "bbox_mAP_50": 0.838, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.1, "bbox_mAP_m": 0.746, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.744 0.838 0.808 0.100 0.746 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.10598, "loss_cls": 0.06644, "loss_bbox": 0.08224, "loss": 0.14868, "time": 0.35257}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.07768, "loss_cls": 0.0473, "loss_bbox": 0.07346, "loss": 0.12076, "time": 0.57921}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01466, "loss_cls": 0.04754, "loss_bbox": 0.07289, "loss": 0.12043, "time": 0.5441}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.732, "bbox_mAP_50": 0.818, "bbox_mAP_75": 0.794, "bbox_mAP_s": 0.082, "bbox_mAP_m": 0.734, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.732 0.818 0.794 0.082 0.734 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.1003, "loss_cls": 0.06719, "loss_bbox": 0.08119, "loss": 0.14837, "time": 0.34845}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.07708, "loss_cls": 0.04204, "loss_bbox": 0.07113, "loss": 0.11317, "time": 0.57987}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01389, "loss_cls": 0.04269, "loss_bbox": 0.07291, "loss": 0.11559, "time": 0.54152}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.734, "bbox_mAP_50": 0.831, "bbox_mAP_75": 0.802, "bbox_mAP_s": 0.117, "bbox_mAP_m": 0.735, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.734 0.831 0.802 0.117 0.735 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.11059, "loss_cls": 0.0704, "loss_bbox": 0.08291, "loss": 0.15331, "time": 0.35765}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.07352, "loss_cls": 0.03903, "loss_bbox": 0.07044, "loss": 0.10947, "time": 0.57305}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01495, "loss_cls": 0.04017, "loss_bbox": 0.07145, "loss": 0.11162, "time": 0.54547}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.739, "bbox_mAP_50": 0.829, "bbox_mAP_75": 0.804, "bbox_mAP_s": 0.13, "bbox_mAP_m": 0.74, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.739 0.829 0.804 0.130 0.740 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.08303, "loss_cls": 0.06795, "loss_bbox": 0.08014, "loss": 0.14808, "time": 0.33043}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.06872, "loss_cls": 0.03404, "loss_bbox": 0.07023, "loss": 0.10427, "time": 0.56823}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 8060, "data_time": 0.01219, "loss_cls": 0.03604, "loss_bbox": 0.0704, "loss": 0.10644, "time": 0.53854}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.736, "bbox_mAP_50": 0.819, "bbox_mAP_75": 0.798, "bbox_mAP_s": 0.067, "bbox_mAP_m": 0.738, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.736 0.819 0.798 0.067 0.738 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.01, "memory": 8060, "data_time": 0.09969, "loss_cls": 0.07659, "loss_bbox": 0.08071, "loss": 0.1573, "time": 0.34637}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 8060, "data_time": 0.07542, "loss_cls": 0.02968, "loss_bbox": 0.06962, "loss": 0.0993, "time": 0.57705}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 8064, "data_time": 0.01368, "loss_cls": 0.03327, "loss_bbox": 0.06914, "loss": 0.10241, "time": 0.54043}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.734, "bbox_mAP_50": 0.817, "bbox_mAP_75": 0.793, "bbox_mAP_s": 0.067, "bbox_mAP_m": 0.735, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.734 0.817 0.793 0.067 0.735 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.01, "memory": 8064, "data_time": 0.09737, "loss_cls": 0.07767, "loss_bbox": 0.08081, "loss": 0.15848, "time": 0.34446}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 8064, "data_time": 0.07291, "loss_cls": 0.02724, "loss_bbox": 0.06805, "loss": 0.09529, "time": 0.57225}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 8064, "data_time": 0.01406, "loss_cls": 0.03135, "loss_bbox": 0.06918, "loss": 0.10054, "time": 0.54241}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.726, "bbox_mAP_50": 0.809, "bbox_mAP_75": 0.785, "bbox_mAP_s": 0.068, "bbox_mAP_m": 0.728, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.726 0.809 0.785 0.068 0.728 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.01, "memory": 8064, "data_time": 0.11194, "loss_cls": 0.08104, "loss_bbox": 0.08174, "loss": 0.16278, "time": 0.3586}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 8064, "data_time": 0.0733, "loss_cls": 0.02303, "loss_bbox": 0.06791, "loss": 0.09094, "time": 0.57439}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 8064, "data_time": 0.01457, "loss_cls": 0.02446, "loss_bbox": 0.06632, "loss": 0.09078, "time": 0.54303}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.725, "bbox_mAP_50": 0.806, "bbox_mAP_75": 0.787, "bbox_mAP_s": 0.04, "bbox_mAP_m": 0.727, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.725 0.806 0.787 0.040 0.727 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.01, "memory": 8064, "data_time": 0.10018, "loss_cls": 0.07924, "loss_bbox": 0.08036, "loss": 0.1596, "time": 0.34834}
