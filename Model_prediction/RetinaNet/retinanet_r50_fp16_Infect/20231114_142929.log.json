{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=3,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=300))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/retinanet_r50_fpn_fp16_1x_coco_20200702-0dbfb212.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\nfp16 = dict(loss_scale=512.0)\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/Retina_R50_fp16_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 929168034, "exp_name": "retinanet_r50_fp16_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3292, "data_time": 0.06586, "loss_cls": 0.82868, "loss_bbox": 0.20834, "loss": 1.03702, "time": 0.27407}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3460, "data_time": 0.0079, "loss_cls": 0.2738, "loss_bbox": 0.12195, "loss": 0.39575, "time": 0.20824}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3460, "data_time": 0.00789, "loss_cls": 0.18046, "loss_bbox": 0.1045, "loss": 0.28496, "time": 0.20743}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3460, "data_time": 0.00815, "loss_cls": 0.13727, "loss_bbox": 0.09749, "loss": 0.23476, "time": 0.20826}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.682, "bbox_mAP_50": 0.801, "bbox_mAP_75": 0.758, "bbox_mAP_s": 0.148, "bbox_mAP_m": 0.684, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.682 0.801 0.758 0.148 0.684 -1.000"}
{"mode": "val", "epoch": 1, "iter": 78, "lr": 0.00443, "memory": 3460, "data_time": 0.0603, "loss_cls": 0.11422, "loss_bbox": 0.09571, "loss": 0.20993, "time": 0.1673}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00542, "memory": 3460, "data_time": 0.06345, "loss_cls": 0.10633, "loss_bbox": 0.09139, "loss": 0.19772, "time": 0.26189}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00642, "memory": 3460, "data_time": 0.00762, "loss_cls": 0.09741, "loss_bbox": 0.08758, "loss": 0.18499, "time": 0.20731}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00742, "memory": 3460, "data_time": 0.00767, "loss_cls": 0.09806, "loss_bbox": 0.08987, "loss": 0.18793, "time": 0.20611}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00842, "memory": 3460, "data_time": 0.00785, "loss_cls": 0.08519, "loss_bbox": 0.08629, "loss": 0.17148, "time": 0.209}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.696, "bbox_mAP_50": 0.804, "bbox_mAP_75": 0.765, "bbox_mAP_s": 0.127, "bbox_mAP_m": 0.699, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.696 0.804 0.765 0.127 0.699 -1.000"}
{"mode": "val", "epoch": 2, "iter": 78, "lr": 0.00886, "memory": 3460, "data_time": 0.06135, "loss_cls": 0.08745, "loss_bbox": 0.0877, "loss": 0.17515, "time": 0.16791}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00986, "memory": 3460, "data_time": 0.06367, "loss_cls": 0.08529, "loss_bbox": 0.08317, "loss": 0.16846, "time": 0.26189}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 3460, "data_time": 0.00785, "loss_cls": 0.07846, "loss_bbox": 0.08427, "loss": 0.16273, "time": 0.20773}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 3460, "data_time": 0.00772, "loss_cls": 0.07683, "loss_bbox": 0.08419, "loss": 0.16102, "time": 0.20745}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00773, "loss_cls": 0.07485, "loss_bbox": 0.08115, "loss": 0.156, "time": 0.20722}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.01, "bbox_mAP": 0.728, "bbox_mAP_50": 0.83, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.154, "bbox_mAP_m": 0.73, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.728 0.830 0.796 0.154 0.730 -1.000"}
{"mode": "val", "epoch": 3, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06278, "loss_cls": 0.0789, "loss_bbox": 0.08397, "loss": 0.16287, "time": 0.16979}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06196, "loss_cls": 0.06681, "loss_bbox": 0.07994, "loss": 0.14675, "time": 0.25939}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.008, "loss_cls": 0.06658, "loss_bbox": 0.07882, "loss": 0.1454, "time": 0.20702}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00782, "loss_cls": 0.06835, "loss_bbox": 0.07956, "loss": 0.14792, "time": 0.20716}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00801, "loss_cls": 0.06295, "loss_bbox": 0.07566, "loss": 0.1386, "time": 0.21073}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.01, "bbox_mAP": 0.747, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.813, "bbox_mAP_s": 0.106, "bbox_mAP_m": 0.749, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.747 0.845 0.813 0.106 0.749 -1.000"}
{"mode": "val", "epoch": 4, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06422, "loss_cls": 0.07433, "loss_bbox": 0.08291, "loss": 0.15724, "time": 0.17025}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06826, "loss_cls": 0.06059, "loss_bbox": 0.07693, "loss": 0.13751, "time": 0.26767}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00813, "loss_cls": 0.05589, "loss_bbox": 0.07875, "loss": 0.13464, "time": 0.20884}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00774, "loss_cls": 0.05551, "loss_bbox": 0.07338, "loss": 0.12889, "time": 0.20532}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00786, "loss_cls": 0.05924, "loss_bbox": 0.07687, "loss": 0.13611, "time": 0.20994}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.745, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.811, "bbox_mAP_s": 0.082, "bbox_mAP_m": 0.748, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.745 0.840 0.811 0.082 0.748 -1.000"}
{"mode": "val", "epoch": 5, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06193, "loss_cls": 0.06549, "loss_bbox": 0.08144, "loss": 0.14692, "time": 0.16789}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.05935, "loss_cls": 0.05241, "loss_bbox": 0.0753, "loss": 0.12771, "time": 0.25717}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00735, "loss_cls": 0.05048, "loss_bbox": 0.07588, "loss": 0.12636, "time": 0.20612}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00911, "loss_cls": 0.05185, "loss_bbox": 0.07449, "loss": 0.12634, "time": 0.20878}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00722, "loss_cls": 0.05482, "loss_bbox": 0.07656, "loss": 0.13137, "time": 0.2078}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.746, "bbox_mAP_50": 0.838, "bbox_mAP_75": 0.813, "bbox_mAP_s": 0.108, "bbox_mAP_m": 0.747, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.746 0.838 0.813 0.108 0.747 -1.000"}
{"mode": "val", "epoch": 6, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.04199, "loss_cls": 0.06539, "loss_bbox": 0.08064, "loss": 0.14603, "time": 0.14973}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.05938, "loss_cls": 0.04718, "loss_bbox": 0.07238, "loss": 0.11956, "time": 0.25802}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00759, "loss_cls": 0.0504, "loss_bbox": 0.0744, "loss": 0.1248, "time": 0.206}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00716, "loss_cls": 0.04809, "loss_bbox": 0.07451, "loss": 0.1226, "time": 0.20832}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00726, "loss_cls": 0.05064, "loss_bbox": 0.07413, "loss": 0.12477, "time": 0.20714}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.73, "bbox_mAP_50": 0.821, "bbox_mAP_75": 0.793, "bbox_mAP_s": 0.108, "bbox_mAP_m": 0.732, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.730 0.821 0.793 0.108 0.732 -1.000"}
{"mode": "val", "epoch": 7, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06066, "loss_cls": 0.06775, "loss_bbox": 0.08136, "loss": 0.1491, "time": 0.16752}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06303, "loss_cls": 0.04248, "loss_bbox": 0.07118, "loss": 0.11366, "time": 0.26212}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00782, "loss_cls": 0.04602, "loss_bbox": 0.07308, "loss": 0.1191, "time": 0.20642}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00799, "loss_cls": 0.04231, "loss_bbox": 0.07316, "loss": 0.11547, "time": 0.20799}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00774, "loss_cls": 0.04244, "loss_bbox": 0.07171, "loss": 0.11415, "time": 0.20833}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.739, "bbox_mAP_50": 0.827, "bbox_mAP_75": 0.802, "bbox_mAP_s": 0.1, "bbox_mAP_m": 0.741, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.739 0.827 0.802 0.100 0.741 -1.000"}
{"mode": "val", "epoch": 8, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06051, "loss_cls": 0.0655, "loss_bbox": 0.07932, "loss": 0.14482, "time": 0.1667}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06102, "loss_cls": 0.0383, "loss_bbox": 0.06996, "loss": 0.10827, "time": 0.25881}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00807, "loss_cls": 0.03658, "loss_bbox": 0.07152, "loss": 0.10811, "time": 0.20749}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00768, "loss_cls": 0.0391, "loss_bbox": 0.07117, "loss": 0.11027, "time": 0.20615}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00763, "loss_cls": 0.04528, "loss_bbox": 0.07128, "loss": 0.11656, "time": 0.20847}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.728, "bbox_mAP_50": 0.817, "bbox_mAP_75": 0.798, "bbox_mAP_s": 0.077, "bbox_mAP_m": 0.73, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.728 0.817 0.798 0.077 0.730 -1.000"}
{"mode": "val", "epoch": 9, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.07326, "loss_cls": 0.06738, "loss_bbox": 0.08114, "loss": 0.14852, "time": 0.18085}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06126, "loss_cls": 0.03431, "loss_bbox": 0.07031, "loss": 0.10462, "time": 0.25879}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00803, "loss_cls": 0.04331, "loss_bbox": 0.06901, "loss": 0.11232, "time": 0.20732}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00782, "loss_cls": 0.03562, "loss_bbox": 0.0712, "loss": 0.10682, "time": 0.20743}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00801, "loss_cls": 0.03758, "loss_bbox": 0.07325, "loss": 0.11083, "time": 0.2108}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.719, "bbox_mAP_50": 0.801, "bbox_mAP_75": 0.779, "bbox_mAP_s": 0.056, "bbox_mAP_m": 0.721, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.719 0.801 0.779 0.056 0.721 -1.000"}
{"mode": "val", "epoch": 10, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.0762, "loss_cls": 0.0792, "loss_bbox": 0.07886, "loss": 0.15807, "time": 0.18297}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.05941, "loss_cls": 0.03028, "loss_bbox": 0.06656, "loss": 0.09684, "time": 0.25596}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00817, "loss_cls": 0.03511, "loss_bbox": 0.07073, "loss": 0.10584, "time": 0.20829}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00794, "loss_cls": 0.0304, "loss_bbox": 0.06784, "loss": 0.09823, "time": 0.20774}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00808, "loss_cls": 0.02953, "loss_bbox": 0.06758, "loss": 0.09711, "time": 0.20795}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.731, "bbox_mAP_50": 0.815, "bbox_mAP_75": 0.79, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.731 0.815 0.790 0.027 0.733 -1.000"}
{"mode": "val", "epoch": 11, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.07061, "loss_cls": 0.07135, "loss_bbox": 0.07921, "loss": 0.15056, "time": 0.17765}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.0615, "loss_cls": 0.0248, "loss_bbox": 0.06774, "loss": 0.09254, "time": 0.26}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00825, "loss_cls": 0.02387, "loss_bbox": 0.06859, "loss": 0.09246, "time": 0.20644}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00805, "loss_cls": 0.02608, "loss_bbox": 0.06864, "loss": 0.09472, "time": 0.20759}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.008, "loss_cls": 0.02627, "loss_bbox": 0.07051, "loss": 0.09678, "time": 0.20885}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.728, "bbox_mAP_50": 0.82, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.055, "bbox_mAP_m": 0.73, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.728 0.820 0.796 0.055 0.730 -1.000"}
{"mode": "val", "epoch": 12, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06836, "loss_cls": 0.07821, "loss_bbox": 0.08444, "loss": 0.16265, "time": 0.17484}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06215, "loss_cls": 0.02505, "loss_bbox": 0.06906, "loss": 0.09411, "time": 0.26061}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00847, "loss_cls": 0.02481, "loss_bbox": 0.06606, "loss": 0.09087, "time": 0.207}
{"mode": "train", "epoch": 13, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00815, "loss_cls": 0.02844, "loss_bbox": 0.06823, "loss": 0.09667, "time": 0.21976}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00794, "loss_cls": 0.02586, "loss_bbox": 0.06811, "loss": 0.09398, "time": 0.20661}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.719, "bbox_mAP_50": 0.812, "bbox_mAP_75": 0.789, "bbox_mAP_s": 0.053, "bbox_mAP_m": 0.721, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.719 0.812 0.789 0.053 0.721 -1.000"}
{"mode": "val", "epoch": 13, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.05389, "loss_cls": 0.08616, "loss_bbox": 0.08581, "loss": 0.17196, "time": 0.16193}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.05864, "loss_cls": 0.02129, "loss_bbox": 0.06555, "loss": 0.08684, "time": 0.25628}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00706, "loss_cls": 0.02079, "loss_bbox": 0.06781, "loss": 0.0886, "time": 0.2049}
{"mode": "train", "epoch": 14, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00773, "loss_cls": 0.02518, "loss_bbox": 0.06865, "loss": 0.09383, "time": 0.20651}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.00694, "loss_cls": 0.02634, "loss_bbox": 0.0684, "loss": 0.09474, "time": 0.20703}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.729, "bbox_mAP_50": 0.815, "bbox_mAP_75": 0.792, "bbox_mAP_s": 0.028, "bbox_mAP_m": 0.731, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.729 0.815 0.792 0.028 0.731 -1.000"}
{"mode": "val", "epoch": 14, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.04248, "loss_cls": 0.07642, "loss_bbox": 0.07869, "loss": 0.15511, "time": 0.15005}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 3489, "data_time": 0.06166, "loss_cls": 0.02169, "loss_bbox": 0.06708, "loss": 0.08876, "time": 0.25954}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 3489, "data_time": 0.00761, "loss_cls": 0.03162, "loss_bbox": 0.06798, "loss": 0.0996, "time": 0.20642}
{"mode": "train", "epoch": 15, "iter": 150, "lr": 0.01, "memory": 3489, "data_time": 0.00754, "loss_cls": 0.02621, "loss_bbox": 0.06646, "loss": 0.09268, "time": 0.20702}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.01, "memory": 3489, "data_time": 0.0081, "loss_cls": 0.01962, "loss_bbox": 0.0655, "loss": 0.08512, "time": 0.20989}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.69, "bbox_mAP_50": 0.767, "bbox_mAP_75": 0.746, "bbox_mAP_s": 0.028, "bbox_mAP_m": 0.692, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.690 0.767 0.746 0.028 0.692 -1.000"}
{"mode": "val", "epoch": 15, "iter": 78, "lr": 0.01, "memory": 3489, "data_time": 0.06167, "loss_cls": 0.13795, "loss_bbox": 0.07834, "loss": 0.2163, "time": 0.16842}
