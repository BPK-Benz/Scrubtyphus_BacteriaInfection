{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=3,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=300))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/retinanet_r101_fpn_1x_coco_20200130-7a93545f.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/Retina_R101_Infect'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 100820525, "exp_name": "retinanet_r101_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 13820, "data_time": 0.07121, "loss_cls": 0.83491, "loss_bbox": 0.22373, "loss": 1.05864, "time": 0.88982}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 13820, "data_time": 0.02416, "loss_cls": 0.2547, "loss_bbox": 0.12014, "loss": 0.37484, "time": 0.87817}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00221, "bbox_mAP": 0.523, "bbox_mAP_50": 0.632, "bbox_mAP_75": 0.588, "bbox_mAP_s": 0.104, "bbox_mAP_m": 0.528, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.523 0.632 0.588 0.104 0.528 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.00221, "memory": 13820, "data_time": 0.08682, "loss_cls": 0.1782, "loss_bbox": 0.10959, "loss": 0.28779, "time": 0.46018}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00321, "memory": 13820, "data_time": 0.07488, "loss_cls": 0.1497, "loss_bbox": 0.10113, "loss": 0.25083, "time": 0.90132}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00421, "memory": 13820, "data_time": 0.02343, "loss_cls": 0.11633, "loss_bbox": 0.09516, "loss": 0.21149, "time": 0.875}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.686, "bbox_mAP_50": 0.804, "bbox_mAP_75": 0.764, "bbox_mAP_s": 0.121, "bbox_mAP_m": 0.689, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.686 0.804 0.764 0.121 0.689 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.00443, "memory": 13820, "data_time": 0.08462, "loss_cls": 0.10871, "loss_bbox": 0.0952, "loss": 0.20392, "time": 0.45362}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00542, "memory": 13820, "data_time": 0.07091, "loss_cls": 0.10031, "loss_bbox": 0.09189, "loss": 0.1922, "time": 0.90472}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00642, "memory": 13820, "data_time": 0.02389, "loss_cls": 0.08626, "loss_bbox": 0.08741, "loss": 0.17367, "time": 0.86669}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.00664, "bbox_mAP": 0.707, "bbox_mAP_50": 0.814, "bbox_mAP_75": 0.782, "bbox_mAP_s": 0.115, "bbox_mAP_m": 0.71, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.707 0.814 0.782 0.115 0.710 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.00664, "memory": 13820, "data_time": 0.08866, "loss_cls": 0.08935, "loss_bbox": 0.09029, "loss": 0.17964, "time": 0.46188}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00764, "memory": 13831, "data_time": 0.07217, "loss_cls": 0.08178, "loss_bbox": 0.08586, "loss": 0.16764, "time": 0.89982}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00864, "memory": 13831, "data_time": 0.02391, "loss_cls": 0.0763, "loss_bbox": 0.08356, "loss": 0.15986, "time": 0.86451}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.733, "bbox_mAP_50": 0.843, "bbox_mAP_75": 0.81, "bbox_mAP_s": 0.156, "bbox_mAP_m": 0.734, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.733 0.843 0.810 0.156 0.734 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.00886, "memory": 13831, "data_time": 0.09115, "loss_cls": 0.08688, "loss_bbox": 0.08659, "loss": 0.17347, "time": 0.46477}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00986, "memory": 13831, "data_time": 0.07685, "loss_cls": 0.06965, "loss_bbox": 0.08266, "loss": 0.15231, "time": 0.91183}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02452, "loss_cls": 0.07225, "loss_bbox": 0.08173, "loss": 0.15398, "time": 0.87269}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.742, "bbox_mAP_50": 0.843, "bbox_mAP_75": 0.813, "bbox_mAP_s": 0.115, "bbox_mAP_m": 0.744, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.742 0.843 0.813 0.115 0.744 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09076, "loss_cls": 0.07637, "loss_bbox": 0.08487, "loss": 0.16124, "time": 0.46416}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07871, "loss_cls": 0.06409, "loss_bbox": 0.07952, "loss": 0.14361, "time": 0.91676}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02416, "loss_cls": 0.06097, "loss_bbox": 0.07712, "loss": 0.13809, "time": 0.87225}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.718, "bbox_mAP_50": 0.811, "bbox_mAP_75": 0.79, "bbox_mAP_s": 0.109, "bbox_mAP_m": 0.72, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.718 0.811 0.790 0.109 0.720 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.08411, "loss_cls": 0.07676, "loss_bbox": 0.08504, "loss": 0.1618, "time": 0.45384}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.06711, "loss_cls": 0.05792, "loss_bbox": 0.07659, "loss": 0.13451, "time": 0.90454}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02328, "loss_cls": 0.05774, "loss_bbox": 0.07672, "loss": 0.13446, "time": 0.87747}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.734, "bbox_mAP_50": 0.831, "bbox_mAP_75": 0.798, "bbox_mAP_s": 0.095, "bbox_mAP_m": 0.735, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.734 0.831 0.798 0.095 0.735 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09111, "loss_cls": 0.06901, "loss_bbox": 0.08378, "loss": 0.15279, "time": 0.46663}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07296, "loss_cls": 0.05177, "loss_bbox": 0.07437, "loss": 0.12614, "time": 0.90411}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02364, "loss_cls": 0.05172, "loss_bbox": 0.07436, "loss": 0.12608, "time": 0.86313}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.745, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.81, "bbox_mAP_s": 0.124, "bbox_mAP_m": 0.747, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.745 0.839 0.810 0.124 0.747 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09006, "loss_cls": 0.06683, "loss_bbox": 0.08184, "loss": 0.14867, "time": 0.46412}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07361, "loss_cls": 0.04513, "loss_bbox": 0.07337, "loss": 0.1185, "time": 0.90536}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02311, "loss_cls": 0.0477, "loss_bbox": 0.07345, "loss": 0.12115, "time": 0.87332}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.746, "bbox_mAP_50": 0.839, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.109, "bbox_mAP_m": 0.747, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.746 0.839 0.808 0.109 0.747 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09342, "loss_cls": 0.06775, "loss_bbox": 0.08211, "loss": 0.14986, "time": 0.46653}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07598, "loss_cls": 0.04426, "loss_bbox": 0.07298, "loss": 0.11724, "time": 0.91087}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02434, "loss_cls": 0.04118, "loss_bbox": 0.07322, "loss": 0.1144, "time": 0.87841}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.736, "bbox_mAP_50": 0.824, "bbox_mAP_75": 0.799, "bbox_mAP_s": 0.089, "bbox_mAP_m": 0.737, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.736 0.824 0.799 0.089 0.737 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09539, "loss_cls": 0.06908, "loss_bbox": 0.08181, "loss": 0.15089, "time": 0.4707}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07258, "loss_cls": 0.0397, "loss_bbox": 0.07325, "loss": 0.11295, "time": 0.91146}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02254, "loss_cls": 0.0365, "loss_bbox": 0.07046, "loss": 0.10696, "time": 0.87265}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.741, "bbox_mAP_50": 0.835, "bbox_mAP_75": 0.805, "bbox_mAP_s": 0.153, "bbox_mAP_m": 0.742, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.741 0.835 0.805 0.153 0.742 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09543, "loss_cls": 0.06723, "loss_bbox": 0.08113, "loss": 0.14837, "time": 0.46862}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07301, "loss_cls": 0.03493, "loss_bbox": 0.06962, "loss": 0.10455, "time": 0.91201}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.0232, "loss_cls": 0.03402, "loss_bbox": 0.06999, "loss": 0.10401, "time": 0.86699}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.734, "bbox_mAP_50": 0.822, "bbox_mAP_75": 0.797, "bbox_mAP_s": 0.082, "bbox_mAP_m": 0.736, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.734 0.822 0.797 0.082 0.736 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09294, "loss_cls": 0.07047, "loss_bbox": 0.08161, "loss": 0.15208, "time": 0.46682}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07382, "loss_cls": 0.02906, "loss_bbox": 0.06953, "loss": 0.09858, "time": 0.90588}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02421, "loss_cls": 0.02944, "loss_bbox": 0.06891, "loss": 0.09836, "time": 0.87215}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.732, "bbox_mAP_50": 0.818, "bbox_mAP_75": 0.791, "bbox_mAP_s": 0.083, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.732 0.818 0.791 0.083 0.733 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.09087, "loss_cls": 0.08092, "loss_bbox": 0.08015, "loss": 0.16107, "time": 0.46376}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.07491, "loss_cls": 0.02599, "loss_bbox": 0.06885, "loss": 0.09483, "time": 0.91043}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02416, "loss_cls": 0.02745, "loss_bbox": 0.06795, "loss": 0.09541, "time": 0.87413}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.729, "bbox_mAP_50": 0.817, "bbox_mAP_75": 0.79, "bbox_mAP_s": 0.08, "bbox_mAP_m": 0.73, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.729 0.817 0.790 0.080 0.730 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.08895, "loss_cls": 0.08334, "loss_bbox": 0.08155, "loss": 0.16489, "time": 0.46288}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 13831, "data_time": 0.0716, "loss_cls": 0.02486, "loss_bbox": 0.06756, "loss": 0.09242, "time": 0.91005}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 13831, "data_time": 0.02468, "loss_cls": 0.02406, "loss_bbox": 0.06899, "loss": 0.09305, "time": 0.87399}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.716, "bbox_mAP_50": 0.8, "bbox_mAP_75": 0.778, "bbox_mAP_s": 0.059, "bbox_mAP_m": 0.718, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.716 0.800 0.778 0.059 0.718 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.01, "memory": 13831, "data_time": 0.08698, "loss_cls": 0.10311, "loss_bbox": 0.08083, "loss": 0.18394, "time": 0.45688}
