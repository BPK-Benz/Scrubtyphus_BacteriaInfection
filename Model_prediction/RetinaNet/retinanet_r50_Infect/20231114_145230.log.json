{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 11.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=3,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=300))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TrainNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/workspace/NAS/Benz_Cell/cellLabel-main/Coco_File/InfectTotal_TestNuc_3class.json',\n        img_prefix='/workspace/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=15)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/retinanet_r50_fpn_1x_coco_20200130-c2398f9e.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Infected_cells', 'Uninfected_cells', 'Irrelevant_cells')\nimg_scale = (1020, 768)\nalbu_train_transforms = [\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=0.5),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=0.5),\n            dict(type='MotionBlur', blur_limit=(3, 5), p=0.5)\n        ],\n        p=0.1)\n]\nbase = '/workspace/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/Retina_R50_InfectNuc'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 685091552, "exp_name": "retinanet_r50_Infect.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8684, "data_time": 0.07716, "loss_cls": 0.83228, "loss_bbox": 0.21118, "loss": 1.04346, "time": 0.65552}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 8684, "data_time": 0.02059, "loss_cls": 0.2735, "loss_bbox": 0.12195, "loss": 0.39545, "time": 0.60102}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00221, "bbox_mAP": 0.462, "bbox_mAP_50": 0.56, "bbox_mAP_75": 0.521, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.467, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.462 0.560 0.521 0.027 0.467 -1.000"}
{"mode": "val", "epoch": 1, "iter": 39, "lr": 0.00221, "memory": 8684, "data_time": 0.08916, "loss_cls": 0.20645, "loss_bbox": 0.11102, "loss": 0.31746, "time": 0.38076}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00321, "memory": 8707, "data_time": 0.07472, "loss_cls": 0.17441, "loss_bbox": 0.10258, "loss": 0.27699, "time": 0.65027}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00421, "memory": 8707, "data_time": 0.01983, "loss_cls": 0.12675, "loss_bbox": 0.09642, "loss": 0.22317, "time": 0.60593}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00443, "bbox_mAP": 0.693, "bbox_mAP_50": 0.814, "bbox_mAP_75": 0.773, "bbox_mAP_s": 0.147, "bbox_mAP_m": 0.695, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.693 0.814 0.773 0.147 0.695 -1.000"}
{"mode": "val", "epoch": 2, "iter": 39, "lr": 0.00443, "memory": 8707, "data_time": 0.08975, "loss_cls": 0.11464, "loss_bbox": 0.0975, "loss": 0.21214, "time": 0.38483}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00542, "memory": 8707, "data_time": 0.07471, "loss_cls": 0.10451, "loss_bbox": 0.09083, "loss": 0.19534, "time": 0.64831}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00642, "memory": 8707, "data_time": 0.02056, "loss_cls": 0.0961, "loss_bbox": 0.0894, "loss": 0.1855, "time": 0.60658}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.00664, "bbox_mAP": 0.697, "bbox_mAP_50": 0.803, "bbox_mAP_75": 0.767, "bbox_mAP_s": 0.1, "bbox_mAP_m": 0.699, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.697 0.803 0.767 0.100 0.699 -1.000"}
{"mode": "val", "epoch": 3, "iter": 39, "lr": 0.00664, "memory": 8707, "data_time": 0.08901, "loss_cls": 0.09313, "loss_bbox": 0.09066, "loss": 0.18379, "time": 0.38382}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00764, "memory": 8707, "data_time": 0.07216, "loss_cls": 0.08862, "loss_bbox": 0.08599, "loss": 0.17462, "time": 0.64497}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00864, "memory": 8707, "data_time": 0.01969, "loss_cls": 0.08076, "loss_bbox": 0.08475, "loss": 0.16551, "time": 0.60946}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.00886, "bbox_mAP": 0.694, "bbox_mAP_50": 0.788, "bbox_mAP_75": 0.761, "bbox_mAP_s": 0.067, "bbox_mAP_m": 0.697, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.694 0.788 0.761 0.067 0.697 -1.000"}
{"mode": "val", "epoch": 4, "iter": 39, "lr": 0.00886, "memory": 8707, "data_time": 0.08429, "loss_cls": 0.08842, "loss_bbox": 0.08673, "loss": 0.17515, "time": 0.38059}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00986, "memory": 8716, "data_time": 0.07022, "loss_cls": 0.07665, "loss_bbox": 0.08306, "loss": 0.15971, "time": 0.64543}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.0197, "loss_cls": 0.07308, "loss_bbox": 0.08045, "loss": 0.15353, "time": 0.60433}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.01, "bbox_mAP": 0.713, "bbox_mAP_50": 0.81, "bbox_mAP_75": 0.781, "bbox_mAP_s": 0.111, "bbox_mAP_m": 0.715, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.713 0.810 0.781 0.111 0.715 -1.000"}
{"mode": "val", "epoch": 5, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.0916, "loss_cls": 0.07775, "loss_bbox": 0.08564, "loss": 0.16339, "time": 0.38425}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07522, "loss_cls": 0.06988, "loss_bbox": 0.07982, "loss": 0.1497, "time": 0.64795}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.01959, "loss_cls": 0.0672, "loss_bbox": 0.08024, "loss": 0.14743, "time": 0.60653}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.01, "bbox_mAP": 0.738, "bbox_mAP_50": 0.834, "bbox_mAP_75": 0.801, "bbox_mAP_s": 0.089, "bbox_mAP_m": 0.74, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.738 0.834 0.801 0.089 0.740 -1.000"}
{"mode": "val", "epoch": 6, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.09351, "loss_cls": 0.07153, "loss_bbox": 0.08462, "loss": 0.15615, "time": 0.38509}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07339, "loss_cls": 0.06018, "loss_bbox": 0.07792, "loss": 0.1381, "time": 0.64915}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.01996, "loss_cls": 0.06075, "loss_bbox": 0.0789, "loss": 0.13965, "time": 0.60528}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.01, "bbox_mAP": 0.744, "bbox_mAP_50": 0.834, "bbox_mAP_75": 0.804, "bbox_mAP_s": 0.089, "bbox_mAP_m": 0.746, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.744 0.834 0.804 0.089 0.746 -1.000"}
{"mode": "val", "epoch": 7, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.09506, "loss_cls": 0.07317, "loss_bbox": 0.08221, "loss": 0.15539, "time": 0.38799}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.0773, "loss_cls": 0.05555, "loss_bbox": 0.07636, "loss": 0.13191, "time": 0.65389}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.01993, "loss_cls": 0.0555, "loss_bbox": 0.07542, "loss": 0.13092, "time": 0.60549}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.01, "bbox_mAP": 0.727, "bbox_mAP_50": 0.815, "bbox_mAP_75": 0.789, "bbox_mAP_s": 0.089, "bbox_mAP_m": 0.73, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.727 0.815 0.789 0.089 0.730 -1.000"}
{"mode": "val", "epoch": 8, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.08879, "loss_cls": 0.07106, "loss_bbox": 0.0811, "loss": 0.15216, "time": 0.38208}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07288, "loss_cls": 0.0556, "loss_bbox": 0.07482, "loss": 0.13042, "time": 0.64906}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.02056, "loss_cls": 0.06115, "loss_bbox": 0.07533, "loss": 0.13648, "time": 0.60817}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.01, "bbox_mAP": 0.73, "bbox_mAP_50": 0.824, "bbox_mAP_75": 0.795, "bbox_mAP_s": 0.112, "bbox_mAP_m": 0.733, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.730 0.824 0.795 0.112 0.733 -1.000"}
{"mode": "val", "epoch": 9, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.09071, "loss_cls": 0.07178, "loss_bbox": 0.08085, "loss": 0.15263, "time": 0.38374}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07376, "loss_cls": 0.05032, "loss_bbox": 0.07569, "loss": 0.12601, "time": 0.64962}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.01887, "loss_cls": 0.04822, "loss_bbox": 0.07382, "loss": 0.12204, "time": 0.60476}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.01, "bbox_mAP": 0.738, "bbox_mAP_50": 0.829, "bbox_mAP_75": 0.799, "bbox_mAP_s": 0.088, "bbox_mAP_m": 0.74, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.738 0.829 0.799 0.088 0.740 -1.000"}
{"mode": "val", "epoch": 10, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.08567, "loss_cls": 0.06617, "loss_bbox": 0.08032, "loss": 0.14649, "time": 0.37927}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07332, "loss_cls": 0.04672, "loss_bbox": 0.07433, "loss": 0.12105, "time": 0.64923}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.0196, "loss_cls": 0.04501, "loss_bbox": 0.07278, "loss": 0.11779, "time": 0.60621}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.01, "bbox_mAP": 0.743, "bbox_mAP_50": 0.837, "bbox_mAP_75": 0.805, "bbox_mAP_s": 0.068, "bbox_mAP_m": 0.745, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.743 0.837 0.805 0.068 0.745 -1.000"}
{"mode": "val", "epoch": 11, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.08668, "loss_cls": 0.06804, "loss_bbox": 0.08178, "loss": 0.14982, "time": 0.38038}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07291, "loss_cls": 0.04298, "loss_bbox": 0.07231, "loss": 0.1153, "time": 0.64927}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.01958, "loss_cls": 0.04425, "loss_bbox": 0.07387, "loss": 0.11811, "time": 0.60241}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.01, "bbox_mAP": 0.729, "bbox_mAP_50": 0.818, "bbox_mAP_75": 0.791, "bbox_mAP_s": 0.082, "bbox_mAP_m": 0.731, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.729 0.818 0.791 0.082 0.731 -1.000"}
{"mode": "val", "epoch": 12, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.09102, "loss_cls": 0.06985, "loss_bbox": 0.07998, "loss": 0.14983, "time": 0.38409}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07537, "loss_cls": 0.03846, "loss_bbox": 0.07158, "loss": 0.11004, "time": 0.65102}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.01994, "loss_cls": 0.0387, "loss_bbox": 0.0721, "loss": 0.11081, "time": 0.60805}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.01, "bbox_mAP": 0.73, "bbox_mAP_50": 0.817, "bbox_mAP_75": 0.791, "bbox_mAP_s": 0.082, "bbox_mAP_m": 0.732, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.730 0.817 0.791 0.082 0.732 -1.000"}
{"mode": "val", "epoch": 13, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.09051, "loss_cls": 0.07077, "loss_bbox": 0.07994, "loss": 0.15071, "time": 0.38438}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07365, "loss_cls": 0.03596, "loss_bbox": 0.07129, "loss": 0.10725, "time": 0.65214}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.0203, "loss_cls": 0.03501, "loss_bbox": 0.07025, "loss": 0.10526, "time": 0.6081}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.01, "bbox_mAP": 0.747, "bbox_mAP_50": 0.837, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.104, "bbox_mAP_m": 0.75, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.747 0.837 0.808 0.104 0.750 -1.000"}
{"mode": "val", "epoch": 14, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.09756, "loss_cls": 0.07722, "loss_bbox": 0.07947, "loss": 0.15669, "time": 0.3918}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 0.01, "memory": 8716, "data_time": 0.07136, "loss_cls": 0.03209, "loss_bbox": 0.06957, "loss": 0.10166, "time": 0.65019}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.01, "memory": 8716, "data_time": 0.0203, "loss_cls": 0.03547, "loss_bbox": 0.07106, "loss": 0.10653, "time": 0.60679}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.01, "bbox_mAP": 0.754, "bbox_mAP_50": 0.846, "bbox_mAP_75": 0.815, "bbox_mAP_s": 0.102, "bbox_mAP_m": 0.755, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.754 0.846 0.815 0.102 0.755 -1.000"}
{"mode": "val", "epoch": 15, "iter": 39, "lr": 0.01, "memory": 8716, "data_time": 0.08592, "loss_cls": 0.07804, "loss_bbox": 0.08164, "loss": 0.15967, "time": 0.38346}
